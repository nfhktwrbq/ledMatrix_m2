
ledMatrix_m2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083c8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  080084d8  080084d8  000184d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086fc  080086fc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080086fc  080086fc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080086fc  080086fc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086fc  080086fc  000186fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008700  08008700  00018700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c3c  20000074  08008778  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cb0  08008778  00021cb0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023900  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004571  00000000  00000000  0004399d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b68  00000000  00000000  00047f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001988  00000000  00000000  00049a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d897  00000000  00000000  0004b400  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018ed0  00000000  00000000  00068c97  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a104c  00000000  00000000  00081b67  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00122bb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a04  00000000  00000000  00122c30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080084c0 	.word	0x080084c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080084c0 	.word	0x080084c0

08000150 <_get_press_state>:

static BUTTON_ID _prev_press_state = 0;
static BUTTON_ID _cur_press_state = 0;

static BUTTON_ID _get_press_state(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
	BUTTON_ID state = 0;
 8000156:	2300      	movs	r3, #0
 8000158:	71fb      	strb	r3, [r7, #7]

	if(HAL_GPIO_ReadPin(BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin) == GPIO_PIN_RESET)
 800015a:	2120      	movs	r1, #32
 800015c:	481e      	ldr	r0, [pc, #120]	; (80001d8 <_get_press_state+0x88>)
 800015e:	f002 f84d 	bl	80021fc <HAL_GPIO_ReadPin>
 8000162:	4603      	mov	r3, r0
 8000164:	2b00      	cmp	r3, #0
 8000166:	d103      	bne.n	8000170 <_get_press_state+0x20>
	{
		state |= BUTTON_DOWN;
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	f043 0302 	orr.w	r3, r3, #2
 800016e:	71fb      	strb	r3, [r7, #7]
	}

	if(HAL_GPIO_ReadPin(BUTTON_UP_GPIO_Port, BUTTON_UP_Pin) == GPIO_PIN_RESET)
 8000170:	2110      	movs	r1, #16
 8000172:	4819      	ldr	r0, [pc, #100]	; (80001d8 <_get_press_state+0x88>)
 8000174:	f002 f842 	bl	80021fc <HAL_GPIO_ReadPin>
 8000178:	4603      	mov	r3, r0
 800017a:	2b00      	cmp	r3, #0
 800017c:	d103      	bne.n	8000186 <_get_press_state+0x36>
	{
		state |= BUTTON_UP;
 800017e:	79fb      	ldrb	r3, [r7, #7]
 8000180:	f043 0301 	orr.w	r3, r3, #1
 8000184:	71fb      	strb	r3, [r7, #7]
	}

	if(HAL_GPIO_ReadPin(BUTTON_LEFT_GPIO_Port, BUTTON_LEFT_Pin) == GPIO_PIN_RESET)
 8000186:	f44f 7180 	mov.w	r1, #256	; 0x100
 800018a:	4813      	ldr	r0, [pc, #76]	; (80001d8 <_get_press_state+0x88>)
 800018c:	f002 f836 	bl	80021fc <HAL_GPIO_ReadPin>
 8000190:	4603      	mov	r3, r0
 8000192:	2b00      	cmp	r3, #0
 8000194:	d103      	bne.n	800019e <_get_press_state+0x4e>
	{
		state |= BUTTON_LEFT;
 8000196:	79fb      	ldrb	r3, [r7, #7]
 8000198:	f043 0304 	orr.w	r3, r3, #4
 800019c:	71fb      	strb	r3, [r7, #7]
	}

	if(HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin) == GPIO_PIN_RESET)
 800019e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001a2:	480d      	ldr	r0, [pc, #52]	; (80001d8 <_get_press_state+0x88>)
 80001a4:	f002 f82a 	bl	80021fc <HAL_GPIO_ReadPin>
 80001a8:	4603      	mov	r3, r0
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d103      	bne.n	80001b6 <_get_press_state+0x66>
	{
		state |= BUTTON_RIGHT;
 80001ae:	79fb      	ldrb	r3, [r7, #7]
 80001b0:	f043 0308 	orr.w	r3, r3, #8
 80001b4:	71fb      	strb	r3, [r7, #7]
	}

	if(HAL_GPIO_ReadPin(BUTTON_ENTER_GPIO_Port, BUTTON_ENTER_Pin) == GPIO_PIN_RESET)
 80001b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <_get_press_state+0x8c>)
 80001bc:	f002 f81e 	bl	80021fc <HAL_GPIO_ReadPin>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d103      	bne.n	80001ce <_get_press_state+0x7e>
	{
		state |= BUTTON_ENTER;
 80001c6:	79fb      	ldrb	r3, [r7, #7]
 80001c8:	f043 0310 	orr.w	r3, r3, #16
 80001cc:	71fb      	strb	r3, [r7, #7]
	}

	return state;
 80001ce:	79fb      	ldrb	r3, [r7, #7]
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	3708      	adds	r7, #8
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	40010c00 	.word	0x40010c00
 80001dc:	40010800 	.word	0x40010800

080001e0 <_handle_pressed_buttons>:

static void _handle_pressed_buttons(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0

	for(BUTTON_ID iter_button = BUTTON_MIN; iter_button <= BUTTON_MAX; iter_button <<= 1)
 80001e6:	2301      	movs	r3, #1
 80001e8:	71fb      	strb	r3, [r7, #7]
 80001ea:	e01f      	b.n	800022c <_handle_pressed_buttons+0x4c>
	{
		if( (iter_button & _cur_press_state) ^ (iter_button & _prev_press_state) ) //state change
 80001ec:	4b13      	ldr	r3, [pc, #76]	; (800023c <_handle_pressed_buttons+0x5c>)
 80001ee:	781a      	ldrb	r2, [r3, #0]
 80001f0:	4b13      	ldr	r3, [pc, #76]	; (8000240 <_handle_pressed_buttons+0x60>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	4053      	eors	r3, r2
 80001f6:	b2da      	uxtb	r2, r3
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	4013      	ands	r3, r2
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d011      	beq.n	8000226 <_handle_pressed_buttons+0x46>
		{
			if(iter_button & _cur_press_state)// button press
 8000202:	4b0e      	ldr	r3, [pc, #56]	; (800023c <_handle_pressed_buttons+0x5c>)
 8000204:	781a      	ldrb	r2, [r3, #0]
 8000206:	79fb      	ldrb	r3, [r7, #7]
 8000208:	4013      	ands	r3, r2
 800020a:	b2db      	uxtb	r3, r3
 800020c:	2b00      	cmp	r3, #0
 800020e:	d005      	beq.n	800021c <_handle_pressed_buttons+0x3c>
			{
				DEBUG_BUTTONS_PRINT("button %u pressed\n", iter_button);
 8000210:	79fb      	ldrb	r3, [r7, #7]
 8000212:	4619      	mov	r1, r3
 8000214:	480b      	ldr	r0, [pc, #44]	; (8000244 <_handle_pressed_buttons+0x64>)
 8000216:	f007 f9b7 	bl	8007588 <iprintf>
 800021a:	e004      	b.n	8000226 <_handle_pressed_buttons+0x46>
			}
			else //button release
			{
				DEBUG_BUTTONS_PRINT("button %u released\n", iter_button);
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	4619      	mov	r1, r3
 8000220:	4809      	ldr	r0, [pc, #36]	; (8000248 <_handle_pressed_buttons+0x68>)
 8000222:	f007 f9b1 	bl	8007588 <iprintf>
	for(BUTTON_ID iter_button = BUTTON_MIN; iter_button <= BUTTON_MAX; iter_button <<= 1)
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	005b      	lsls	r3, r3, #1
 800022a:	71fb      	strb	r3, [r7, #7]
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	2b10      	cmp	r3, #16
 8000230:	d9dc      	bls.n	80001ec <_handle_pressed_buttons+0xc>
			}
		}
	}
}
 8000232:	bf00      	nop
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	20000091 	.word	0x20000091
 8000240:	20000090 	.word	0x20000090
 8000244:	080084d8 	.word	0x080084d8
 8000248:	080084ec 	.word	0x080084ec

0800024c <buttons_task>:

void buttons_task(void *argument)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
	while(1)
	{
	  DEBUG_PRINT_MAIN("B\n");
 8000254:	480c      	ldr	r0, [pc, #48]	; (8000288 <buttons_task+0x3c>)
 8000256:	f007 fa1f 	bl	8007698 <puts>
		_cur_press_state = _get_press_state();
 800025a:	f7ff ff79 	bl	8000150 <_get_press_state>
 800025e:	4603      	mov	r3, r0
 8000260:	461a      	mov	r2, r3
 8000262:	4b0a      	ldr	r3, [pc, #40]	; (800028c <buttons_task+0x40>)
 8000264:	701a      	strb	r2, [r3, #0]

		if(_cur_press_state != _prev_press_state)
 8000266:	4b09      	ldr	r3, [pc, #36]	; (800028c <buttons_task+0x40>)
 8000268:	781a      	ldrb	r2, [r3, #0]
 800026a:	4b09      	ldr	r3, [pc, #36]	; (8000290 <buttons_task+0x44>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	429a      	cmp	r2, r3
 8000270:	d005      	beq.n	800027e <buttons_task+0x32>
		{
			_handle_pressed_buttons();
 8000272:	f7ff ffb5 	bl	80001e0 <_handle_pressed_buttons>
			_prev_press_state = _cur_press_state;
 8000276:	4b05      	ldr	r3, [pc, #20]	; (800028c <buttons_task+0x40>)
 8000278:	781a      	ldrb	r2, [r3, #0]
 800027a:	4b05      	ldr	r3, [pc, #20]	; (8000290 <buttons_task+0x44>)
 800027c:	701a      	strb	r2, [r3, #0]
		}
		osDelay(1000);
 800027e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000282:	f003 ffdf 	bl	8004244 <osDelay>
	  DEBUG_PRINT_MAIN("B\n");
 8000286:	e7e5      	b.n	8000254 <buttons_task+0x8>
 8000288:	08008500 	.word	0x08008500
 800028c:	20000091 	.word	0x20000091
 8000290:	20000090 	.word	0x20000090

08000294 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800029c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002a0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80002a4:	f003 0301 	and.w	r3, r3, #1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d013      	beq.n	80002d4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002b0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80002b4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d00b      	beq.n	80002d4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002bc:	e000      	b.n	80002c0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80002be:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d0f9      	beq.n	80002be <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002ca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002ce:	687a      	ldr	r2, [r7, #4]
 80002d0:	b2d2      	uxtb	r2, r2
 80002d2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002d4:	687b      	ldr	r3, [r7, #4]
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr

080002e0 <_write>:


#if DEBUG_SVO

int _write ( int file, char *ptr, int len )
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b086      	sub	sp, #24
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	60f8      	str	r0, [r7, #12]
 80002e8:	60b9      	str	r1, [r7, #8]
 80002ea:	607a      	str	r2, [r7, #4]
  int i = 0;
 80002ec:	2300      	movs	r3, #0
 80002ee:	617b      	str	r3, [r7, #20]
  for ( i = 0; i < len; i++ )
 80002f0:	2300      	movs	r3, #0
 80002f2:	617b      	str	r3, [r7, #20]
 80002f4:	e009      	b.n	800030a <_write+0x2a>
    ITM_SendChar ( *ptr++ );
 80002f6:	68bb      	ldr	r3, [r7, #8]
 80002f8:	1c5a      	adds	r2, r3, #1
 80002fa:	60ba      	str	r2, [r7, #8]
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	4618      	mov	r0, r3
 8000300:	f7ff ffc8 	bl	8000294 <ITM_SendChar>
  for ( i = 0; i < len; i++ )
 8000304:	697b      	ldr	r3, [r7, #20]
 8000306:	3301      	adds	r3, #1
 8000308:	617b      	str	r3, [r7, #20]
 800030a:	697a      	ldr	r2, [r7, #20]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	429a      	cmp	r2, r3
 8000310:	dbf1      	blt.n	80002f6 <_write+0x16>
  return len;
 8000312:	687b      	ldr	r3, [r7, #4]
}
 8000314:	4618      	mov	r0, r3
 8000316:	3718      	adds	r7, #24
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <HAL_GPIO_EXTI_Callback>:

#include "irq.h"


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8000326:	88fb      	ldrh	r3, [r7, #6]
 8000328:	2b20      	cmp	r3, #32
 800032a:	d00d      	beq.n	8000348 <HAL_GPIO_EXTI_Callback+0x2c>
 800032c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000330:	d000      	beq.n	8000334 <HAL_GPIO_EXTI_Callback+0x18>
			break;
		case BUTTON_DOWN_Pin:

			break;
		default:
			break;
 8000332:	e00c      	b.n	800034e <HAL_GPIO_EXTI_Callback+0x32>
		  if(buttonSemHandle != NULL)
 8000334:	4b08      	ldr	r3, [pc, #32]	; (8000358 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d007      	beq.n	800034c <HAL_GPIO_EXTI_Callback+0x30>
        osSemaphoreRelease(buttonSemHandle);
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <HAL_GPIO_EXTI_Callback+0x3c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4618      	mov	r0, r3
 8000342:	f004 f8b1 	bl	80044a8 <osSemaphoreRelease>
			break;
 8000346:	e001      	b.n	800034c <HAL_GPIO_EXTI_Callback+0x30>
			break;
 8000348:	bf00      	nop
 800034a:	e000      	b.n	800034e <HAL_GPIO_EXTI_Callback+0x32>
			break;
 800034c:	bf00      	nop
	}
}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20001ae4 	.word	0x20001ae4

0800035c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000360:	f001 f976 	bl	8001650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000364:	f000 f860 	bl	8000428 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  DEBUG_PRINT_MAIN("hi!\n");
 8000368:	4822      	ldr	r0, [pc, #136]	; (80003f4 <main+0x98>)
 800036a:	f007 f995 	bl	8007698 <puts>
  DEBUG_PRINT_MAIN("te\n");
 800036e:	4822      	ldr	r0, [pc, #136]	; (80003f8 <main+0x9c>)
 8000370:	f007 f992 	bl	8007698 <puts>
  /* USER CODE END SysInit */


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000374:	f000 fa32 	bl	80007dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000378:	f000 fa12 	bl	80007a0 <MX_DMA_Init>
  MX_ADC1_Init();
 800037c:	f000 f8b4 	bl	80004e8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000380:	f000 f8f0 	bl	8000564 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000384:	f000 f91c 	bl	80005c0 <MX_I2C2_Init>
  //MX_RTC_Init();
  MX_SPI1_Init();
 8000388:	f000 f948 	bl	800061c <MX_SPI1_Init>
  MX_SPI2_Init();
 800038c:	f000 f97c 	bl	8000688 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000390:	f000 f9b2 	bl	80006f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000394:	f000 f9da 	bl	800074c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RTC_Init();
 8000398:	f000 fb68 	bl	8000a6c <RTC_Init>
  si4432_reset();
 800039c:	f000 fc6a 	bl	8000c74 <si4432_reset>
  si4432_init_RX_AN415();
 80003a0:	f000 fd1c 	bl	8000ddc <si4432_init_RX_AN415>
  DEBUG_PRINT_MAIN("time22\n");
 80003a4:	4815      	ldr	r0, [pc, #84]	; (80003fc <main+0xa0>)
 80003a6:	f007 f977 	bl	8007698 <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80003aa:	f003 fe3b 	bl	8004024 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of buttonSem */
  buttonSemHandle = osSemaphoreNew(10, 0, &buttonSem_attributes);
 80003ae:	4a14      	ldr	r2, [pc, #80]	; (8000400 <main+0xa4>)
 80003b0:	2100      	movs	r1, #0
 80003b2:	200a      	movs	r0, #10
 80003b4:	f003 ff74 	bl	80042a0 <osSemaphoreNew>
 80003b8:	4602      	mov	r2, r0
 80003ba:	4b12      	ldr	r3, [pc, #72]	; (8000404 <main+0xa8>)
 80003bc:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80003be:	4a12      	ldr	r2, [pc, #72]	; (8000408 <main+0xac>)
 80003c0:	2100      	movs	r1, #0
 80003c2:	4812      	ldr	r0, [pc, #72]	; (800040c <main+0xb0>)
 80003c4:	f003 fe94 	bl	80040f0 <osThreadNew>
 80003c8:	4602      	mov	r2, r0
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <main+0xb4>)
 80003cc:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  //testThreadHandle = osThreadNew(StartTestTask, NULL, &testThread_attributes);
  radioThreadHandle = osThreadNew(radio_task, NULL, &radioThread_attributes);
 80003ce:	4a11      	ldr	r2, [pc, #68]	; (8000414 <main+0xb8>)
 80003d0:	2100      	movs	r1, #0
 80003d2:	4811      	ldr	r0, [pc, #68]	; (8000418 <main+0xbc>)
 80003d4:	f003 fe8c 	bl	80040f0 <osThreadNew>
 80003d8:	4602      	mov	r2, r0
 80003da:	4b10      	ldr	r3, [pc, #64]	; (800041c <main+0xc0>)
 80003dc:	601a      	str	r2, [r3, #0]
  buttonsThreadHandle = osThreadNew(buttons_task, NULL, &radioThread_attributes);
 80003de:	4a0d      	ldr	r2, [pc, #52]	; (8000414 <main+0xb8>)
 80003e0:	2100      	movs	r1, #0
 80003e2:	480f      	ldr	r0, [pc, #60]	; (8000420 <main+0xc4>)
 80003e4:	f003 fe84 	bl	80040f0 <osThreadNew>
 80003e8:	4602      	mov	r2, r0
 80003ea:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <main+0xc8>)
 80003ec:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80003ee:	f003 fe4b 	bl	8004088 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003f2:	e7fe      	b.n	80003f2 <main+0x96>
 80003f4:	08008554 	.word	0x08008554
 80003f8:	08008558 	.word	0x08008558
 80003fc:	0800855c 	.word	0x0800855c
 8000400:	08008618 	.word	0x08008618
 8000404:	20001ae4 	.word	0x20001ae4
 8000408:	080085f4 	.word	0x080085f4
 800040c:	0800097d 	.word	0x0800097d
 8000410:	200019a8 	.word	0x200019a8
 8000414:	08008628 	.word	0x08008628
 8000418:	080009c9 	.word	0x080009c9
 800041c:	20001b40 	.word	0x20001b40
 8000420:	0800024d 	.word	0x0800024d
 8000424:	20001b3c 	.word	0x20001b3c

08000428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b094      	sub	sp, #80	; 0x50
 800042c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000432:	2228      	movs	r2, #40	; 0x28
 8000434:	2100      	movs	r1, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f007 f89d 	bl	8007576 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800043c:	f107 0314 	add.w	r3, r7, #20
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
 8000446:	609a      	str	r2, [r3, #8]
 8000448:	60da      	str	r2, [r3, #12]
 800044a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000458:	2305      	movs	r3, #5
 800045a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800045c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000460:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000462:	2300      	movs	r3, #0
 8000464:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000466:	2301      	movs	r3, #1
 8000468:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800046a:	2301      	movs	r3, #1
 800046c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046e:	2302      	movs	r3, #2
 8000470:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000472:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000476:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000478:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800047c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000482:	4618      	mov	r0, r3
 8000484:	f002 f83a 	bl	80024fc <HAL_RCC_OscConfig>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800048e:	f000 fa95 	bl	80009bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000492:	230f      	movs	r3, #15
 8000494:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000496:	2302      	movs	r3, #2
 8000498:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800049a:	2300      	movs	r3, #0
 800049c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800049e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a4:	2300      	movs	r3, #0
 80004a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004a8:	f107 0314 	add.w	r3, r7, #20
 80004ac:	2102      	movs	r1, #2
 80004ae:	4618      	mov	r0, r3
 80004b0:	f002 faa4 	bl	80029fc <HAL_RCC_ClockConfig>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004ba:	f000 fa7f 	bl	80009bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80004be:	2303      	movs	r3, #3
 80004c0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80004c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004c6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80004c8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80004cc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	4618      	mov	r0, r3
 80004d2:	f002 fc5f 	bl	8002d94 <HAL_RCCEx_PeriphCLKConfig>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80004dc:	f000 fa6e 	bl	80009bc <Error_Handler>
  }
}
 80004e0:	bf00      	nop
 80004e2:	3750      	adds	r7, #80	; 0x50
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <MX_ADC1_Init+0x74>)
 80004fa:	4a19      	ldr	r2, [pc, #100]	; (8000560 <MX_ADC1_Init+0x78>)
 80004fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004fe:	4b17      	ldr	r3, [pc, #92]	; (800055c <MX_ADC1_Init+0x74>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000504:	4b15      	ldr	r3, [pc, #84]	; (800055c <MX_ADC1_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <MX_ADC1_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <MX_ADC1_Init+0x74>)
 8000512:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000516:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000518:	4b10      	ldr	r3, [pc, #64]	; (800055c <MX_ADC1_Init+0x74>)
 800051a:	2200      	movs	r2, #0
 800051c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <MX_ADC1_Init+0x74>)
 8000520:	2201      	movs	r2, #1
 8000522:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <MX_ADC1_Init+0x74>)
 8000526:	f001 f8c5 	bl	80016b4 <HAL_ADC_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000530:	f000 fa44 	bl	80009bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000538:	2301      	movs	r3, #1
 800053a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	4619      	mov	r1, r3
 8000544:	4805      	ldr	r0, [pc, #20]	; (800055c <MX_ADC1_Init+0x74>)
 8000546:	f001 f98d 	bl	8001864 <HAL_ADC_ConfigChannel>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000550:	f000 fa34 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000554:	bf00      	nop
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20001ab4 	.word	0x20001ab4
 8000560:	40012400 	.word	0x40012400

08000564 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <MX_I2C1_Init+0x50>)
 800056a:	4a13      	ldr	r2, [pc, #76]	; (80005b8 <MX_I2C1_Init+0x54>)
 800056c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800056e:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <MX_I2C1_Init+0x50>)
 8000570:	4a12      	ldr	r2, [pc, #72]	; (80005bc <MX_I2C1_Init+0x58>)
 8000572:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000574:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <MX_I2C1_Init+0x50>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <MX_I2C1_Init+0x50>)
 800057c:	2200      	movs	r2, #0
 800057e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000580:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <MX_I2C1_Init+0x50>)
 8000582:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000586:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <MX_I2C1_Init+0x50>)
 800058a:	2200      	movs	r2, #0
 800058c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <MX_I2C1_Init+0x50>)
 8000590:	2200      	movs	r2, #0
 8000592:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000594:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <MX_I2C1_Init+0x50>)
 8000596:	2200      	movs	r2, #0
 8000598:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <MX_I2C1_Init+0x50>)
 800059c:	2200      	movs	r2, #0
 800059e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005a0:	4804      	ldr	r0, [pc, #16]	; (80005b4 <MX_I2C1_Init+0x50>)
 80005a2:	f001 fe73 	bl	800228c <HAL_I2C_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005ac:	f000 fa06 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20001a04 	.word	0x20001a04
 80005b8:	40005400 	.word	0x40005400
 80005bc:	000186a0 	.word	0x000186a0

080005c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <MX_I2C2_Init+0x50>)
 80005c6:	4a13      	ldr	r2, [pc, #76]	; (8000614 <MX_I2C2_Init+0x54>)
 80005c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <MX_I2C2_Init+0x50>)
 80005cc:	4a12      	ldr	r2, [pc, #72]	; (8000618 <MX_I2C2_Init+0x58>)
 80005ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <MX_I2C2_Init+0x50>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_I2C2_Init+0x50>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <MX_I2C2_Init+0x50>)
 80005de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005e2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <MX_I2C2_Init+0x50>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_I2C2_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <MX_I2C2_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_I2C2_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <MX_I2C2_Init+0x50>)
 80005fe:	f001 fe45 	bl	800228c <HAL_I2C_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000608:	f000 f9d8 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20001a58 	.word	0x20001a58
 8000614:	40005800 	.word	0x40005800
 8000618:	000186a0 	.word	0x000186a0

0800061c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000620:	4b17      	ldr	r3, [pc, #92]	; (8000680 <MX_SPI1_Init+0x64>)
 8000622:	4a18      	ldr	r2, [pc, #96]	; (8000684 <MX_SPI1_Init+0x68>)
 8000624:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000626:	4b16      	ldr	r3, [pc, #88]	; (8000680 <MX_SPI1_Init+0x64>)
 8000628:	f44f 7282 	mov.w	r2, #260	; 0x104
 800062c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800062e:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_SPI1_Init+0x64>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_SPI1_Init+0x64>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_SPI1_Init+0x64>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_SPI1_Init+0x64>)
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_SPI1_Init+0x64>)
 8000648:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800064c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_SPI1_Init+0x64>)
 8000650:	2228      	movs	r2, #40	; 0x28
 8000652:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <MX_SPI1_Init+0x64>)
 8000656:	2200      	movs	r2, #0
 8000658:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_SPI1_Init+0x64>)
 800065c:	2200      	movs	r2, #0
 800065e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <MX_SPI1_Init+0x64>)
 8000662:	2200      	movs	r2, #0
 8000664:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_SPI1_Init+0x64>)
 8000668:	220a      	movs	r2, #10
 800066a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_SPI1_Init+0x64>)
 800066e:	f002 fc47 	bl	8002f00 <HAL_SPI_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000678:	f000 f9a0 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20001b44 	.word	0x20001b44
 8000684:	40013000 	.word	0x40013000

08000688 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_SPI2_Init+0x68>)
 800068e:	4a19      	ldr	r2, [pc, #100]	; (80006f4 <MX_SPI2_Init+0x6c>)
 8000690:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_SPI2_Init+0x68>)
 8000694:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000698:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_SPI2_Init+0x68>)
 800069c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006a0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_SPI2_Init+0x68>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_SPI2_Init+0x68>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_SPI2_Init+0x68>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_SPI2_Init+0x68>)
 80006b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80006ba:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_SPI2_Init+0x68>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_SPI2_Init+0x68>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_SPI2_Init+0x68>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_SPI2_Init+0x68>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_SPI2_Init+0x68>)
 80006d6:	220a      	movs	r2, #10
 80006d8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_SPI2_Init+0x68>)
 80006dc:	f002 fc10 	bl	8002f00 <HAL_SPI_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80006e6:	f000 f969 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200019ac 	.word	0x200019ac
 80006f4:	40003800 	.word	0x40003800

080006f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 80006fe:	4a12      	ldr	r2, [pc, #72]	; (8000748 <MX_USART1_UART_Init+0x50>)
 8000700:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 8000730:	f003 fb9c 	bl	8003e6c <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800073a:	f000 f93f 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20001ae8 	.word	0x20001ae8
 8000748:	40013800 	.word	0x40013800

0800074c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <MX_USART2_UART_Init+0x50>)
 8000754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800075c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000784:	f003 fb72 	bl	8003e6c <HAL_UART_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800078e:	f000 f915 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20001b9c 	.word	0x20001b9c
 800079c:	40004400 	.word	0x40004400

080007a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_DMA_Init+0x38>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <MX_DMA_Init+0x38>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6153      	str	r3, [r2, #20]
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_DMA_Init+0x38>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 5);
 80007be:	2205      	movs	r2, #5
 80007c0:	2105      	movs	r1, #5
 80007c2:	200d      	movs	r0, #13
 80007c4:	f001 fa35 	bl	8001c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80007c8:	200d      	movs	r0, #13
 80007ca:	f001 fa4e 	bl	8001c6a <HAL_NVIC_EnableIRQ>

}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f0:	4b5d      	ldr	r3, [pc, #372]	; (8000968 <MX_GPIO_Init+0x18c>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a5c      	ldr	r2, [pc, #368]	; (8000968 <MX_GPIO_Init+0x18c>)
 80007f6:	f043 0310 	orr.w	r3, r3, #16
 80007fa:	6193      	str	r3, [r2, #24]
 80007fc:	4b5a      	ldr	r3, [pc, #360]	; (8000968 <MX_GPIO_Init+0x18c>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f003 0310 	and.w	r3, r3, #16
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000808:	4b57      	ldr	r3, [pc, #348]	; (8000968 <MX_GPIO_Init+0x18c>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a56      	ldr	r2, [pc, #344]	; (8000968 <MX_GPIO_Init+0x18c>)
 800080e:	f043 0320 	orr.w	r3, r3, #32
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b54      	ldr	r3, [pc, #336]	; (8000968 <MX_GPIO_Init+0x18c>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f003 0320 	and.w	r3, r3, #32
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000820:	4b51      	ldr	r3, [pc, #324]	; (8000968 <MX_GPIO_Init+0x18c>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a50      	ldr	r2, [pc, #320]	; (8000968 <MX_GPIO_Init+0x18c>)
 8000826:	f043 0304 	orr.w	r3, r3, #4
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b4e      	ldr	r3, [pc, #312]	; (8000968 <MX_GPIO_Init+0x18c>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f003 0304 	and.w	r3, r3, #4
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000838:	4b4b      	ldr	r3, [pc, #300]	; (8000968 <MX_GPIO_Init+0x18c>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a4a      	ldr	r2, [pc, #296]	; (8000968 <MX_GPIO_Init+0x18c>)
 800083e:	f043 0308 	orr.w	r3, r3, #8
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b48      	ldr	r3, [pc, #288]	; (8000968 <MX_GPIO_Init+0x18c>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0308 	and.w	r3, r3, #8
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_PIN_GPIO_Port, TEST_PIN_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000856:	4845      	ldr	r0, [pc, #276]	; (800096c <MX_GPIO_Init+0x190>)
 8000858:	f001 fce7 	bl	800222a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2101      	movs	r1, #1
 8000860:	4843      	ldr	r0, [pc, #268]	; (8000970 <MX_GPIO_Init+0x194>)
 8000862:	f001 fce2 	bl	800222a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_POWER_KEY_GPIO_Port, RADIO_POWER_KEY_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 7180 	mov.w	r1, #256	; 0x100
 800086c:	4841      	ldr	r0, [pc, #260]	; (8000974 <MX_GPIO_Init+0x198>)
 800086e:	f001 fcdc 	bl	800222a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_PIN_Pin */
  GPIO_InitStruct.Pin = TEST_PIN_Pin;
 8000872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2302      	movs	r3, #2
 8000882:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_PIN_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	4619      	mov	r1, r3
 800088a:	4838      	ldr	r0, [pc, #224]	; (800096c <MX_GPIO_Init+0x190>)
 800088c:	f001 fb5c 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000890:	2301      	movs	r3, #1
 8000892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2302      	movs	r3, #2
 800089e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 0310 	add.w	r3, r7, #16
 80008a4:	4619      	mov	r1, r3
 80008a6:	4832      	ldr	r0, [pc, #200]	; (8000970 <MX_GPIO_Init+0x194>)
 80008a8:	f001 fb4e 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : BME_POWER_KEY_Pin */
  GPIO_InitStruct.Pin = BME_POWER_KEY_Pin;
 80008ac:	2302      	movs	r3, #2
 80008ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BME_POWER_KEY_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	4619      	mov	r1, r3
 80008be:	482c      	ldr	r0, [pc, #176]	; (8000970 <MX_GPIO_Init+0x194>)
 80008c0:	f001 fb42 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80008c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ca:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <MX_GPIO_Init+0x19c>)
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	4619      	mov	r1, r3
 80008d8:	4825      	ldr	r0, [pc, #148]	; (8000970 <MX_GPIO_Init+0x194>)
 80008da:	f001 fb35 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : RADIO_POWER_KEY_Pin */
  GPIO_InitStruct.Pin = RADIO_POWER_KEY_Pin;
 80008de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RADIO_POWER_KEY_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	4619      	mov	r1, r3
 80008f6:	481f      	ldr	r0, [pc, #124]	; (8000974 <MX_GPIO_Init+0x198>)
 80008f8:	f001 fb26 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_ENTER_Pin */
  GPIO_InitStruct.Pin = BUTTON_ENTER_Pin;
 80008fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000900:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_GPIO_Init+0x19c>)
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000906:	2301      	movs	r3, #1
 8000908:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_ENTER_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	4619      	mov	r1, r3
 8000910:	4818      	ldr	r0, [pc, #96]	; (8000974 <MX_GPIO_Init+0x198>)
 8000912:	f001 fb19 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_UP_Pin BUTTON_DOWN_Pin BUTTON_LEFT_Pin BUTTON_RIGHT_Pin */
  GPIO_InitStruct.Pin = BUTTON_UP_Pin|BUTTON_DOWN_Pin|BUTTON_LEFT_Pin|BUTTON_RIGHT_Pin;
 8000916:	f44f 734c 	mov.w	r3, #816	; 0x330
 800091a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_GPIO_Init+0x19c>)
 800091e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000920:	2301      	movs	r3, #1
 8000922:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	4619      	mov	r1, r3
 800092a:	4811      	ldr	r0, [pc, #68]	; (8000970 <MX_GPIO_Init+0x194>)
 800092c:	f001 fb0c 	bl	8001f48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 5);
 8000930:	2205      	movs	r2, #5
 8000932:	2105      	movs	r1, #5
 8000934:	200a      	movs	r0, #10
 8000936:	f001 f97c 	bl	8001c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800093a:	200a      	movs	r0, #10
 800093c:	f001 f995 	bl	8001c6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 5);
 8000940:	2205      	movs	r2, #5
 8000942:	2105      	movs	r1, #5
 8000944:	2017      	movs	r0, #23
 8000946:	f001 f974 	bl	8001c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800094a:	2017      	movs	r0, #23
 800094c:	f001 f98d 	bl	8001c6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 5);
 8000950:	2205      	movs	r2, #5
 8000952:	2105      	movs	r1, #5
 8000954:	2028      	movs	r0, #40	; 0x28
 8000956:	f001 f96c 	bl	8001c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800095a:	2028      	movs	r0, #40	; 0x28
 800095c:	f001 f985 	bl	8001c6a <HAL_NVIC_EnableIRQ>

}
 8000960:	bf00      	nop
 8000962:	3720      	adds	r7, #32
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40021000 	.word	0x40021000
 800096c:	40011000 	.word	0x40011000
 8000970:	40010c00 	.word	0x40010c00
 8000974:	40010800 	.word	0x40010800
 8000978:	10210000 	.word	0x10210000

0800097c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    DEBUG_PRINT_MAIN("D\n");
 8000984:	4803      	ldr	r0, [pc, #12]	; (8000994 <StartDefaultTask+0x18>)
 8000986:	f006 fe87 	bl	8007698 <puts>
    osDelay(1000);
 800098a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800098e:	f003 fc59 	bl	8004244 <osDelay>
    DEBUG_PRINT_MAIN("D\n");
 8000992:	e7f7      	b.n	8000984 <StartDefaultTask+0x8>
 8000994:	08008568 	.word	0x08008568

08000998 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d101      	bne.n	80009ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009aa:	f000 fe67 	bl	800167c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40012c00 	.word	0x40012c00

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr

080009c8 <radio_task>:
#include "radio.h"
#include "si4432.h"


void radio_task(void *argument)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	uint8_t buf[16];
	uint8_t len = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	74fb      	strb	r3, [r7, #19]
	for(;;)
	{
		DEBUG_PRINT_MAIN("R\n");
 80009d4:	4820      	ldr	r0, [pc, #128]	; (8000a58 <radio_task+0x90>)
 80009d6:	f006 fe5f 	bl	8007698 <puts>
		volatile uint32_t count = osSemaphoreGetCount (buttonSemHandle);
 80009da:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <radio_task+0x94>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4618      	mov	r0, r3
 80009e0:	f003 fdba 	bl	8004558 <osSemaphoreGetCount>
 80009e4:	4603      	mov	r3, r0
 80009e6:	60fb      	str	r3, [r7, #12]
    DEBUG_PRINT_MAIN("RC = %u\n", count);
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	4619      	mov	r1, r3
 80009ec:	481c      	ldr	r0, [pc, #112]	; (8000a60 <radio_task+0x98>)
 80009ee:	f006 fdcb 	bl	8007588 <iprintf>

		if(osSemaphoreAcquire(buttonSemHandle, 100) == osOK)
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <radio_task+0x94>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2164      	movs	r1, #100	; 0x64
 80009f8:	4618      	mov	r0, r3
 80009fa:	f003 fcef 	bl	80043dc <osSemaphoreAcquire>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d124      	bne.n	8000a4e <radio_task+0x86>
		{
			if(si4432_receive_AN415(buf, &len))
 8000a04:	f107 0213 	add.w	r2, r7, #19
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 fa3a 	bl	8000e88 <si4432_receive_AN415>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d019      	beq.n	8000a4e <radio_task+0x86>
			{
				DEBUG_PRINT_MAIN("PL = %u\n", len);
 8000a1a:	7cfb      	ldrb	r3, [r7, #19]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4811      	ldr	r0, [pc, #68]	; (8000a64 <radio_task+0x9c>)
 8000a20:	f006 fdb2 	bl	8007588 <iprintf>
				for(int i = 0; i < sizeof(buf); i++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
 8000a28:	e00b      	b.n	8000a42 <radio_task+0x7a>
				{
					DEBUG_PRINT_MAIN("0x%x ", buf[i]);
 8000a2a:	f107 0214 	add.w	r2, r7, #20
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a30:	4413      	add	r3, r2
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	480c      	ldr	r0, [pc, #48]	; (8000a68 <radio_task+0xa0>)
 8000a38:	f006 fda6 	bl	8007588 <iprintf>
				for(int i = 0; i < sizeof(buf); i++)
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3e:	3301      	adds	r3, #1
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
 8000a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a44:	2b0f      	cmp	r3, #15
 8000a46:	d9f0      	bls.n	8000a2a <radio_task+0x62>
				}
				DEBUG_PRINT_MAIN("\n");
 8000a48:	200a      	movs	r0, #10
 8000a4a:	f006 fdb5 	bl	80075b8 <putchar>
			}
		}
		osDelay(1000);
 8000a4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a52:	f003 fbf7 	bl	8004244 <osDelay>
	{
 8000a56:	e7bd      	b.n	80009d4 <radio_task+0xc>
 8000a58:	0800856c 	.word	0x0800856c
 8000a5c:	20001ae4 	.word	0x20001ae4
 8000a60:	08008570 	.word	0x08008570
 8000a64:	0800857c 	.word	0x0800857c
 8000a68:	08008588 	.word	0x08008588

08000a6c <RTC_Init>:

#define RTC_TIMEOUT 1000u
#define LSE_FREQ 	32768

uint32_t RTC_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
    uint32_t prescaler = 0U;
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]

    RCC->APB1ENR |= RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN;
 8000a76:	4b45      	ldr	r3, [pc, #276]	; (8000b8c <RTC_Init+0x120>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	4a44      	ldr	r2, [pc, #272]	; (8000b8c <RTC_Init+0x120>)
 8000a7c:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 8000a80:	61d3      	str	r3, [r2, #28]
    PWR->CR |=  PWR_CR_DBP;
 8000a82:	4b43      	ldr	r3, [pc, #268]	; (8000b90 <RTC_Init+0x124>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a42      	ldr	r2, [pc, #264]	; (8000b90 <RTC_Init+0x124>)
 8000a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a8c:	6013      	str	r3, [r2, #0]

    /* Waiting for synchro */
    RTC->CRL &= ~RTC_CRL_RSF;
 8000a8e:	4b41      	ldr	r3, [pc, #260]	; (8000b94 <RTC_Init+0x128>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	4a40      	ldr	r2, [pc, #256]	; (8000b94 <RTC_Init+0x128>)
 8000a94:	f023 0308 	bic.w	r3, r3, #8
 8000a98:	6053      	str	r3, [r2, #4]


    uint32_t tickstart = 0U;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	603b      	str	r3, [r7, #0]


    tickstart = HAL_GetTick();
 8000a9e:	f000 fdff 	bl	80016a0 <HAL_GetTick>
 8000aa2:	6038      	str	r0, [r7, #0]

    /* Wait the registers to be synchronised */
    while ((RTC->CRL & RTC_CRL_RSF) == 0u)
 8000aa4:	e009      	b.n	8000aba <RTC_Init+0x4e>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT)
 8000aa6:	f000 fdfb 	bl	80016a0 <HAL_GetTick>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ab4:	d901      	bls.n	8000aba <RTC_Init+0x4e>
      {
        return 2;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	e063      	b.n	8000b82 <RTC_Init+0x116>
    while ((RTC->CRL & RTC_CRL_RSF) == 0u)
 8000aba:	4b36      	ldr	r3, [pc, #216]	; (8000b94 <RTC_Init+0x128>)
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d0ef      	beq.n	8000aa6 <RTC_Init+0x3a>
      }
    }


    if(BKP->DR1 == RCT_MAGIC_WORD)
 8000ac6:	4b34      	ldr	r3, [pc, #208]	; (8000b98 <RTC_Init+0x12c>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f64d 62ad 	movw	r2, #57005	; 0xdead
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d101      	bne.n	8000ad6 <RTC_Init+0x6a>
    {
      return 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e055      	b.n	8000b82 <RTC_Init+0x116>
    }


    tickstart = HAL_GetTick();
 8000ad6:	f000 fde3 	bl	80016a0 <HAL_GetTick>
 8000ada:	6038      	str	r0, [r7, #0]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((RTC->CRL & RTC_CRL_RTOFF) == 0u)
 8000adc:	e009      	b.n	8000af2 <RTC_Init+0x86>
    {
        if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT)
 8000ade:	f000 fddf 	bl	80016a0 <HAL_GetTick>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000aec:	d901      	bls.n	8000af2 <RTC_Init+0x86>
        {
            return 2;
 8000aee:	2302      	movs	r3, #2
 8000af0:	e047      	b.n	8000b82 <RTC_Init+0x116>
    while ((RTC->CRL & RTC_CRL_RTOFF) == 0u)
 8000af2:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <RTC_Init+0x128>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f003 0320 	and.w	r3, r3, #32
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d0ef      	beq.n	8000ade <RTC_Init+0x72>
        }
    }


    /* Disable the write protection for RTC registers */
    RTC->CRL |= RTC_CRL_CNF;
 8000afe:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <RTC_Init+0x128>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	4a24      	ldr	r2, [pc, #144]	; (8000b94 <RTC_Init+0x128>)
 8000b04:	f043 0310 	orr.w	r3, r3, #16
 8000b08:	6053      	str	r3, [r2, #4]

    /* Set Initialization mode */


    /* Clear Flags Bits */
    RTC->CRL &= ~(RTC_CRL_OWF | RTC_CRL_ALRF | RTC_CRL_SECF);
 8000b0a:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <RTC_Init+0x128>)
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	4a21      	ldr	r2, [pc, #132]	; (8000b94 <RTC_Init+0x128>)
 8000b10:	f023 0307 	bic.w	r3, r3, #7
 8000b14:	6053      	str	r3, [r2, #4]

    prescaler = LSE_FREQ - 1U;
 8000b16:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000b1a:	607b      	str	r3, [r7, #4]

    /* Configure the RTC_PRLH / RTC_PRLL */
    RTC->PRLH |= (prescaler >> 16U);
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <RTC_Init+0x128>)
 8000b1e:	689a      	ldr	r2, [r3, #8]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	0c1b      	lsrs	r3, r3, #16
 8000b24:	491b      	ldr	r1, [pc, #108]	; (8000b94 <RTC_Init+0x128>)
 8000b26:	4313      	orrs	r3, r2
 8000b28:	608b      	str	r3, [r1, #8]
    RTC->PRLL |= (prescaler & 0x0000ffff);
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <RTC_Init+0x128>)
 8000b2c:	68da      	ldr	r2, [r3, #12]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	4918      	ldr	r1, [pc, #96]	; (8000b94 <RTC_Init+0x128>)
 8000b34:	4313      	orrs	r3, r2
 8000b36:	60cb      	str	r3, [r1, #12]

    RTC->CNTH = 0;
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <RTC_Init+0x128>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	619a      	str	r2, [r3, #24]
    RTC->CNTL = 0;
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <RTC_Init+0x128>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	61da      	str	r2, [r3, #28]

    BKP->DR1 = RCT_MAGIC_WORD;
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <RTC_Init+0x12c>)
 8000b46:	f64d 62ad 	movw	r2, #57005	; 0xdead
 8000b4a:	605a      	str	r2, [r3, #4]

    /* Wait for synchro */
    RTC->CRL &= ~(1 << RTC_CRL_CNF);
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <RTC_Init+0x128>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <RTC_Init+0x128>)
 8000b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b56:	6053      	str	r3, [r2, #4]
    tickstart = HAL_GetTick();
 8000b58:	f000 fda2 	bl	80016a0 <HAL_GetTick>
 8000b5c:	6038      	str	r0, [r7, #0]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((RTC->CRL & RTC_CRL_RTOFF) == 0u)
 8000b5e:	e009      	b.n	8000b74 <RTC_Init+0x108>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT)
 8000b60:	f000 fd9e 	bl	80016a0 <HAL_GetTick>
 8000b64:	4602      	mov	r2, r0
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b6e:	d901      	bls.n	8000b74 <RTC_Init+0x108>
      {
         return 2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	e006      	b.n	8000b82 <RTC_Init+0x116>
    while ((RTC->CRL & RTC_CRL_RTOFF) == 0u)
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <RTC_Init+0x128>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 0320 	and.w	r3, r3, #32
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d0ef      	beq.n	8000b60 <RTC_Init+0xf4>
    }




    return 0;
 8000b80:	2300      	movs	r3, #0

}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40007000 	.word	0x40007000
 8000b94:	40002800 	.word	0x40002800
 8000b98:	40006c00 	.word	0x40006c00

08000b9c <si4432_select_spi>:
volatile uint8_t Status1 = 0;
volatile uint8_t Status2 = 0;
uint8_t PL_Length = 0;

void si4432_select_spi(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SELPORT, SELPIN, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <si4432_select_spi+0x14>)
 8000ba6:	f001 fb40 	bl	800222a <HAL_GPIO_WritePin>
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40010c00 	.word	0x40010c00

08000bb4 <si4432_release_spi>:

void si4432_release_spi(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SELPORT, SELPIN, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2101      	movs	r1, #1
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <si4432_release_spi+0x14>)
 8000bbe:	f001 fb34 	bl	800222a <HAL_GPIO_WritePin>
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40010c00 	.word	0x40010c00

08000bcc <si4432_get_irq_pin>:

GPIO_PinState si4432_get_irq_pin(void){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(IRQPORT, IRQPIN);
 8000bd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <si4432_get_irq_pin+0x14>)
 8000bd6:	f001 fb11 	bl	80021fc <HAL_GPIO_ReadPin>
 8000bda:	4603      	mov	r3, r0
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40010c00 	.word	0x40010c00

08000be4 <si4432_write_register>:

void si4432_write_register(uint8_t reg, uint8_t value)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	460a      	mov	r2, r1
 8000bee:	71fb      	strb	r3, [r7, #7]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	71bb      	strb	r3, [r7, #6]
	si4432_select_spi();
 8000bf4:	f7ff ffd2 	bl	8000b9c <si4432_select_spi>

    uint8_t data[2];

    data[0] = (reg|0x80);
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	733b      	strb	r3, [r7, #12]
    data[1] = value;
 8000c02:	79bb      	ldrb	r3, [r7, #6]
 8000c04:	737b      	strb	r3, [r7, #13]

    HAL_SPI_Transmit(&hspi1, data, sizeof(data), SI4432_SPI_DEFAULT_TIMEOUT);
 8000c06:	f107 010c 	add.w	r1, r7, #12
 8000c0a:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c0e:	2202      	movs	r2, #2
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <si4432_write_register+0x40>)
 8000c12:	f002 f9f9 	bl	8003008 <HAL_SPI_Transmit>

    si4432_release_spi();
 8000c16:	f7ff ffcd 	bl	8000bb4 <si4432_release_spi>
}
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20001b44 	.word	0x20001b44

08000c28 <si4432_read_register>:

uint8_t si4432_read_register (uint8_t reg)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
    uint8_t result;
    si4432_select_spi();
 8000c32:	f7ff ffb3 	bl	8000b9c <si4432_select_spi>

    HAL_SPI_Transmit(&hspi1, &reg, sizeof(reg), SI4432_SPI_DEFAULT_TIMEOUT);
 8000c36:	1df9      	adds	r1, r7, #7
 8000c38:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4809      	ldr	r0, [pc, #36]	; (8000c64 <si4432_read_register+0x3c>)
 8000c40:	f002 f9e2 	bl	8003008 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &result, sizeof(result), SI4432_SPI_DEFAULT_TIMEOUT);
 8000c44:	f107 010f 	add.w	r1, r7, #15
 8000c48:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <si4432_read_register+0x3c>)
 8000c50:	f002 fb16 	bl	8003280 <HAL_SPI_Receive>

    si4432_release_spi();
 8000c54:	f7ff ffae 	bl	8000bb4 <si4432_release_spi>

	return result;
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20001b44 	.word	0x20001b44

08000c68 <si4432_power_on>:

void si4432_power_on(void){
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <si4432_reset>:
void si4432_power_off(void){

}

void si4432_reset(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
	uint32_t timer;
    si4432_power_on();
 8000c7a:	f7ff fff5 	bl	8000c68 <si4432_power_on>

	//Software reset
	si4432_write_register(Operating_Function_Control1, 0x80);
 8000c7e:	2180      	movs	r1, #128	; 0x80
 8000c80:	2007      	movs	r0, #7
 8000c82:	f7ff ffaf 	bl	8000be4 <si4432_write_register>

	timer = HAL_GetTick();
 8000c86:	f000 fd0b 	bl	80016a0 <HAL_GetTick>
 8000c8a:	6078      	str	r0, [r7, #4]
	while(si4432_get_irq_pin() == GPIO_PIN_SET && HAL_GetTick() - timer < SI4432_IRQ_DEFAULT_TIMEOUT );
 8000c8c:	bf00      	nop
 8000c8e:	f7ff ff9d 	bl	8000bcc <si4432_get_irq_pin>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d107      	bne.n	8000ca8 <si4432_reset+0x34>
 8000c98:	f000 fd02 	bl	80016a0 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ca6:	d3f2      	bcc.n	8000c8e <si4432_reset+0x1a>

	//read statuses
	Status1 = si4432_read_register(Interrupt_Status1);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f7ff ffbd 	bl	8000c28 <si4432_read_register>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <si4432_reset+0x58>)
 8000cb4:	701a      	strb	r2, [r3, #0]
	Status2 = si4432_read_register(Interrupt_Status2);
 8000cb6:	2004      	movs	r0, #4
 8000cb8:	f7ff ffb6 	bl	8000c28 <si4432_read_register>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <si4432_reset+0x5c>)
 8000cc2:	701a      	strb	r2, [r3, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000092 	.word	0x20000092
 8000cd0:	20000093 	.word	0x20000093

08000cd4 <si4432_init_AN415>:


void si4432_init_AN415(void){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	//Set the Center Frequency to 915 MHz
	si4432_write_register(Frequency_Band_Select, 0x75);
 8000cd8:	2175      	movs	r1, #117	; 0x75
 8000cda:	2075      	movs	r0, #117	; 0x75
 8000cdc:	f7ff ff82 	bl	8000be4 <si4432_write_register>
	si4432_write_register(Nominal_Carrier_Frequency1, 0xbb);
 8000ce0:	21bb      	movs	r1, #187	; 0xbb
 8000ce2:	2076      	movs	r0, #118	; 0x76
 8000ce4:	f7ff ff7e 	bl	8000be4 <si4432_write_register>
	si4432_write_register(Nominal_Carrier_Frequency0, 0x80);
 8000ce8:	2180      	movs	r1, #128	; 0x80
 8000cea:	2077      	movs	r0, #119	; 0x77
 8000cec:	f7ff ff7a 	bl	8000be4 <si4432_write_register>

	//Set the Desired TX data rate (9.6 kbps)
	si4432_write_register(TX_Data_Rate1, 0x4e);
 8000cf0:	214e      	movs	r1, #78	; 0x4e
 8000cf2:	206e      	movs	r0, #110	; 0x6e
 8000cf4:	f7ff ff76 	bl	8000be4 <si4432_write_register>
	si4432_write_register(TX_Data_Rate0, 0xa5);
 8000cf8:	21a5      	movs	r1, #165	; 0xa5
 8000cfa:	206f      	movs	r0, #111	; 0x6f
 8000cfc:	f7ff ff72 	bl	8000be4 <si4432_write_register>
	si4432_write_register(Modulation_Mode_Control1, 0x2c);
 8000d00:	212c      	movs	r1, #44	; 0x2c
 8000d02:	2070      	movs	r0, #112	; 0x70
 8000d04:	f7ff ff6e 	bl	8000be4 <si4432_write_register>

	//set the TX power
	si4432_write_register(TX_Power, 0x1f);
 8000d08:	211f      	movs	r1, #31
 8000d0a:	206d      	movs	r0, #109	; 0x6d
 8000d0c:	f7ff ff6a 	bl	8000be4 <si4432_write_register>

	//Set desired TX deviation (+-45 kHz)
	si4432_write_register(Frequency_Deviation, 0x48);
 8000d10:	2148      	movs	r1, #72	; 0x48
 8000d12:	2072      	movs	r0, #114	; 0x72
 8000d14:	f7ff ff66 	bl	8000be4 <si4432_write_register>

	//set the modem parameters according to the exel calculator(parameters: 9.6 kbps, deviation: 45 kHz, channel filter BW: 102.1 kHz
	si4432_write_register(IF_Filter_Bandwidth, 0x1e);
 8000d18:	211e      	movs	r1, #30
 8000d1a:	201c      	movs	r0, #28
 8000d1c:	f7ff ff62 	bl	8000be4 <si4432_write_register>
	si4432_write_register(Clock_Recovery_Oversampling_Ratio, 0xD0);  //write 0xD0 to the Clock Recovery Oversampling Ratio register
 8000d20:	21d0      	movs	r1, #208	; 0xd0
 8000d22:	2020      	movs	r0, #32
 8000d24:	f7ff ff5e 	bl	8000be4 <si4432_write_register>
	si4432_write_register(Clock_Recovery_Offset2, 0x00);    //write 0x00 to the Clock Recovery Offset 2 register
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2021      	movs	r0, #33	; 0x21
 8000d2c:	f7ff ff5a 	bl	8000be4 <si4432_write_register>
	si4432_write_register(Clock_Recovery_Offset1, 0x9D);        //write 0x9D to the Clock Recovery Offset 1 register
 8000d30:	219d      	movs	r1, #157	; 0x9d
 8000d32:	2022      	movs	r0, #34	; 0x22
 8000d34:	f7ff ff56 	bl	8000be4 <si4432_write_register>
	si4432_write_register(Clock_Recovery_Offset0, 0x49);                                                           //write 0x49 to the Clock Recovery Offset 0 register
 8000d38:	2149      	movs	r1, #73	; 0x49
 8000d3a:	2023      	movs	r0, #35	; 0x23
 8000d3c:	f7ff ff52 	bl	8000be4 <si4432_write_register>
	si4432_write_register(Clock_Recovery_Timing_Loop_Gain1, 0x00);                                                           //write 0x00 to the Clock Recovery Timing Loop Gain 1 register
 8000d40:	2100      	movs	r1, #0
 8000d42:	2024      	movs	r0, #36	; 0x24
 8000d44:	f7ff ff4e 	bl	8000be4 <si4432_write_register>
	si4432_write_register(Clock_Recovery_Timing_Loop_Gain0, 0x24);                                                           //write 0x24 to the Clock Recovery Timing Loop Gain 0 register
 8000d48:	2124      	movs	r1, #36	; 0x24
 8000d4a:	2025      	movs	r0, #37	; 0x25
 8000d4c:	f7ff ff4a 	bl	8000be4 <si4432_write_register>
	si4432_write_register(AFC_Loop_Gearshift_Override, 0x40);                                                           //write 0x40 to the AFC Loop Gearshift Override register
 8000d50:	2140      	movs	r1, #64	; 0x40
 8000d52:	201d      	movs	r0, #29
 8000d54:	f7ff ff46 	bl	8000be4 <si4432_write_register>
	si4432_write_register(AFC_Timing_Control, 0x0A);                                                           //write 0x0A to the AFC Timing Control register
 8000d58:	210a      	movs	r1, #10
 8000d5a:	201e      	movs	r0, #30
 8000d5c:	f7ff ff42 	bl	8000be4 <si4432_write_register>
	si4432_write_register(AFC_Limiter, 0x20);                                                           //write 0x20 to the AFC Limiter register
 8000d60:	2120      	movs	r1, #32
 8000d62:	202a      	movs	r0, #42	; 0x2a
 8000d64:	f7ff ff3e 	bl	8000be4 <si4432_write_register>

	//Set the Preamble length to 5 bytes
	si4432_write_register(Preamble_Length, 0x0a);
 8000d68:	210a      	movs	r1, #10
 8000d6a:	2034      	movs	r0, #52	; 0x34
 8000d6c:	f7ff ff3a 	bl	8000be4 <si4432_write_register>

	 //set preamble detection threshold to 20bits
	si4432_write_register(0x35, 0x2A);                                                       //write 0x2A to the Preamble Detection Control  register
 8000d70:	212a      	movs	r1, #42	; 0x2a
 8000d72:	2035      	movs	r0, #53	; 0x35
 8000d74:	f7ff ff36 	bl	8000be4 <si4432_write_register>

	//Disable header bytes; set variable packet length (the length of the payload is defined by the
	//received packet length field of the packet); set the synch word to two bytes long
	si4432_write_register(Header_Control2, 0x02);
 8000d78:	2102      	movs	r1, #2
 8000d7a:	2033      	movs	r0, #51	; 0x33
 8000d7c:	f7ff ff32 	bl	8000be4 <si4432_write_register>

	//Set the Sync Word Pattern
	si4432_write_register(Sync_Word3, 0x2D);
 8000d80:	212d      	movs	r1, #45	; 0x2d
 8000d82:	2036      	movs	r0, #54	; 0x36
 8000d84:	f7ff ff2e 	bl	8000be4 <si4432_write_register>
	si4432_write_register(Sync_Word2, 0xD4);
 8000d88:	21d4      	movs	r1, #212	; 0xd4
 8000d8a:	2037      	movs	r0, #55	; 0x37
 8000d8c:	f7ff ff2a 	bl	8000be4 <si4432_write_register>

	//enable the TX packet handler and CRC
	si4432_write_register(Data_Access_Control, 0x8d);
 8000d90:	218d      	movs	r1, #141	; 0x8d
 8000d92:	2030      	movs	r0, #48	; 0x30
 8000d94:	f7ff ff26 	bl	8000be4 <si4432_write_register>
	si4432_write_register(Header_Control1, 0x00);
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2032      	movs	r0, #50	; 0x32
 8000d9c:	f7ff ff22 	bl	8000be4 <si4432_write_register>

	//enable FIFO mode and GFSK modulation
	si4432_write_register(Modulation_Mode_Control2, 0x63);
 8000da0:	2163      	movs	r1, #99	; 0x63
 8000da2:	2071      	movs	r0, #113	; 0x71
 8000da4:	f7ff ff1e 	bl	8000be4 <si4432_write_register>

	//set the TX FIFO almost empty threshold to 10 bytes
	si4432_write_register(0x7D, 0x01);
 8000da8:	2101      	movs	r1, #1
 8000daa:	207d      	movs	r0, #125	; 0x7d
 8000dac:	f7ff ff1a 	bl	8000be4 <si4432_write_register>
	//set the RX FIFO almost full threshold to 54 bytes
	si4432_write_register(0x7E, RX_FIFO_ALMOST_FULL_TRESHOLD);
 8000db0:	2108      	movs	r1, #8
 8000db2:	207e      	movs	r0, #126	; 0x7e
 8000db4:	f7ff ff16 	bl	8000be4 <si4432_write_register>

	//Configure control to RF Switch
	si4432_write_register(GPIO1_Configuration, 0x15);//TX state
 8000db8:	2115      	movs	r1, #21
 8000dba:	200c      	movs	r0, #12
 8000dbc:	f7ff ff12 	bl	8000be4 <si4432_write_register>
	si4432_write_register(GPIO2_Configuration, 0x12);//RX state
 8000dc0:	2112      	movs	r1, #18
 8000dc2:	200d      	movs	r0, #13
 8000dc4:	f7ff ff0e 	bl	8000be4 <si4432_write_register>

	//set AGC Override1 Register
	si4432_write_register(AGC_Override1, 0x60);
 8000dc8:	2160      	movs	r1, #96	; 0x60
 8000dca:	2069      	movs	r0, #105	; 0x69
 8000dcc:	f7ff ff0a 	bl	8000be4 <si4432_write_register>
	//set Crystal Oscillator Load Capacitance register
	si4432_write_register(Crystal_Oscillator_Load_Capacitance, 0xb7);
 8000dd0:	21b7      	movs	r1, #183	; 0xb7
 8000dd2:	2009      	movs	r0, #9
 8000dd4:	f7ff ff06 	bl	8000be4 <si4432_write_register>
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <si4432_init_RX_AN415>:

    Status1 = si4432_read_register(Interrupt_Status1);
    Status2 = si4432_read_register(Interrupt_Status2);
}

void si4432_init_RX_AN415(void){
 8000ddc:	b5b0      	push	{r4, r5, r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	si4432_init_AN415();
 8000de0:	f7ff ff78 	bl	8000cd4 <si4432_init_AN415>

	//enable low bat and enable the receiver chain
	si4432_write_register(Operating_Function_Control1, 0x05);
 8000de4:	2105      	movs	r1, #5
 8000de6:	2007      	movs	r0, #7
 8000de8:	f7ff fefc 	bl	8000be4 <si4432_write_register>

    Status1 = si4432_read_register(Interrupt_Status1);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f7ff ff1b 	bl	8000c28 <si4432_read_register>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <si4432_init_RX_AN415+0x9c>)
 8000df8:	701a      	strb	r2, [r3, #0]
    Status2 = si4432_read_register(Interrupt_Status2);
 8000dfa:	2004      	movs	r0, #4
 8000dfc:	f7ff ff14 	bl	8000c28 <si4432_read_register>
 8000e00:	4603      	mov	r3, r0
 8000e02:	461a      	mov	r2, r3
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <si4432_init_RX_AN415+0xa0>)
 8000e06:	701a      	strb	r2, [r3, #0]

    DEBUG_SI4432_PRINT("S1 = 0x%X, S2 = 0x%X\n", Status1, Status2);
 8000e08:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <si4432_init_RX_AN415+0x9c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <si4432_init_RX_AN415+0xa0>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	461a      	mov	r2, r3
 8000e18:	4819      	ldr	r0, [pc, #100]	; (8000e80 <si4432_init_RX_AN415+0xa4>)
 8000e1a:	f006 fbb5 	bl	8007588 <iprintf>

    si4432_write_register(Interrupt_Enable1, 0x13);
 8000e1e:	2113      	movs	r1, #19
 8000e20:	2005      	movs	r0, #5
 8000e22:	f7ff fedf 	bl	8000be4 <si4432_write_register>
    si4432_write_register(Interrupt_Enable2, 0x00);
 8000e26:	2100      	movs	r1, #0
 8000e28:	2006      	movs	r0, #6
 8000e2a:	f7ff fedb 	bl	8000be4 <si4432_write_register>

    //default 0b00011110
    si4432_write_register(RSSI_Threshold_For_Clear_Channel_Indicator, 0x20);
 8000e2e:	2120      	movs	r1, #32
 8000e30:	2027      	movs	r0, #39	; 0x27
 8000e32:	f7ff fed7 	bl	8000be4 <si4432_write_register>

    Status1 = si4432_read_register(Interrupt_Status1);
 8000e36:	2003      	movs	r0, #3
 8000e38:	f7ff fef6 	bl	8000c28 <si4432_read_register>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <si4432_init_RX_AN415+0x9c>)
 8000e42:	701a      	strb	r2, [r3, #0]
    Status2 = si4432_read_register(Interrupt_Status2);
 8000e44:	2004      	movs	r0, #4
 8000e46:	f7ff feef 	bl	8000c28 <si4432_read_register>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <si4432_init_RX_AN415+0xa0>)
 8000e50:	701a      	strb	r2, [r3, #0]

    DEBUG_SI4432_PRINT("S1 = 0x%X, S2 = 0x%X, V = %u\n", Status1, Status2, si4432_get_battery_voltage());
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <si4432_init_RX_AN415+0x9c>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	461c      	mov	r4, r3
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <si4432_init_RX_AN415+0xa0>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	461d      	mov	r5, r3
 8000e62:	f000 f891 	bl	8000f88 <si4432_get_battery_voltage>
 8000e66:	4603      	mov	r3, r0
 8000e68:	462a      	mov	r2, r5
 8000e6a:	4621      	mov	r1, r4
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <si4432_init_RX_AN415+0xa8>)
 8000e6e:	f006 fb8b 	bl	8007588 <iprintf>


}
 8000e72:	bf00      	nop
 8000e74:	bdb0      	pop	{r4, r5, r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000092 	.word	0x20000092
 8000e7c:	20000093 	.word	0x20000093
 8000e80:	08008590 	.word	0x08008590
 8000e84:	080085a8 	.word	0x080085a8

08000e88 <si4432_receive_AN415>:


bool si4432_receive_AN415(uint8_t * buf, uint8_t * len){
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
	uint8_t length = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	73bb      	strb	r3, [r7, #14]
	uint8_t temp8 = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	73fb      	strb	r3, [r7, #15]

	if(si4432_get_irq_pin() == GPIO_PIN_RESET)
 8000e9a:	f7ff fe97 	bl	8000bcc <si4432_get_irq_pin>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d168      	bne.n	8000f76 <si4432_receive_AN415+0xee>
	{
		//read interrupt status registers
		Status1 = si4432_read_register(Interrupt_Status1);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f7ff febf 	bl	8000c28 <si4432_read_register>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b34      	ldr	r3, [pc, #208]	; (8000f80 <si4432_receive_AN415+0xf8>)
 8000eb0:	701a      	strb	r2, [r3, #0]
		Status2 = si4432_read_register(Interrupt_Status2);                                            //read the Interrupt Status2 register
 8000eb2:	2004      	movs	r0, #4
 8000eb4:	f7ff feb8 	bl	8000c28 <si4432_read_register>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	461a      	mov	r2, r3
 8000ebc:	4b31      	ldr	r3, [pc, #196]	; (8000f84 <si4432_receive_AN415+0xfc>)
 8000ebe:	701a      	strb	r2, [r3, #0]

		//CRC Error interrupt occured
		if( (Status1 & 0x01) == 0x01 )
 8000ec0:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <si4432_receive_AN415+0xf8>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d107      	bne.n	8000ede <si4432_receive_AN415+0x56>
		{
			//reset the RX FIFO
			si4432_write_register(Operating_Function_Control2, 0x02); //write 0x02 to the Operating Function Control 2 register
 8000ece:	2102      	movs	r1, #2
 8000ed0:	2008      	movs	r0, #8
 8000ed2:	f7ff fe87 	bl	8000be4 <si4432_write_register>
			si4432_write_register(Operating_Function_Control2, 0x00); //write 0x00 to the Operating Function Control 2 register
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	2008      	movs	r0, #8
 8000eda:	f7ff fe83 	bl	8000be4 <si4432_write_register>
			pointer = pointer + RX_FIFO_ALMOST_FULL_TRESHOLD;
		}*/


		/*packet received interrupt occured*/
		if( (Status1 & 0x02) == 0x02 || (Status1 & 0x10) == 0x10 )
 8000ede:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <si4432_receive_AN415+0xf8>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d006      	beq.n	8000efa <si4432_receive_AN415+0x72>
 8000eec:	4b24      	ldr	r3, [pc, #144]	; (8000f80 <si4432_receive_AN415+0xf8>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	f003 0310 	and.w	r3, r3, #16
 8000ef6:	2b10      	cmp	r3, #16
 8000ef8:	d13d      	bne.n	8000f76 <si4432_receive_AN415+0xee>
		{
			//disable the receiver chain
			si4432_write_register(Operating_Function_Control2, 0x01);
 8000efa:	2101      	movs	r1, #1
 8000efc:	2008      	movs	r0, #8
 8000efe:	f7ff fe71 	bl	8000be4 <si4432_write_register>

			//Read the length of the received payload
			length = si4432_read_register(Received_Packet_Length);                                             //read the Received Packet Length register
 8000f02:	204b      	movs	r0, #75	; 0x4b
 8000f04:	f7ff fe90 	bl	8000c28 <si4432_read_register>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	73bb      	strb	r3, [r7, #14]

			//get the remaining 32bytes from the RX FIFO
			for(temp8 = 0; temp8 < (length > SI4432_PLL ? SI4432_PLL : length); temp8++)
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73fb      	strb	r3, [r7, #15]
 8000f10:	e00a      	b.n	8000f28 <si4432_receive_AN415+0xa0>
			{
				buf[temp8] = si4432_read_register(FIFO_Access);
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	18d4      	adds	r4, r2, r3
 8000f18:	207f      	movs	r0, #127	; 0x7f
 8000f1a:	f7ff fe85 	bl	8000c28 <si4432_read_register>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	7023      	strb	r3, [r4, #0]
			for(temp8 = 0; temp8 < (length > SI4432_PLL ? SI4432_PLL : length); temp8++)
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	3301      	adds	r3, #1
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	7bbb      	ldrb	r3, [r7, #14]
 8000f2a:	2b08      	cmp	r3, #8
 8000f2c:	bf28      	it	cs
 8000f2e:	2308      	movcs	r3, #8
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	7bfa      	ldrb	r2, [r7, #15]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d3ec      	bcc.n	8000f12 <si4432_receive_AN415+0x8a>
			}

			*len = length;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	7bba      	ldrb	r2, [r7, #14]
 8000f3c:	701a      	strb	r2, [r3, #0]


			//reset the RX FIFO
			si4432_write_register(Operating_Function_Control2, 0x02);
 8000f3e:	2102      	movs	r1, #2
 8000f40:	2008      	movs	r0, #8
 8000f42:	f7ff fe4f 	bl	8000be4 <si4432_write_register>
			si4432_write_register(Operating_Function_Control2, 0x00);
 8000f46:	2100      	movs	r1, #0
 8000f48:	2008      	movs	r0, #8
 8000f4a:	f7ff fe4b 	bl	8000be4 <si4432_write_register>
			//enable the receiver chain again
			si4432_write_register(Operating_Function_Control1, 0x05);
 8000f4e:	2105      	movs	r1, #5
 8000f50:	2007      	movs	r0, #7
 8000f52:	f7ff fe47 	bl	8000be4 <si4432_write_register>

			//read interrupt status registers
					Status1 = si4432_read_register(Interrupt_Status1);
 8000f56:	2003      	movs	r0, #3
 8000f58:	f7ff fe66 	bl	8000c28 <si4432_read_register>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <si4432_receive_AN415+0xf8>)
 8000f62:	701a      	strb	r2, [r3, #0]
					Status2 = si4432_read_register(Interrupt_Status2);
 8000f64:	2004      	movs	r0, #4
 8000f66:	f7ff fe5f 	bl	8000c28 <si4432_read_register>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <si4432_receive_AN415+0xfc>)
 8000f70:	701a      	strb	r2, [r3, #0]
			return true;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <si4432_receive_AN415+0xf0>
		}
	}
	return false;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd90      	pop	{r4, r7, pc}
 8000f80:	20000092 	.word	0x20000092
 8000f84:	20000093 	.word	0x20000093

08000f88 <si4432_get_battery_voltage>:
	si4432_write_register(Digital_Test_Bus, 0x00);
	// select nothing to the Analog Testbus
	si4432_write_register(Analog_Test_Bus, 0x0B);
}

uint8_t si4432_get_battery_voltage(void){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
    uint8_t voltage = (si4432_read_register(Interrupt_Status1) & 0x1f);
 8000f8e:	2003      	movs	r0, #3
 8000f90:	f7ff fe4a 	bl	8000c28 <si4432_read_register>
 8000f94:	4603      	mov	r3, r0
 8000f96:	f003 031f 	and.w	r3, r3, #31
 8000f9a:	71fb      	strb	r3, [r7, #7]

    return  voltage;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <HAL_MspInit+0x68>)
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	4a17      	ldr	r2, [pc, #92]	; (8001010 <HAL_MspInit+0x68>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6193      	str	r3, [r2, #24]
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <HAL_MspInit+0x68>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_MspInit+0x68>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	4a11      	ldr	r2, [pc, #68]	; (8001010 <HAL_MspInit+0x68>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	61d3      	str	r3, [r2, #28]
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <HAL_MspInit+0x68>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	210f      	movs	r1, #15
 8000fe2:	f06f 0001 	mvn.w	r0, #1
 8000fe6:	f000 fe24 	bl	8001c32 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_MspInit+0x6c>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <HAL_MspInit+0x6c>)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40021000 	.word	0x40021000
 8001014:	40010000 	.word	0x40010000

08001018 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a14      	ldr	r2, [pc, #80]	; (8001084 <HAL_ADC_MspInit+0x6c>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d121      	bne.n	800107c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <HAL_ADC_MspInit+0x70>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a12      	ldr	r2, [pc, #72]	; (8001088 <HAL_ADC_MspInit+0x70>)
 800103e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001042:	6193      	str	r3, [r2, #24]
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <HAL_ADC_MspInit+0x70>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <HAL_ADC_MspInit+0x70>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a0c      	ldr	r2, [pc, #48]	; (8001088 <HAL_ADC_MspInit+0x70>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_ADC_MspInit+0x70>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001068:	2301      	movs	r3, #1
 800106a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106c:	2303      	movs	r3, #3
 800106e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	4619      	mov	r1, r3
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <HAL_ADC_MspInit+0x74>)
 8001078:	f000 ff66 	bl	8001f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800107c:	bf00      	nop
 800107e:	3720      	adds	r7, #32
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40012400 	.word	0x40012400
 8001088:	40021000 	.word	0x40021000
 800108c:	40010800 	.word	0x40010800

08001090 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0318 	add.w	r3, r7, #24
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a2b      	ldr	r2, [pc, #172]	; (8001158 <HAL_I2C_MspInit+0xc8>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d124      	bne.n	80010fa <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b0:	4b2a      	ldr	r3, [pc, #168]	; (800115c <HAL_I2C_MspInit+0xcc>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a29      	ldr	r2, [pc, #164]	; (800115c <HAL_I2C_MspInit+0xcc>)
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <HAL_I2C_MspInit+0xcc>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010c8:	23c0      	movs	r3, #192	; 0xc0
 80010ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010cc:	2312      	movs	r3, #18
 80010ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	f107 0318 	add.w	r3, r7, #24
 80010d8:	4619      	mov	r1, r3
 80010da:	4821      	ldr	r0, [pc, #132]	; (8001160 <HAL_I2C_MspInit+0xd0>)
 80010dc:	f000 ff34 	bl	8001f48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010e0:	4b1e      	ldr	r3, [pc, #120]	; (800115c <HAL_I2C_MspInit+0xcc>)
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	4a1d      	ldr	r2, [pc, #116]	; (800115c <HAL_I2C_MspInit+0xcc>)
 80010e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ea:	61d3      	str	r3, [r2, #28]
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <HAL_I2C_MspInit+0xcc>)
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80010f8:	e029      	b.n	800114e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a19      	ldr	r2, [pc, #100]	; (8001164 <HAL_I2C_MspInit+0xd4>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d124      	bne.n	800114e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_I2C_MspInit+0xcc>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a14      	ldr	r2, [pc, #80]	; (800115c <HAL_I2C_MspInit+0xcc>)
 800110a:	f043 0308 	orr.w	r3, r3, #8
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_I2C_MspInit+0xcc>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0308 	and.w	r3, r3, #8
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800111c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001122:	2312      	movs	r3, #18
 8001124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112a:	f107 0318 	add.w	r3, r7, #24
 800112e:	4619      	mov	r1, r3
 8001130:	480b      	ldr	r0, [pc, #44]	; (8001160 <HAL_I2C_MspInit+0xd0>)
 8001132:	f000 ff09 	bl	8001f48 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_I2C_MspInit+0xcc>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	4a08      	ldr	r2, [pc, #32]	; (800115c <HAL_I2C_MspInit+0xcc>)
 800113c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001140:	61d3      	str	r3, [r2, #28]
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_I2C_MspInit+0xcc>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
}
 800114e:	bf00      	nop
 8001150:	3728      	adds	r7, #40	; 0x28
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40005400 	.word	0x40005400
 800115c:	40021000 	.word	0x40021000
 8001160:	40010c00 	.word	0x40010c00
 8001164:	40005800 	.word	0x40005800

08001168 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0318 	add.w	r3, r7, #24
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a44      	ldr	r2, [pc, #272]	; (8001294 <HAL_SPI_MspInit+0x12c>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d156      	bne.n	8001236 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001188:	4b43      	ldr	r3, [pc, #268]	; (8001298 <HAL_SPI_MspInit+0x130>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a42      	ldr	r2, [pc, #264]	; (8001298 <HAL_SPI_MspInit+0x130>)
 800118e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b40      	ldr	r3, [pc, #256]	; (8001298 <HAL_SPI_MspInit+0x130>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a0:	4b3d      	ldr	r3, [pc, #244]	; (8001298 <HAL_SPI_MspInit+0x130>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4a3c      	ldr	r2, [pc, #240]	; (8001298 <HAL_SPI_MspInit+0x130>)
 80011a6:	f043 0304 	orr.w	r3, r3, #4
 80011aa:	6193      	str	r3, [r2, #24]
 80011ac:	4b3a      	ldr	r3, [pc, #232]	; (8001298 <HAL_SPI_MspInit+0x130>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80011b8:	23b0      	movs	r3, #176	; 0xb0
 80011ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	f107 0318 	add.w	r3, r7, #24
 80011c8:	4619      	mov	r1, r3
 80011ca:	4834      	ldr	r0, [pc, #208]	; (800129c <HAL_SPI_MspInit+0x134>)
 80011cc:	f000 febc 	bl	8001f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011d0:	2340      	movs	r3, #64	; 0x40
 80011d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f107 0318 	add.w	r3, r7, #24
 80011e0:	4619      	mov	r1, r3
 80011e2:	482e      	ldr	r0, [pc, #184]	; (800129c <HAL_SPI_MspInit+0x134>)
 80011e4:	f000 feb0 	bl	8001f48 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80011e8:	4b2d      	ldr	r3, [pc, #180]	; (80012a0 <HAL_SPI_MspInit+0x138>)
 80011ea:	4a2e      	ldr	r2, [pc, #184]	; (80012a4 <HAL_SPI_MspInit+0x13c>)
 80011ec:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011ee:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <HAL_SPI_MspInit+0x138>)
 80011f0:	2210      	movs	r2, #16
 80011f2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f4:	4b2a      	ldr	r3, [pc, #168]	; (80012a0 <HAL_SPI_MspInit+0x138>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011fa:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <HAL_SPI_MspInit+0x138>)
 80011fc:	2280      	movs	r2, #128	; 0x80
 80011fe:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001200:	4b27      	ldr	r3, [pc, #156]	; (80012a0 <HAL_SPI_MspInit+0x138>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001206:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <HAL_SPI_MspInit+0x138>)
 8001208:	2200      	movs	r2, #0
 800120a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800120c:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <HAL_SPI_MspInit+0x138>)
 800120e:	2200      	movs	r2, #0
 8001210:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001212:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <HAL_SPI_MspInit+0x138>)
 8001214:	2200      	movs	r2, #0
 8001216:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001218:	4821      	ldr	r0, [pc, #132]	; (80012a0 <HAL_SPI_MspInit+0x138>)
 800121a:	f000 fd35 	bl	8001c88 <HAL_DMA_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8001224:	f7ff fbca 	bl	80009bc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a1d      	ldr	r2, [pc, #116]	; (80012a0 <HAL_SPI_MspInit+0x138>)
 800122c:	649a      	str	r2, [r3, #72]	; 0x48
 800122e:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <HAL_SPI_MspInit+0x138>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001234:	e029      	b.n	800128a <HAL_SPI_MspInit+0x122>
  else if(hspi->Instance==SPI2)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a1b      	ldr	r2, [pc, #108]	; (80012a8 <HAL_SPI_MspInit+0x140>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d124      	bne.n	800128a <HAL_SPI_MspInit+0x122>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_SPI_MspInit+0x130>)
 8001242:	69db      	ldr	r3, [r3, #28]
 8001244:	4a14      	ldr	r2, [pc, #80]	; (8001298 <HAL_SPI_MspInit+0x130>)
 8001246:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124a:	61d3      	str	r3, [r2, #28]
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_SPI_MspInit+0x130>)
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <HAL_SPI_MspInit+0x130>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <HAL_SPI_MspInit+0x130>)
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <HAL_SPI_MspInit+0x130>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001270:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127e:	f107 0318 	add.w	r3, r7, #24
 8001282:	4619      	mov	r1, r3
 8001284:	4809      	ldr	r0, [pc, #36]	; (80012ac <HAL_SPI_MspInit+0x144>)
 8001286:	f000 fe5f 	bl	8001f48 <HAL_GPIO_Init>
}
 800128a:	bf00      	nop
 800128c:	3728      	adds	r7, #40	; 0x28
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40013000 	.word	0x40013000
 8001298:	40021000 	.word	0x40021000
 800129c:	40010800 	.word	0x40010800
 80012a0:	20001bdc 	.word	0x20001bdc
 80012a4:	40020030 	.word	0x40020030
 80012a8:	40003800 	.word	0x40003800
 80012ac:	40010c00 	.word	0x40010c00

080012b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0318 	add.w	r3, r7, #24
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a37      	ldr	r2, [pc, #220]	; (80013a8 <HAL_UART_MspInit+0xf8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d132      	bne.n	8001336 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012d0:	4b36      	ldr	r3, [pc, #216]	; (80013ac <HAL_UART_MspInit+0xfc>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	4a35      	ldr	r2, [pc, #212]	; (80013ac <HAL_UART_MspInit+0xfc>)
 80012d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012da:	6193      	str	r3, [r2, #24]
 80012dc:	4b33      	ldr	r3, [pc, #204]	; (80013ac <HAL_UART_MspInit+0xfc>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e4:	617b      	str	r3, [r7, #20]
 80012e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e8:	4b30      	ldr	r3, [pc, #192]	; (80013ac <HAL_UART_MspInit+0xfc>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a2f      	ldr	r2, [pc, #188]	; (80013ac <HAL_UART_MspInit+0xfc>)
 80012ee:	f043 0304 	orr.w	r3, r3, #4
 80012f2:	6193      	str	r3, [r2, #24]
 80012f4:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <HAL_UART_MspInit+0xfc>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001300:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 0318 	add.w	r3, r7, #24
 8001312:	4619      	mov	r1, r3
 8001314:	4826      	ldr	r0, [pc, #152]	; (80013b0 <HAL_UART_MspInit+0x100>)
 8001316:	f000 fe17 	bl	8001f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800131a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800131e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	f107 0318 	add.w	r3, r7, #24
 800132c:	4619      	mov	r1, r3
 800132e:	4820      	ldr	r0, [pc, #128]	; (80013b0 <HAL_UART_MspInit+0x100>)
 8001330:	f000 fe0a 	bl	8001f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001334:	e034      	b.n	80013a0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a1e      	ldr	r2, [pc, #120]	; (80013b4 <HAL_UART_MspInit+0x104>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d12f      	bne.n	80013a0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <HAL_UART_MspInit+0xfc>)
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	4a19      	ldr	r2, [pc, #100]	; (80013ac <HAL_UART_MspInit+0xfc>)
 8001346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134a:	61d3      	str	r3, [r2, #28]
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <HAL_UART_MspInit+0xfc>)
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <HAL_UART_MspInit+0xfc>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a13      	ldr	r2, [pc, #76]	; (80013ac <HAL_UART_MspInit+0xfc>)
 800135e:	f043 0304 	orr.w	r3, r3, #4
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <HAL_UART_MspInit+0xfc>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001370:	2304      	movs	r3, #4
 8001372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 0318 	add.w	r3, r7, #24
 8001380:	4619      	mov	r1, r3
 8001382:	480b      	ldr	r0, [pc, #44]	; (80013b0 <HAL_UART_MspInit+0x100>)
 8001384:	f000 fde0 	bl	8001f48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001388:	2308      	movs	r3, #8
 800138a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001394:	f107 0318 	add.w	r3, r7, #24
 8001398:	4619      	mov	r1, r3
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <HAL_UART_MspInit+0x100>)
 800139c:	f000 fdd4 	bl	8001f48 <HAL_GPIO_Init>
}
 80013a0:	bf00      	nop
 80013a2:	3728      	adds	r7, #40	; 0x28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40013800 	.word	0x40013800
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40010800 	.word	0x40010800
 80013b4:	40004400 	.word	0x40004400

080013b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08c      	sub	sp, #48	; 0x30
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	2019      	movs	r0, #25
 80013ce:	f000 fc30 	bl	8001c32 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80013d2:	2019      	movs	r0, #25
 80013d4:	f000 fc49 	bl	8001c6a <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013d8:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <HAL_InitTick+0x9c>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a1d      	ldr	r2, [pc, #116]	; (8001454 <HAL_InitTick+0x9c>)
 80013de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_InitTick+0x9c>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013f0:	f107 0210 	add.w	r2, r7, #16
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4611      	mov	r1, r2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f001 fc7c 	bl	8002cf8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001400:	f001 fc66 	bl	8002cd0 <HAL_RCC_GetPCLK2Freq>
 8001404:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001408:	4a13      	ldr	r2, [pc, #76]	; (8001458 <HAL_InitTick+0xa0>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	0c9b      	lsrs	r3, r3, #18
 8001410:	3b01      	subs	r3, #1
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_InitTick+0xa4>)
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <HAL_InitTick+0xa8>)
 8001418:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <HAL_InitTick+0xa4>)
 800141c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001420:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001422:	4a0e      	ldr	r2, [pc, #56]	; (800145c <HAL_InitTick+0xa4>)
 8001424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001426:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <HAL_InitTick+0xa4>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_InitTick+0xa4>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001434:	4809      	ldr	r0, [pc, #36]	; (800145c <HAL_InitTick+0xa4>)
 8001436:	f002 facf 	bl	80039d8 <HAL_TIM_Base_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d104      	bne.n	800144a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001440:	4806      	ldr	r0, [pc, #24]	; (800145c <HAL_InitTick+0xa4>)
 8001442:	f002 fb21 	bl	8003a88 <HAL_TIM_Base_Start_IT>
 8001446:	4603      	mov	r3, r0
 8001448:	e000      	b.n	800144c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	3730      	adds	r7, #48	; 0x30
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40021000 	.word	0x40021000
 8001458:	431bde83 	.word	0x431bde83
 800145c:	20001c20 	.word	0x20001c20
 8001460:	40012c00 	.word	0x40012c00

08001464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <HardFault_Handler+0x4>

08001476 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <MemManage_Handler+0x4>

0800147c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <BusFault_Handler+0x4>

08001482 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <UsageFault_Handler+0x4>

08001488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001498:	2010      	movs	r0, #16
 800149a:	f000 fedf 	bl	800225c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <DMA1_Channel3_IRQHandler+0x10>)
 80014aa:	f000 fc47 	bl	8001d3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20001bdc 	.word	0x20001bdc

080014b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80014bc:	2020      	movs	r0, #32
 80014be:	f000 fecd 	bl	800225c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80014c2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014c6:	f000 fec9 	bl	800225c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80014ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014ce:	f000 fec5 	bl	800225c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <TIM1_UP_IRQHandler+0x10>)
 80014de:	f002 fb25 	bl	8003b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20001c20 	.word	0x20001c20

080014ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80014f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014f4:	f000 feb2 	bl	800225c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80014f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80014fc:	f000 feae 	bl	800225c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	e00a      	b.n	800152c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001516:	f3af 8000 	nop.w
 800151a:	4601      	mov	r1, r0
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	1c5a      	adds	r2, r3, #1
 8001520:	60ba      	str	r2, [r7, #8]
 8001522:	b2ca      	uxtb	r2, r1
 8001524:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3301      	adds	r3, #1
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	429a      	cmp	r2, r3
 8001532:	dbf0      	blt.n	8001516 <_read+0x12>
	}

return len;
 8001534:	687b      	ldr	r3, [r7, #4]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <_close>:
	}
	return len;
}

int _close(int file)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
	return -1;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001564:	605a      	str	r2, [r3, #4]
	return 0;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr

08001572 <_isatty>:

int _isatty(int file)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
	return 1;
 800157a:	2301      	movs	r3, #1
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr

08001586 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001586:	b480      	push	{r7}
 8001588:	b085      	sub	sp, #20
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
	return 0;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
	...

080015a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <_sbrk+0x50>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d102      	bne.n	80015b6 <_sbrk+0x16>
		heap_end = &end;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <_sbrk+0x50>)
 80015b2:	4a10      	ldr	r2, [pc, #64]	; (80015f4 <_sbrk+0x54>)
 80015b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <_sbrk+0x50>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <_sbrk+0x50>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	466a      	mov	r2, sp
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d907      	bls.n	80015da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80015ca:	f005 ff9f 	bl	800750c <__errno>
 80015ce:	4602      	mov	r2, r0
 80015d0:	230c      	movs	r3, #12
 80015d2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80015d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015d8:	e006      	b.n	80015e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <_sbrk+0x50>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	4a03      	ldr	r2, [pc, #12]	; (80015f0 <_sbrk+0x50>)
 80015e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80015e6:	68fb      	ldr	r3, [r7, #12]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000094 	.word	0x20000094
 80015f4:	20001cb0 	.word	0x20001cb0

080015f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001604:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001606:	e003      	b.n	8001610 <LoopCopyDataInit>

08001608 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800160a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800160c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800160e:	3104      	adds	r1, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001610:	480a      	ldr	r0, [pc, #40]	; (800163c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001614:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001616:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001618:	d3f6      	bcc.n	8001608 <CopyDataInit>
  ldr r2, =_sbss
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800161c:	e002      	b.n	8001624 <LoopFillZerobss>

0800161e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001620:	f842 3b04 	str.w	r3, [r2], #4

08001624 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001626:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001628:	d3f9      	bcc.n	800161e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800162a:	f7ff ffe5 	bl	80015f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800162e:	f005 ff73 	bl	8007518 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001632:	f7fe fe93 	bl	800035c <main>
  bx lr
 8001636:	4770      	bx	lr
  ldr r3, =_sidata
 8001638:	08008704 	.word	0x08008704
  ldr r0, =_sdata
 800163c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001640:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001644:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001648:	20001cb0 	.word	0x20001cb0

0800164c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC1_2_IRQHandler>
	...

08001650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_Init+0x28>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_Init+0x28>)
 800165a:	f043 0310 	orr.w	r3, r3, #16
 800165e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001660:	2003      	movs	r0, #3
 8001662:	f000 fadb 	bl	8001c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001666:	2000      	movs	r0, #0
 8001668:	f7ff fea6 	bl	80013b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800166c:	f7ff fc9c 	bl	8000fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40022000 	.word	0x40022000

0800167c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <HAL_IncTick+0x1c>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	4b05      	ldr	r3, [pc, #20]	; (800169c <HAL_IncTick+0x20>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4413      	add	r3, r2
 800168c:	4a03      	ldr	r2, [pc, #12]	; (800169c <HAL_IncTick+0x20>)
 800168e:	6013      	str	r3, [r2, #0]
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	20000008 	.word	0x20000008
 800169c:	20001c68 	.word	0x20001c68

080016a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return uwTick;
 80016a4:	4b02      	ldr	r3, [pc, #8]	; (80016b0 <HAL_GetTick+0x10>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	20001c68 	.word	0x20001c68

080016b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e0be      	b.n	8001854 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d109      	bne.n	80016f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff fc90 	bl	8001018 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 f9ab 	bl	8001a54 <ADC_ConversionStop_Disable>
 80016fe:	4603      	mov	r3, r0
 8001700:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	2b00      	cmp	r3, #0
 800170c:	f040 8099 	bne.w	8001842 <HAL_ADC_Init+0x18e>
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	2b00      	cmp	r3, #0
 8001714:	f040 8095 	bne.w	8001842 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001720:	f023 0302 	bic.w	r3, r3, #2
 8001724:	f043 0202 	orr.w	r2, r3, #2
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001734:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	7b1b      	ldrb	r3, [r3, #12]
 800173a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800173c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	4313      	orrs	r3, r2
 8001742:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800174c:	d003      	beq.n	8001756 <HAL_ADC_Init+0xa2>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d102      	bne.n	800175c <HAL_ADC_Init+0xa8>
 8001756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800175a:	e000      	b.n	800175e <HAL_ADC_Init+0xaa>
 800175c:	2300      	movs	r3, #0
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	7d1b      	ldrb	r3, [r3, #20]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d119      	bne.n	80017a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	7b1b      	ldrb	r3, [r3, #12]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d109      	bne.n	8001788 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	3b01      	subs	r3, #1
 800177a:	035a      	lsls	r2, r3, #13
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	e00b      	b.n	80017a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	f043 0220 	orr.w	r2, r3, #32
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	f043 0201 	orr.w	r2, r3, #1
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	4b28      	ldr	r3, [pc, #160]	; (800185c <HAL_ADC_Init+0x1a8>)
 80017bc:	4013      	ands	r3, r2
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6812      	ldr	r2, [r2, #0]
 80017c2:	68b9      	ldr	r1, [r7, #8]
 80017c4:	430b      	orrs	r3, r1
 80017c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017d0:	d003      	beq.n	80017da <HAL_ADC_Init+0x126>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d104      	bne.n	80017e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	3b01      	subs	r3, #1
 80017e0:	051b      	lsls	r3, r3, #20
 80017e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	4b18      	ldr	r3, [pc, #96]	; (8001860 <HAL_ADC_Init+0x1ac>)
 8001800:	4013      	ands	r3, r2
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	429a      	cmp	r2, r3
 8001806:	d10b      	bne.n	8001820 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001812:	f023 0303 	bic.w	r3, r3, #3
 8001816:	f043 0201 	orr.w	r2, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800181e:	e018      	b.n	8001852 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001824:	f023 0312 	bic.w	r3, r3, #18
 8001828:	f043 0210 	orr.w	r2, r3, #16
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	f043 0201 	orr.w	r2, r3, #1
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001840:	e007      	b.n	8001852 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001846:	f043 0210 	orr.w	r2, r3, #16
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001852:	7dfb      	ldrb	r3, [r7, #23]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	ffe1f7fd 	.word	0xffe1f7fd
 8001860:	ff1f0efe 	.word	0xff1f0efe

08001864 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001872:	2300      	movs	r3, #0
 8001874:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800187c:	2b01      	cmp	r3, #1
 800187e:	d101      	bne.n	8001884 <HAL_ADC_ConfigChannel+0x20>
 8001880:	2302      	movs	r3, #2
 8001882:	e0dc      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1da>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b06      	cmp	r3, #6
 8001892:	d81c      	bhi.n	80018ce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	3b05      	subs	r3, #5
 80018a6:	221f      	movs	r2, #31
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	4019      	ands	r1, r3
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	3b05      	subs	r3, #5
 80018c0:	fa00 f203 	lsl.w	r2, r0, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	635a      	str	r2, [r3, #52]	; 0x34
 80018cc:	e03c      	b.n	8001948 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b0c      	cmp	r3, #12
 80018d4:	d81c      	bhi.n	8001910 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	3b23      	subs	r3, #35	; 0x23
 80018e8:	221f      	movs	r2, #31
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	4019      	ands	r1, r3
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	6818      	ldr	r0, [r3, #0]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	3b23      	subs	r3, #35	; 0x23
 8001902:	fa00 f203 	lsl.w	r2, r0, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	631a      	str	r2, [r3, #48]	; 0x30
 800190e:	e01b      	b.n	8001948 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	3b41      	subs	r3, #65	; 0x41
 8001922:	221f      	movs	r2, #31
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	4019      	ands	r1, r3
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	6818      	ldr	r0, [r3, #0]
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	3b41      	subs	r3, #65	; 0x41
 800193c:	fa00 f203 	lsl.w	r2, r0, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	430a      	orrs	r2, r1
 8001946:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b09      	cmp	r3, #9
 800194e:	d91c      	bls.n	800198a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68d9      	ldr	r1, [r3, #12]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4613      	mov	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4413      	add	r3, r2
 8001960:	3b1e      	subs	r3, #30
 8001962:	2207      	movs	r2, #7
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	4019      	ands	r1, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	6898      	ldr	r0, [r3, #8]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	3b1e      	subs	r3, #30
 800197c:	fa00 f203 	lsl.w	r2, r0, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	60da      	str	r2, [r3, #12]
 8001988:	e019      	b.n	80019be <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6919      	ldr	r1, [r3, #16]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4613      	mov	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4413      	add	r3, r2
 800199a:	2207      	movs	r2, #7
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	4019      	ands	r1, r3
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	6898      	ldr	r0, [r3, #8]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4613      	mov	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	fa00 f203 	lsl.w	r2, r0, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b10      	cmp	r3, #16
 80019c4:	d003      	beq.n	80019ce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019ca:	2b11      	cmp	r3, #17
 80019cc:	d132      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a1d      	ldr	r2, [pc, #116]	; (8001a48 <HAL_ADC_ConfigChannel+0x1e4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d125      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d126      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80019f4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b10      	cmp	r3, #16
 80019fc:	d11a      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <HAL_ADC_ConfigChannel+0x1e8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a13      	ldr	r2, [pc, #76]	; (8001a50 <HAL_ADC_ConfigChannel+0x1ec>)
 8001a04:	fba2 2303 	umull	r2, r3, r2, r3
 8001a08:	0c9a      	lsrs	r2, r3, #18
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a14:	e002      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f9      	bne.n	8001a16 <HAL_ADC_ConfigChannel+0x1b2>
 8001a22:	e007      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	f043 0220 	orr.w	r2, r3, #32
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	40012400 	.word	0x40012400
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	431bde83 	.word	0x431bde83

08001a54 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d127      	bne.n	8001abe <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0201 	bic.w	r2, r2, #1
 8001a7c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a7e:	f7ff fe0f 	bl	80016a0 <HAL_GetTick>
 8001a82:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a84:	e014      	b.n	8001ab0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a86:	f7ff fe0b 	bl	80016a0 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d90d      	bls.n	8001ab0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a98:	f043 0210 	orr.w	r2, r3, #16
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	f043 0201 	orr.w	r2, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e007      	b.n	8001ac0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d0e3      	beq.n	8001a86 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <__NVIC_SetPriorityGrouping>:
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afa:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	60d3      	str	r3, [r2, #12]
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_GetPriorityGrouping>:
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <__NVIC_GetPriorityGrouping+0x18>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	0a1b      	lsrs	r3, r3, #8
 8001b1a:	f003 0307 	and.w	r3, r3, #7
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_EnableIRQ>:
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	db0b      	blt.n	8001b56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	f003 021f 	and.w	r2, r3, #31
 8001b44:	4906      	ldr	r1, [pc, #24]	; (8001b60 <__NVIC_EnableIRQ+0x34>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	095b      	lsrs	r3, r3, #5
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	e000e100 	.word	0xe000e100

08001b64 <__NVIC_SetPriority>:
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	6039      	str	r1, [r7, #0]
 8001b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	db0a      	blt.n	8001b8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	490c      	ldr	r1, [pc, #48]	; (8001bb0 <__NVIC_SetPriority+0x4c>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	0112      	lsls	r2, r2, #4
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	440b      	add	r3, r1
 8001b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b8c:	e00a      	b.n	8001ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4908      	ldr	r1, [pc, #32]	; (8001bb4 <__NVIC_SetPriority+0x50>)
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	3b04      	subs	r3, #4
 8001b9c:	0112      	lsls	r2, r2, #4
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	761a      	strb	r2, [r3, #24]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000e100 	.word	0xe000e100
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <NVIC_EncodePriority>:
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	; 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f1c3 0307 	rsb	r3, r3, #7
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	bf28      	it	cs
 8001bd6:	2304      	movcs	r3, #4
 8001bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	2b06      	cmp	r3, #6
 8001be0:	d902      	bls.n	8001be8 <NVIC_EncodePriority+0x30>
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3b03      	subs	r3, #3
 8001be6:	e000      	b.n	8001bea <NVIC_EncodePriority+0x32>
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	43d9      	mvns	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	4313      	orrs	r3, r2
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ff4f 	bl	8001ac8 <__NVIC_SetPriorityGrouping>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b086      	sub	sp, #24
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
 8001c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c44:	f7ff ff64 	bl	8001b10 <__NVIC_GetPriorityGrouping>
 8001c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	6978      	ldr	r0, [r7, #20]
 8001c50:	f7ff ffb2 	bl	8001bb8 <NVIC_EncodePriority>
 8001c54:	4602      	mov	r2, r0
 8001c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff81 	bl	8001b64 <__NVIC_SetPriority>
}
 8001c62:	bf00      	nop
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	4603      	mov	r3, r0
 8001c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff57 	bl	8001b2c <__NVIC_EnableIRQ>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e043      	b.n	8001d26 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <HAL_DMA_Init+0xa8>)
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a22      	ldr	r2, [pc, #136]	; (8001d34 <HAL_DMA_Init+0xac>)
 8001caa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	009a      	lsls	r2, r3, #2
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a1f      	ldr	r2, [pc, #124]	; (8001d38 <HAL_DMA_Init+0xb0>)
 8001cba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001cd2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001cd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	bffdfff8 	.word	0xbffdfff8
 8001d34:	cccccccd 	.word	0xcccccccd
 8001d38:	40020000 	.word	0x40020000

08001d3c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	2204      	movs	r2, #4
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d04f      	beq.n	8001e04 <HAL_DMA_IRQHandler+0xc8>
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d04a      	beq.n	8001e04 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0320 	and.w	r3, r3, #32
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d107      	bne.n	8001d8c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0204 	bic.w	r2, r2, #4
 8001d8a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a66      	ldr	r2, [pc, #408]	; (8001f2c <HAL_DMA_IRQHandler+0x1f0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d029      	beq.n	8001dea <HAL_DMA_IRQHandler+0xae>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a65      	ldr	r2, [pc, #404]	; (8001f30 <HAL_DMA_IRQHandler+0x1f4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d022      	beq.n	8001de6 <HAL_DMA_IRQHandler+0xaa>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a63      	ldr	r2, [pc, #396]	; (8001f34 <HAL_DMA_IRQHandler+0x1f8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d01a      	beq.n	8001de0 <HAL_DMA_IRQHandler+0xa4>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a62      	ldr	r2, [pc, #392]	; (8001f38 <HAL_DMA_IRQHandler+0x1fc>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d012      	beq.n	8001dda <HAL_DMA_IRQHandler+0x9e>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a60      	ldr	r2, [pc, #384]	; (8001f3c <HAL_DMA_IRQHandler+0x200>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d00a      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0x98>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a5f      	ldr	r2, [pc, #380]	; (8001f40 <HAL_DMA_IRQHandler+0x204>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d102      	bne.n	8001dce <HAL_DMA_IRQHandler+0x92>
 8001dc8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dcc:	e00e      	b.n	8001dec <HAL_DMA_IRQHandler+0xb0>
 8001dce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001dd2:	e00b      	b.n	8001dec <HAL_DMA_IRQHandler+0xb0>
 8001dd4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001dd8:	e008      	b.n	8001dec <HAL_DMA_IRQHandler+0xb0>
 8001dda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dde:	e005      	b.n	8001dec <HAL_DMA_IRQHandler+0xb0>
 8001de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001de4:	e002      	b.n	8001dec <HAL_DMA_IRQHandler+0xb0>
 8001de6:	2340      	movs	r3, #64	; 0x40
 8001de8:	e000      	b.n	8001dec <HAL_DMA_IRQHandler+0xb0>
 8001dea:	2304      	movs	r3, #4
 8001dec:	4a55      	ldr	r2, [pc, #340]	; (8001f44 <HAL_DMA_IRQHandler+0x208>)
 8001dee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 8094 	beq.w	8001f22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001e02:	e08e      	b.n	8001f22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	2202      	movs	r2, #2
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d056      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x186>
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d051      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0320 	and.w	r3, r3, #32
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10b      	bne.n	8001e44 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 020a 	bic.w	r2, r2, #10
 8001e3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a38      	ldr	r2, [pc, #224]	; (8001f2c <HAL_DMA_IRQHandler+0x1f0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d029      	beq.n	8001ea2 <HAL_DMA_IRQHandler+0x166>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a37      	ldr	r2, [pc, #220]	; (8001f30 <HAL_DMA_IRQHandler+0x1f4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d022      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x162>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a35      	ldr	r2, [pc, #212]	; (8001f34 <HAL_DMA_IRQHandler+0x1f8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01a      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x15c>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a34      	ldr	r2, [pc, #208]	; (8001f38 <HAL_DMA_IRQHandler+0x1fc>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d012      	beq.n	8001e92 <HAL_DMA_IRQHandler+0x156>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a32      	ldr	r2, [pc, #200]	; (8001f3c <HAL_DMA_IRQHandler+0x200>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d00a      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x150>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a31      	ldr	r2, [pc, #196]	; (8001f40 <HAL_DMA_IRQHandler+0x204>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d102      	bne.n	8001e86 <HAL_DMA_IRQHandler+0x14a>
 8001e80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e84:	e00e      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x168>
 8001e86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e8a:	e00b      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x168>
 8001e8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e90:	e008      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x168>
 8001e92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e96:	e005      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x168>
 8001e98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e9c:	e002      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x168>
 8001e9e:	2320      	movs	r3, #32
 8001ea0:	e000      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x168>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	4a27      	ldr	r2, [pc, #156]	; (8001f44 <HAL_DMA_IRQHandler+0x208>)
 8001ea6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d034      	beq.n	8001f22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ec0:	e02f      	b.n	8001f22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	2208      	movs	r2, #8
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d028      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x1e8>
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d023      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 020e 	bic.w	r2, r2, #14
 8001eea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8001efa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d004      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	4798      	blx	r3
    }
  }
  return;
 8001f22:	bf00      	nop
 8001f24:	bf00      	nop
}
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40020008 	.word	0x40020008
 8001f30:	4002001c 	.word	0x4002001c
 8001f34:	40020030 	.word	0x40020030
 8001f38:	40020044 	.word	0x40020044
 8001f3c:	40020058 	.word	0x40020058
 8001f40:	4002006c 	.word	0x4002006c
 8001f44:	40020000 	.word	0x40020000

08001f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b08b      	sub	sp, #44	; 0x2c
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f52:	2300      	movs	r3, #0
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f5a:	e127      	b.n	80021ac <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	f040 8116 	bne.w	80021a6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b12      	cmp	r3, #18
 8001f80:	d034      	beq.n	8001fec <HAL_GPIO_Init+0xa4>
 8001f82:	2b12      	cmp	r3, #18
 8001f84:	d80d      	bhi.n	8001fa2 <HAL_GPIO_Init+0x5a>
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d02b      	beq.n	8001fe2 <HAL_GPIO_Init+0x9a>
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d804      	bhi.n	8001f98 <HAL_GPIO_Init+0x50>
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d031      	beq.n	8001ff6 <HAL_GPIO_Init+0xae>
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d01c      	beq.n	8001fd0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f96:	e048      	b.n	800202a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d043      	beq.n	8002024 <HAL_GPIO_Init+0xdc>
 8001f9c:	2b11      	cmp	r3, #17
 8001f9e:	d01b      	beq.n	8001fd8 <HAL_GPIO_Init+0x90>
          break;
 8001fa0:	e043      	b.n	800202a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001fa2:	4a89      	ldr	r2, [pc, #548]	; (80021c8 <HAL_GPIO_Init+0x280>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d026      	beq.n	8001ff6 <HAL_GPIO_Init+0xae>
 8001fa8:	4a87      	ldr	r2, [pc, #540]	; (80021c8 <HAL_GPIO_Init+0x280>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d806      	bhi.n	8001fbc <HAL_GPIO_Init+0x74>
 8001fae:	4a87      	ldr	r2, [pc, #540]	; (80021cc <HAL_GPIO_Init+0x284>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d020      	beq.n	8001ff6 <HAL_GPIO_Init+0xae>
 8001fb4:	4a86      	ldr	r2, [pc, #536]	; (80021d0 <HAL_GPIO_Init+0x288>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d01d      	beq.n	8001ff6 <HAL_GPIO_Init+0xae>
          break;
 8001fba:	e036      	b.n	800202a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001fbc:	4a85      	ldr	r2, [pc, #532]	; (80021d4 <HAL_GPIO_Init+0x28c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d019      	beq.n	8001ff6 <HAL_GPIO_Init+0xae>
 8001fc2:	4a85      	ldr	r2, [pc, #532]	; (80021d8 <HAL_GPIO_Init+0x290>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d016      	beq.n	8001ff6 <HAL_GPIO_Init+0xae>
 8001fc8:	4a84      	ldr	r2, [pc, #528]	; (80021dc <HAL_GPIO_Init+0x294>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d013      	beq.n	8001ff6 <HAL_GPIO_Init+0xae>
          break;
 8001fce:	e02c      	b.n	800202a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	623b      	str	r3, [r7, #32]
          break;
 8001fd6:	e028      	b.n	800202a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	623b      	str	r3, [r7, #32]
          break;
 8001fe0:	e023      	b.n	800202a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	3308      	adds	r3, #8
 8001fe8:	623b      	str	r3, [r7, #32]
          break;
 8001fea:	e01e      	b.n	800202a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	330c      	adds	r3, #12
 8001ff2:	623b      	str	r3, [r7, #32]
          break;
 8001ff4:	e019      	b.n	800202a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d102      	bne.n	8002004 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ffe:	2304      	movs	r3, #4
 8002000:	623b      	str	r3, [r7, #32]
          break;
 8002002:	e012      	b.n	800202a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d105      	bne.n	8002018 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800200c:	2308      	movs	r3, #8
 800200e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69fa      	ldr	r2, [r7, #28]
 8002014:	611a      	str	r2, [r3, #16]
          break;
 8002016:	e008      	b.n	800202a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002018:	2308      	movs	r3, #8
 800201a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	615a      	str	r2, [r3, #20]
          break;
 8002022:	e002      	b.n	800202a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002024:	2300      	movs	r3, #0
 8002026:	623b      	str	r3, [r7, #32]
          break;
 8002028:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	2bff      	cmp	r3, #255	; 0xff
 800202e:	d801      	bhi.n	8002034 <HAL_GPIO_Init+0xec>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	e001      	b.n	8002038 <HAL_GPIO_Init+0xf0>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3304      	adds	r3, #4
 8002038:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	2bff      	cmp	r3, #255	; 0xff
 800203e:	d802      	bhi.n	8002046 <HAL_GPIO_Init+0xfe>
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	e002      	b.n	800204c <HAL_GPIO_Init+0x104>
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	3b08      	subs	r3, #8
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	210f      	movs	r1, #15
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	401a      	ands	r2, r3
 800205e:	6a39      	ldr	r1, [r7, #32]
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	431a      	orrs	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 8096 	beq.w	80021a6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800207a:	4b59      	ldr	r3, [pc, #356]	; (80021e0 <HAL_GPIO_Init+0x298>)
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	4a58      	ldr	r2, [pc, #352]	; (80021e0 <HAL_GPIO_Init+0x298>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	6193      	str	r3, [r2, #24]
 8002086:	4b56      	ldr	r3, [pc, #344]	; (80021e0 <HAL_GPIO_Init+0x298>)
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002092:	4a54      	ldr	r2, [pc, #336]	; (80021e4 <HAL_GPIO_Init+0x29c>)
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	3302      	adds	r3, #2
 800209a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	220f      	movs	r2, #15
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4013      	ands	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a4b      	ldr	r2, [pc, #300]	; (80021e8 <HAL_GPIO_Init+0x2a0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d013      	beq.n	80020e6 <HAL_GPIO_Init+0x19e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a4a      	ldr	r2, [pc, #296]	; (80021ec <HAL_GPIO_Init+0x2a4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d00d      	beq.n	80020e2 <HAL_GPIO_Init+0x19a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a49      	ldr	r2, [pc, #292]	; (80021f0 <HAL_GPIO_Init+0x2a8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d007      	beq.n	80020de <HAL_GPIO_Init+0x196>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a48      	ldr	r2, [pc, #288]	; (80021f4 <HAL_GPIO_Init+0x2ac>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d101      	bne.n	80020da <HAL_GPIO_Init+0x192>
 80020d6:	2303      	movs	r3, #3
 80020d8:	e006      	b.n	80020e8 <HAL_GPIO_Init+0x1a0>
 80020da:	2304      	movs	r3, #4
 80020dc:	e004      	b.n	80020e8 <HAL_GPIO_Init+0x1a0>
 80020de:	2302      	movs	r3, #2
 80020e0:	e002      	b.n	80020e8 <HAL_GPIO_Init+0x1a0>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <HAL_GPIO_Init+0x1a0>
 80020e6:	2300      	movs	r3, #0
 80020e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ea:	f002 0203 	and.w	r2, r2, #3
 80020ee:	0092      	lsls	r2, r2, #2
 80020f0:	4093      	lsls	r3, r2
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020f8:	493a      	ldr	r1, [pc, #232]	; (80021e4 <HAL_GPIO_Init+0x29c>)
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	089b      	lsrs	r3, r3, #2
 80020fe:	3302      	adds	r3, #2
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d006      	beq.n	8002120 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002112:	4b39      	ldr	r3, [pc, #228]	; (80021f8 <HAL_GPIO_Init+0x2b0>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	4938      	ldr	r1, [pc, #224]	; (80021f8 <HAL_GPIO_Init+0x2b0>)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
 800211e:	e006      	b.n	800212e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002120:	4b35      	ldr	r3, [pc, #212]	; (80021f8 <HAL_GPIO_Init+0x2b0>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	43db      	mvns	r3, r3
 8002128:	4933      	ldr	r1, [pc, #204]	; (80021f8 <HAL_GPIO_Init+0x2b0>)
 800212a:	4013      	ands	r3, r2
 800212c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d006      	beq.n	8002148 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800213a:	4b2f      	ldr	r3, [pc, #188]	; (80021f8 <HAL_GPIO_Init+0x2b0>)
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	492e      	ldr	r1, [pc, #184]	; (80021f8 <HAL_GPIO_Init+0x2b0>)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	604b      	str	r3, [r1, #4]
 8002146:	e006      	b.n	8002156 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002148:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <HAL_GPIO_Init+0x2b0>)
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	43db      	mvns	r3, r3
 8002150:	4929      	ldr	r1, [pc, #164]	; (80021f8 <HAL_GPIO_Init+0x2b0>)
 8002152:	4013      	ands	r3, r2
 8002154:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d006      	beq.n	8002170 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002162:	4b25      	ldr	r3, [pc, #148]	; (80021f8 <HAL_GPIO_Init+0x2b0>)
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	4924      	ldr	r1, [pc, #144]	; (80021f8 <HAL_GPIO_Init+0x2b0>)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	608b      	str	r3, [r1, #8]
 800216e:	e006      	b.n	800217e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002170:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <HAL_GPIO_Init+0x2b0>)
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	43db      	mvns	r3, r3
 8002178:	491f      	ldr	r1, [pc, #124]	; (80021f8 <HAL_GPIO_Init+0x2b0>)
 800217a:	4013      	ands	r3, r2
 800217c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d006      	beq.n	8002198 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800218a:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <HAL_GPIO_Init+0x2b0>)
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	491a      	ldr	r1, [pc, #104]	; (80021f8 <HAL_GPIO_Init+0x2b0>)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	4313      	orrs	r3, r2
 8002194:	60cb      	str	r3, [r1, #12]
 8002196:	e006      	b.n	80021a6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002198:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <HAL_GPIO_Init+0x2b0>)
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	43db      	mvns	r3, r3
 80021a0:	4915      	ldr	r1, [pc, #84]	; (80021f8 <HAL_GPIO_Init+0x2b0>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	3301      	adds	r3, #1
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	fa22 f303 	lsr.w	r3, r2, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f47f aed0 	bne.w	8001f5c <HAL_GPIO_Init+0x14>
  }
}
 80021bc:	bf00      	nop
 80021be:	372c      	adds	r7, #44	; 0x2c
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	10210000 	.word	0x10210000
 80021cc:	10110000 	.word	0x10110000
 80021d0:	10120000 	.word	0x10120000
 80021d4:	10310000 	.word	0x10310000
 80021d8:	10320000 	.word	0x10320000
 80021dc:	10220000 	.word	0x10220000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40010000 	.word	0x40010000
 80021e8:	40010800 	.word	0x40010800
 80021ec:	40010c00 	.word	0x40010c00
 80021f0:	40011000 	.word	0x40011000
 80021f4:	40011400 	.word	0x40011400
 80021f8:	40010400 	.word	0x40010400

080021fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	887b      	ldrh	r3, [r7, #2]
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002214:	2301      	movs	r3, #1
 8002216:	73fb      	strb	r3, [r7, #15]
 8002218:	e001      	b.n	800221e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800221e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	460b      	mov	r3, r1
 8002234:	807b      	strh	r3, [r7, #2]
 8002236:	4613      	mov	r3, r2
 8002238:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800223a:	787b      	ldrb	r3, [r7, #1]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002240:	887a      	ldrh	r2, [r7, #2]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002246:	e003      	b.n	8002250 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002248:	887b      	ldrh	r3, [r7, #2]
 800224a:	041a      	lsls	r2, r3, #16
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	611a      	str	r2, [r3, #16]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr
	...

0800225c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002266:	4b08      	ldr	r3, [pc, #32]	; (8002288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002268:	695a      	ldr	r2, [r3, #20]
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d006      	beq.n	8002280 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002272:	4a05      	ldr	r2, [pc, #20]	; (8002288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002278:	88fb      	ldrh	r3, [r7, #6]
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe f84e 	bl	800031c <HAL_GPIO_EXTI_Callback>
  }
}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40010400 	.word	0x40010400

0800228c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e11f      	b.n	80024de <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d106      	bne.n	80022b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7fe feec 	bl	8001090 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2224      	movs	r2, #36	; 0x24
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0201 	bic.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022f0:	f000 fcda 	bl	8002ca8 <HAL_RCC_GetPCLK1Freq>
 80022f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4a7b      	ldr	r2, [pc, #492]	; (80024e8 <HAL_I2C_Init+0x25c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d807      	bhi.n	8002310 <HAL_I2C_Init+0x84>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4a7a      	ldr	r2, [pc, #488]	; (80024ec <HAL_I2C_Init+0x260>)
 8002304:	4293      	cmp	r3, r2
 8002306:	bf94      	ite	ls
 8002308:	2301      	movls	r3, #1
 800230a:	2300      	movhi	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	e006      	b.n	800231e <HAL_I2C_Init+0x92>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4a77      	ldr	r2, [pc, #476]	; (80024f0 <HAL_I2C_Init+0x264>)
 8002314:	4293      	cmp	r3, r2
 8002316:	bf94      	ite	ls
 8002318:	2301      	movls	r3, #1
 800231a:	2300      	movhi	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e0db      	b.n	80024de <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4a72      	ldr	r2, [pc, #456]	; (80024f4 <HAL_I2C_Init+0x268>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	0c9b      	lsrs	r3, r3, #18
 8002330:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	430a      	orrs	r2, r1
 8002344:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	4a64      	ldr	r2, [pc, #400]	; (80024e8 <HAL_I2C_Init+0x25c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d802      	bhi.n	8002360 <HAL_I2C_Init+0xd4>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	3301      	adds	r3, #1
 800235e:	e009      	b.n	8002374 <HAL_I2C_Init+0xe8>
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002366:	fb02 f303 	mul.w	r3, r2, r3
 800236a:	4a63      	ldr	r2, [pc, #396]	; (80024f8 <HAL_I2C_Init+0x26c>)
 800236c:	fba2 2303 	umull	r2, r3, r2, r3
 8002370:	099b      	lsrs	r3, r3, #6
 8002372:	3301      	adds	r3, #1
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	430b      	orrs	r3, r1
 800237a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002386:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4956      	ldr	r1, [pc, #344]	; (80024e8 <HAL_I2C_Init+0x25c>)
 8002390:	428b      	cmp	r3, r1
 8002392:	d80d      	bhi.n	80023b0 <HAL_I2C_Init+0x124>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	1e59      	subs	r1, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	fbb1 f3f3 	udiv	r3, r1, r3
 80023a2:	3301      	adds	r3, #1
 80023a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	bf38      	it	cc
 80023ac:	2304      	movcc	r3, #4
 80023ae:	e04f      	b.n	8002450 <HAL_I2C_Init+0x1c4>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d111      	bne.n	80023dc <HAL_I2C_Init+0x150>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1e58      	subs	r0, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6859      	ldr	r1, [r3, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	440b      	add	r3, r1
 80023c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ca:	3301      	adds	r3, #1
 80023cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	bf0c      	ite	eq
 80023d4:	2301      	moveq	r3, #1
 80023d6:	2300      	movne	r3, #0
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	e012      	b.n	8002402 <HAL_I2C_Init+0x176>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	1e58      	subs	r0, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	0099      	lsls	r1, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f2:	3301      	adds	r3, #1
 80023f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf0c      	ite	eq
 80023fc:	2301      	moveq	r3, #1
 80023fe:	2300      	movne	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_I2C_Init+0x17e>
 8002406:	2301      	movs	r3, #1
 8002408:	e022      	b.n	8002450 <HAL_I2C_Init+0x1c4>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10e      	bne.n	8002430 <HAL_I2C_Init+0x1a4>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1e58      	subs	r0, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6859      	ldr	r1, [r3, #4]
 800241a:	460b      	mov	r3, r1
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	440b      	add	r3, r1
 8002420:	fbb0 f3f3 	udiv	r3, r0, r3
 8002424:	3301      	adds	r3, #1
 8002426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800242a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800242e:	e00f      	b.n	8002450 <HAL_I2C_Init+0x1c4>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1e58      	subs	r0, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6859      	ldr	r1, [r3, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	0099      	lsls	r1, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	fbb0 f3f3 	udiv	r3, r0, r3
 8002446:	3301      	adds	r3, #1
 8002448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800244c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	6809      	ldr	r1, [r1, #0]
 8002454:	4313      	orrs	r3, r2
 8002456:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69da      	ldr	r2, [r3, #28]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800247e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6911      	ldr	r1, [r2, #16]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68d2      	ldr	r2, [r2, #12]
 800248a:	4311      	orrs	r1, r2
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	430b      	orrs	r3, r1
 8002492:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695a      	ldr	r2, [r3, #20]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2220      	movs	r2, #32
 80024ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	000186a0 	.word	0x000186a0
 80024ec:	001e847f 	.word	0x001e847f
 80024f0:	003d08ff 	.word	0x003d08ff
 80024f4:	431bde83 	.word	0x431bde83
 80024f8:	10624dd3 	.word	0x10624dd3

080024fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e26c      	b.n	80029e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 8087 	beq.w	800262a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800251c:	4b92      	ldr	r3, [pc, #584]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 030c 	and.w	r3, r3, #12
 8002524:	2b04      	cmp	r3, #4
 8002526:	d00c      	beq.n	8002542 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002528:	4b8f      	ldr	r3, [pc, #572]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 030c 	and.w	r3, r3, #12
 8002530:	2b08      	cmp	r3, #8
 8002532:	d112      	bne.n	800255a <HAL_RCC_OscConfig+0x5e>
 8002534:	4b8c      	ldr	r3, [pc, #560]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002540:	d10b      	bne.n	800255a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002542:	4b89      	ldr	r3, [pc, #548]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d06c      	beq.n	8002628 <HAL_RCC_OscConfig+0x12c>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d168      	bne.n	8002628 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e246      	b.n	80029e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002562:	d106      	bne.n	8002572 <HAL_RCC_OscConfig+0x76>
 8002564:	4b80      	ldr	r3, [pc, #512]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a7f      	ldr	r2, [pc, #508]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 800256a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	e02e      	b.n	80025d0 <HAL_RCC_OscConfig+0xd4>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10c      	bne.n	8002594 <HAL_RCC_OscConfig+0x98>
 800257a:	4b7b      	ldr	r3, [pc, #492]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a7a      	ldr	r2, [pc, #488]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 8002580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	4b78      	ldr	r3, [pc, #480]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a77      	ldr	r2, [pc, #476]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 800258c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e01d      	b.n	80025d0 <HAL_RCC_OscConfig+0xd4>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0xbc>
 800259e:	4b72      	ldr	r3, [pc, #456]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a71      	ldr	r2, [pc, #452]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b6f      	ldr	r3, [pc, #444]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a6e      	ldr	r2, [pc, #440]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e00b      	b.n	80025d0 <HAL_RCC_OscConfig+0xd4>
 80025b8:	4b6b      	ldr	r3, [pc, #428]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a6a      	ldr	r2, [pc, #424]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 80025be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b68      	ldr	r3, [pc, #416]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a67      	ldr	r2, [pc, #412]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d013      	beq.n	8002600 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7ff f862 	bl	80016a0 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e0:	f7ff f85e 	bl	80016a0 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	; 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e1fa      	b.n	80029e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f2:	4b5d      	ldr	r3, [pc, #372]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0xe4>
 80025fe:	e014      	b.n	800262a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7ff f84e 	bl	80016a0 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002608:	f7ff f84a 	bl	80016a0 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b64      	cmp	r3, #100	; 0x64
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e1e6      	b.n	80029e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261a:	4b53      	ldr	r3, [pc, #332]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x10c>
 8002626:	e000      	b.n	800262a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d063      	beq.n	80026fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002636:	4b4c      	ldr	r3, [pc, #304]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00b      	beq.n	800265a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002642:	4b49      	ldr	r3, [pc, #292]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b08      	cmp	r3, #8
 800264c:	d11c      	bne.n	8002688 <HAL_RCC_OscConfig+0x18c>
 800264e:	4b46      	ldr	r3, [pc, #280]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d116      	bne.n	8002688 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265a:	4b43      	ldr	r3, [pc, #268]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <HAL_RCC_OscConfig+0x176>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d001      	beq.n	8002672 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e1ba      	b.n	80029e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002672:	4b3d      	ldr	r3, [pc, #244]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4939      	ldr	r1, [pc, #228]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002686:	e03a      	b.n	80026fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d020      	beq.n	80026d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002690:	4b36      	ldr	r3, [pc, #216]	; (800276c <HAL_RCC_OscConfig+0x270>)
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002696:	f7ff f803 	bl	80016a0 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800269e:	f7fe ffff 	bl	80016a0 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e19b      	b.n	80029e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b0:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026bc:	4b2a      	ldr	r3, [pc, #168]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4927      	ldr	r1, [pc, #156]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	600b      	str	r3, [r1, #0]
 80026d0:	e015      	b.n	80026fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d2:	4b26      	ldr	r3, [pc, #152]	; (800276c <HAL_RCC_OscConfig+0x270>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7fe ffe2 	bl	80016a0 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e0:	f7fe ffde 	bl	80016a0 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e17a      	b.n	80029e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f2:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d03a      	beq.n	8002780 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d019      	beq.n	8002746 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002712:	4b17      	ldr	r3, [pc, #92]	; (8002770 <HAL_RCC_OscConfig+0x274>)
 8002714:	2201      	movs	r2, #1
 8002716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002718:	f7fe ffc2 	bl	80016a0 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002720:	f7fe ffbe 	bl	80016a0 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e15a      	b.n	80029e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002732:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <HAL_RCC_OscConfig+0x26c>)
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800273e:	2001      	movs	r0, #1
 8002740:	f000 fb0a 	bl	8002d58 <RCC_Delay>
 8002744:	e01c      	b.n	8002780 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <HAL_RCC_OscConfig+0x274>)
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274c:	f7fe ffa8 	bl	80016a0 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002752:	e00f      	b.n	8002774 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002754:	f7fe ffa4 	bl	80016a0 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d908      	bls.n	8002774 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e140      	b.n	80029e8 <HAL_RCC_OscConfig+0x4ec>
 8002766:	bf00      	nop
 8002768:	40021000 	.word	0x40021000
 800276c:	42420000 	.word	0x42420000
 8002770:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002774:	4b9e      	ldr	r3, [pc, #632]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1e9      	bne.n	8002754 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80a6 	beq.w	80028da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800278e:	2300      	movs	r3, #0
 8002790:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002792:	4b97      	ldr	r3, [pc, #604]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10d      	bne.n	80027ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800279e:	4b94      	ldr	r3, [pc, #592]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	4a93      	ldr	r2, [pc, #588]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 80027a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a8:	61d3      	str	r3, [r2, #28]
 80027aa:	4b91      	ldr	r3, [pc, #580]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b6:	2301      	movs	r3, #1
 80027b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ba:	4b8e      	ldr	r3, [pc, #568]	; (80029f4 <HAL_RCC_OscConfig+0x4f8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d118      	bne.n	80027f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027c6:	4b8b      	ldr	r3, [pc, #556]	; (80029f4 <HAL_RCC_OscConfig+0x4f8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a8a      	ldr	r2, [pc, #552]	; (80029f4 <HAL_RCC_OscConfig+0x4f8>)
 80027cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027d2:	f7fe ff65 	bl	80016a0 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027da:	f7fe ff61 	bl	80016a0 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b64      	cmp	r3, #100	; 0x64
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e0fd      	b.n	80029e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ec:	4b81      	ldr	r3, [pc, #516]	; (80029f4 <HAL_RCC_OscConfig+0x4f8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f0      	beq.n	80027da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d106      	bne.n	800280e <HAL_RCC_OscConfig+0x312>
 8002800:	4b7b      	ldr	r3, [pc, #492]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	4a7a      	ldr	r2, [pc, #488]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	6213      	str	r3, [r2, #32]
 800280c:	e02d      	b.n	800286a <HAL_RCC_OscConfig+0x36e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10c      	bne.n	8002830 <HAL_RCC_OscConfig+0x334>
 8002816:	4b76      	ldr	r3, [pc, #472]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	4a75      	ldr	r2, [pc, #468]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 800281c:	f023 0301 	bic.w	r3, r3, #1
 8002820:	6213      	str	r3, [r2, #32]
 8002822:	4b73      	ldr	r3, [pc, #460]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	4a72      	ldr	r2, [pc, #456]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 8002828:	f023 0304 	bic.w	r3, r3, #4
 800282c:	6213      	str	r3, [r2, #32]
 800282e:	e01c      	b.n	800286a <HAL_RCC_OscConfig+0x36e>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	2b05      	cmp	r3, #5
 8002836:	d10c      	bne.n	8002852 <HAL_RCC_OscConfig+0x356>
 8002838:	4b6d      	ldr	r3, [pc, #436]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	4a6c      	ldr	r2, [pc, #432]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 800283e:	f043 0304 	orr.w	r3, r3, #4
 8002842:	6213      	str	r3, [r2, #32]
 8002844:	4b6a      	ldr	r3, [pc, #424]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	4a69      	ldr	r2, [pc, #420]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	6213      	str	r3, [r2, #32]
 8002850:	e00b      	b.n	800286a <HAL_RCC_OscConfig+0x36e>
 8002852:	4b67      	ldr	r3, [pc, #412]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	4a66      	ldr	r2, [pc, #408]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 8002858:	f023 0301 	bic.w	r3, r3, #1
 800285c:	6213      	str	r3, [r2, #32]
 800285e:	4b64      	ldr	r3, [pc, #400]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	4a63      	ldr	r2, [pc, #396]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 8002864:	f023 0304 	bic.w	r3, r3, #4
 8002868:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d015      	beq.n	800289e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002872:	f7fe ff15 	bl	80016a0 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002878:	e00a      	b.n	8002890 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287a:	f7fe ff11 	bl	80016a0 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	f241 3288 	movw	r2, #5000	; 0x1388
 8002888:	4293      	cmp	r3, r2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e0ab      	b.n	80029e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002890:	4b57      	ldr	r3, [pc, #348]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0ee      	beq.n	800287a <HAL_RCC_OscConfig+0x37e>
 800289c:	e014      	b.n	80028c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800289e:	f7fe feff 	bl	80016a0 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a4:	e00a      	b.n	80028bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a6:	f7fe fefb 	bl	80016a0 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e095      	b.n	80029e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028bc:	4b4c      	ldr	r3, [pc, #304]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1ee      	bne.n	80028a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028c8:	7dfb      	ldrb	r3, [r7, #23]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d105      	bne.n	80028da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ce:	4b48      	ldr	r3, [pc, #288]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	4a47      	ldr	r2, [pc, #284]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 80028d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 8081 	beq.w	80029e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028e4:	4b42      	ldr	r3, [pc, #264]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 030c 	and.w	r3, r3, #12
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d061      	beq.n	80029b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d146      	bne.n	8002986 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f8:	4b3f      	ldr	r3, [pc, #252]	; (80029f8 <HAL_RCC_OscConfig+0x4fc>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fe:	f7fe fecf 	bl	80016a0 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002906:	f7fe fecb 	bl	80016a0 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e067      	b.n	80029e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002918:	4b35      	ldr	r3, [pc, #212]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1f0      	bne.n	8002906 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800292c:	d108      	bne.n	8002940 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800292e:	4b30      	ldr	r3, [pc, #192]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	492d      	ldr	r1, [pc, #180]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002940:	4b2b      	ldr	r3, [pc, #172]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a19      	ldr	r1, [r3, #32]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	430b      	orrs	r3, r1
 8002952:	4927      	ldr	r1, [pc, #156]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002958:	4b27      	ldr	r3, [pc, #156]	; (80029f8 <HAL_RCC_OscConfig+0x4fc>)
 800295a:	2201      	movs	r2, #1
 800295c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295e:	f7fe fe9f 	bl	80016a0 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002966:	f7fe fe9b 	bl	80016a0 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e037      	b.n	80029e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002978:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0f0      	beq.n	8002966 <HAL_RCC_OscConfig+0x46a>
 8002984:	e02f      	b.n	80029e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002986:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <HAL_RCC_OscConfig+0x4fc>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fe fe88 	bl	80016a0 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002994:	f7fe fe84 	bl	80016a0 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e020      	b.n	80029e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a6:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x498>
 80029b2:	e018      	b.n	80029e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e013      	b.n	80029e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_RCC_OscConfig+0x4f4>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d106      	bne.n	80029e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029de:	429a      	cmp	r2, r3
 80029e0:	d001      	beq.n	80029e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40007000 	.word	0x40007000
 80029f8:	42420060 	.word	0x42420060

080029fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0d0      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a10:	4b6a      	ldr	r3, [pc, #424]	; (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d910      	bls.n	8002a40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	4b67      	ldr	r3, [pc, #412]	; (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 0207 	bic.w	r2, r3, #7
 8002a26:	4965      	ldr	r1, [pc, #404]	; (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	4b63      	ldr	r3, [pc, #396]	; (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0b8      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d020      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a58:	4b59      	ldr	r3, [pc, #356]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	4a58      	ldr	r2, [pc, #352]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a70:	4b53      	ldr	r3, [pc, #332]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4a52      	ldr	r2, [pc, #328]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a7c:	4b50      	ldr	r3, [pc, #320]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	494d      	ldr	r1, [pc, #308]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d040      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa2:	4b47      	ldr	r3, [pc, #284]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d115      	bne.n	8002ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e07f      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d107      	bne.n	8002aca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aba:	4b41      	ldr	r3, [pc, #260]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d109      	bne.n	8002ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e073      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aca:	4b3d      	ldr	r3, [pc, #244]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e06b      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ada:	4b39      	ldr	r3, [pc, #228]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f023 0203 	bic.w	r2, r3, #3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4936      	ldr	r1, [pc, #216]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aec:	f7fe fdd8 	bl	80016a0 <HAL_GetTick>
 8002af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af4:	f7fe fdd4 	bl	80016a0 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e053      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0a:	4b2d      	ldr	r3, [pc, #180]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 020c 	and.w	r2, r3, #12
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d1eb      	bne.n	8002af4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b27      	ldr	r3, [pc, #156]	; (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d210      	bcs.n	8002b4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2a:	4b24      	ldr	r3, [pc, #144]	; (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 0207 	bic.w	r2, r3, #7
 8002b32:	4922      	ldr	r1, [pc, #136]	; (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3a:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e032      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b58:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4916      	ldr	r1, [pc, #88]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d009      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b76:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	490e      	ldr	r1, [pc, #56]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b8a:	f000 f821 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 8002b8e:	4601      	mov	r1, r0
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b9c:	5cd3      	ldrb	r3, [r2, r3]
 8002b9e:	fa21 f303 	lsr.w	r3, r1, r3
 8002ba2:	4a09      	ldr	r2, [pc, #36]	; (8002bc8 <HAL_RCC_ClockConfig+0x1cc>)
 8002ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <HAL_RCC_ClockConfig+0x1d0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe fc04 	bl	80013b8 <HAL_InitTick>

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40022000 	.word	0x40022000
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	0800864c 	.word	0x0800864c
 8002bc8:	20000000 	.word	0x20000000
 8002bcc:	20000004 	.word	0x20000004

08002bd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd0:	b490      	push	{r4, r7}
 8002bd2:	b08a      	sub	sp, #40	; 0x28
 8002bd4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bd6:	4b2a      	ldr	r3, [pc, #168]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bd8:	1d3c      	adds	r4, r7, #4
 8002bda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002be0:	4b28      	ldr	r3, [pc, #160]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bfa:	4b23      	ldr	r3, [pc, #140]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d002      	beq.n	8002c10 <HAL_RCC_GetSysClockFreq+0x40>
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d003      	beq.n	8002c16 <HAL_RCC_GetSysClockFreq+0x46>
 8002c0e:	e02d      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c10:	4b1e      	ldr	r3, [pc, #120]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c12:	623b      	str	r3, [r7, #32]
      break;
 8002c14:	e02d      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	0c9b      	lsrs	r3, r3, #18
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c22:	4413      	add	r3, r2
 8002c24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c28:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d013      	beq.n	8002c5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c34:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	0c5b      	lsrs	r3, r3, #17
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c42:	4413      	add	r3, r2
 8002c44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	4a0f      	ldr	r2, [pc, #60]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c4e:	fb02 f203 	mul.w	r2, r2, r3
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5a:	e004      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	4a0c      	ldr	r2, [pc, #48]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c60:	fb02 f303 	mul.w	r3, r2, r3
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	623b      	str	r3, [r7, #32]
      break;
 8002c6a:	e002      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c6c:	4b07      	ldr	r3, [pc, #28]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c6e:	623b      	str	r3, [r7, #32]
      break;
 8002c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c72:	6a3b      	ldr	r3, [r7, #32]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3728      	adds	r7, #40	; 0x28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc90      	pop	{r4, r7}
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	080085c8 	.word	0x080085c8
 8002c84:	080085d8 	.word	0x080085d8
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	007a1200 	.word	0x007a1200
 8002c90:	003d0900 	.word	0x003d0900

08002c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c98:	4b02      	ldr	r3, [pc, #8]	; (8002ca4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr
 8002ca4:	20000000 	.word	0x20000000

08002ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cac:	f7ff fff2 	bl	8002c94 <HAL_RCC_GetHCLKFreq>
 8002cb0:	4601      	mov	r1, r0
 8002cb2:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	0a1b      	lsrs	r3, r3, #8
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	4a03      	ldr	r2, [pc, #12]	; (8002ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cbe:	5cd3      	ldrb	r3, [r2, r3]
 8002cc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	0800865c 	.word	0x0800865c

08002cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cd4:	f7ff ffde 	bl	8002c94 <HAL_RCC_GetHCLKFreq>
 8002cd8:	4601      	mov	r1, r0
 8002cda:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	0adb      	lsrs	r3, r3, #11
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	4a03      	ldr	r2, [pc, #12]	; (8002cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ce6:	5cd3      	ldrb	r3, [r2, r3]
 8002ce8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	0800865c 	.word	0x0800865c

08002cf8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	220f      	movs	r2, #15
 8002d06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d08:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <HAL_RCC_GetClockConfig+0x58>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 0203 	and.w	r2, r3, #3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d14:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <HAL_RCC_GetClockConfig+0x58>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_RCC_GetClockConfig+0x58>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002d2c:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <HAL_RCC_GetClockConfig+0x58>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	08db      	lsrs	r3, r3, #3
 8002d32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_RCC_GetClockConfig+0x5c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0207 	and.w	r2, r3, #7
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40022000 	.word	0x40022000

08002d58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d60:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <RCC_Delay+0x34>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a0a      	ldr	r2, [pc, #40]	; (8002d90 <RCC_Delay+0x38>)
 8002d66:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6a:	0a5b      	lsrs	r3, r3, #9
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	fb02 f303 	mul.w	r3, r2, r3
 8002d72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d74:	bf00      	nop
  }
  while (Delay --);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	1e5a      	subs	r2, r3, #1
 8002d7a:	60fa      	str	r2, [r7, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f9      	bne.n	8002d74 <RCC_Delay+0x1c>
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20000000 	.word	0x20000000
 8002d90:	10624dd3 	.word	0x10624dd3

08002d94 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d07d      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002db0:	2300      	movs	r3, #0
 8002db2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db4:	4b4f      	ldr	r3, [pc, #316]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10d      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc0:	4b4c      	ldr	r3, [pc, #304]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	4a4b      	ldr	r2, [pc, #300]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dca:	61d3      	str	r3, [r2, #28]
 8002dcc:	4b49      	ldr	r3, [pc, #292]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ddc:	4b46      	ldr	r3, [pc, #280]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d118      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002de8:	4b43      	ldr	r3, [pc, #268]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a42      	ldr	r2, [pc, #264]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df4:	f7fe fc54 	bl	80016a0 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfa:	e008      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dfc:	f7fe fc50 	bl	80016a0 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b64      	cmp	r3, #100	; 0x64
 8002e08:	d901      	bls.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e06d      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0e:	4b3a      	ldr	r3, [pc, #232]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e1a:	4b36      	ldr	r3, [pc, #216]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e22:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d02e      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d027      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e38:	4b2e      	ldr	r3, [pc, #184]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e40:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e42:	4b2e      	ldr	r3, [pc, #184]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e48:	4b2c      	ldr	r3, [pc, #176]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e4e:	4a29      	ldr	r2, [pc, #164]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d014      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5e:	f7fe fc1f 	bl	80016a0 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e64:	e00a      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e66:	f7fe fc1b 	bl	80016a0 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e036      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0ee      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e88:	4b1a      	ldr	r3, [pc, #104]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	4917      	ldr	r1, [pc, #92]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e9a:	7dfb      	ldrb	r3, [r7, #23]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d105      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea0:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	4a13      	ldr	r2, [pc, #76]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002eb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	490b      	ldr	r1, [pc, #44]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d008      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ed6:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	4904      	ldr	r1, [pc, #16]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40007000 	.word	0x40007000
 8002efc:	42420440 	.word	0x42420440

08002f00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e076      	b.n	8003000 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d108      	bne.n	8002f2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f22:	d009      	beq.n	8002f38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	61da      	str	r2, [r3, #28]
 8002f2a:	e005      	b.n	8002f38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fe f908 	bl	8001168 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fbc:	ea42 0103 	orr.w	r1, r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	0c1a      	lsrs	r2, r3, #16
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f002 0204 	and.w	r2, r2, #4
 8002fde:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	69da      	ldr	r2, [r3, #28]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	4613      	mov	r3, r2
 8003016:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_SPI_Transmit+0x22>
 8003026:	2302      	movs	r3, #2
 8003028:	e126      	b.n	8003278 <HAL_SPI_Transmit+0x270>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003032:	f7fe fb35 	bl	80016a0 <HAL_GetTick>
 8003036:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003038:	88fb      	ldrh	r3, [r7, #6]
 800303a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b01      	cmp	r3, #1
 8003046:	d002      	beq.n	800304e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003048:	2302      	movs	r3, #2
 800304a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800304c:	e10b      	b.n	8003266 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <HAL_SPI_Transmit+0x52>
 8003054:	88fb      	ldrh	r3, [r7, #6]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d102      	bne.n	8003060 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800305e:	e102      	b.n	8003266 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2203      	movs	r2, #3
 8003064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	88fa      	ldrh	r2, [r7, #6]
 8003078:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	88fa      	ldrh	r2, [r7, #6]
 800307e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a6:	d10f      	bne.n	80030c8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d2:	2b40      	cmp	r3, #64	; 0x40
 80030d4:	d007      	beq.n	80030e6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ee:	d14b      	bne.n	8003188 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d002      	beq.n	80030fe <HAL_SPI_Transmit+0xf6>
 80030f8:	8afb      	ldrh	r3, [r7, #22]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d13e      	bne.n	800317c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	881a      	ldrh	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	1c9a      	adds	r2, r3, #2
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003122:	e02b      	b.n	800317c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b02      	cmp	r3, #2
 8003130:	d112      	bne.n	8003158 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	881a      	ldrh	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	1c9a      	adds	r2, r3, #2
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800314c:	b29b      	uxth	r3, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	86da      	strh	r2, [r3, #54]	; 0x36
 8003156:	e011      	b.n	800317c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003158:	f7fe faa2 	bl	80016a0 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d803      	bhi.n	8003170 <HAL_SPI_Transmit+0x168>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800316e:	d102      	bne.n	8003176 <HAL_SPI_Transmit+0x16e>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d102      	bne.n	800317c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	77fb      	strb	r3, [r7, #31]
          goto error;
 800317a:	e074      	b.n	8003266 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1ce      	bne.n	8003124 <HAL_SPI_Transmit+0x11c>
 8003186:	e04c      	b.n	8003222 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <HAL_SPI_Transmit+0x18e>
 8003190:	8afb      	ldrh	r3, [r7, #22]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d140      	bne.n	8003218 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	330c      	adds	r3, #12
 80031a0:	7812      	ldrb	r2, [r2, #0]
 80031a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80031bc:	e02c      	b.n	8003218 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d113      	bne.n	80031f4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	330c      	adds	r3, #12
 80031d6:	7812      	ldrb	r2, [r2, #0]
 80031d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80031f2:	e011      	b.n	8003218 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031f4:	f7fe fa54 	bl	80016a0 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d803      	bhi.n	800320c <HAL_SPI_Transmit+0x204>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800320a:	d102      	bne.n	8003212 <HAL_SPI_Transmit+0x20a>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d102      	bne.n	8003218 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003216:	e026      	b.n	8003266 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800321c:	b29b      	uxth	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1cd      	bne.n	80031be <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	6839      	ldr	r1, [r7, #0]
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 fbb8 	bl	800399c <SPI_EndRxTxTransaction>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2220      	movs	r2, #32
 8003236:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10a      	bne.n	8003256 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003240:	2300      	movs	r3, #0
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	77fb      	strb	r3, [r7, #31]
 8003262:	e000      	b.n	8003266 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003264:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003276:	7ffb      	ldrb	r3, [r7, #31]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3720      	adds	r7, #32
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af02      	add	r7, sp, #8
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800329c:	d112      	bne.n	80032c4 <HAL_SPI_Receive+0x44>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10e      	bne.n	80032c4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2204      	movs	r2, #4
 80032aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80032ae:	88fa      	ldrh	r2, [r7, #6]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	4613      	mov	r3, r2
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f8f1 	bl	80034a2 <HAL_SPI_TransmitReceive>
 80032c0:	4603      	mov	r3, r0
 80032c2:	e0ea      	b.n	800349a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_SPI_Receive+0x52>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e0e3      	b.n	800349a <HAL_SPI_Receive+0x21a>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032da:	f7fe f9e1 	bl	80016a0 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d002      	beq.n	80032f2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80032ec:	2302      	movs	r3, #2
 80032ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80032f0:	e0ca      	b.n	8003488 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <HAL_SPI_Receive+0x7e>
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d102      	bne.n	8003304 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003302:	e0c1      	b.n	8003488 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2204      	movs	r2, #4
 8003308:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	88fa      	ldrh	r2, [r7, #6]
 800331c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	88fa      	ldrh	r2, [r7, #6]
 8003322:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800334a:	d10f      	bne.n	800336c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800335a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800336a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003376:	2b40      	cmp	r3, #64	; 0x40
 8003378:	d007      	beq.n	800338a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003388:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d162      	bne.n	8003458 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003392:	e02e      	b.n	80033f2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d115      	bne.n	80033ce <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f103 020c 	add.w	r2, r3, #12
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ae:	7812      	ldrb	r2, [r2, #0]
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033cc:	e011      	b.n	80033f2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033ce:	f7fe f967 	bl	80016a0 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d803      	bhi.n	80033e6 <HAL_SPI_Receive+0x166>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033e4:	d102      	bne.n	80033ec <HAL_SPI_Receive+0x16c>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d102      	bne.n	80033f2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80033f0:	e04a      	b.n	8003488 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1cb      	bne.n	8003394 <HAL_SPI_Receive+0x114>
 80033fc:	e031      	b.n	8003462 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b01      	cmp	r3, #1
 800340a:	d113      	bne.n	8003434 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003416:	b292      	uxth	r2, r2
 8003418:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341e:	1c9a      	adds	r2, r3, #2
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003432:	e011      	b.n	8003458 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003434:	f7fe f934 	bl	80016a0 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d803      	bhi.n	800344c <HAL_SPI_Receive+0x1cc>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800344a:	d102      	bne.n	8003452 <HAL_SPI_Receive+0x1d2>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d102      	bne.n	8003458 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003456:	e017      	b.n	8003488 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800345c:	b29b      	uxth	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1cd      	bne.n	80033fe <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	6839      	ldr	r1, [r7, #0]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 fa46 	bl	80038f8 <SPI_EndRxTransaction>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d002      	beq.n	8003478 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	75fb      	strb	r3, [r7, #23]
 8003484:	e000      	b.n	8003488 <HAL_SPI_Receive+0x208>
  }

error :
 8003486:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003498:	7dfb      	ldrb	r3, [r7, #23]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b08c      	sub	sp, #48	; 0x30
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034b0:	2301      	movs	r3, #1
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_SPI_TransmitReceive+0x26>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e18a      	b.n	80037de <HAL_SPI_TransmitReceive+0x33c>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034d0:	f7fe f8e6 	bl	80016a0 <HAL_GetTick>
 80034d4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80034e6:	887b      	ldrh	r3, [r7, #2]
 80034e8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d00f      	beq.n	8003512 <HAL_SPI_TransmitReceive+0x70>
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034f8:	d107      	bne.n	800350a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d103      	bne.n	800350a <HAL_SPI_TransmitReceive+0x68>
 8003502:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003506:	2b04      	cmp	r3, #4
 8003508:	d003      	beq.n	8003512 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800350a:	2302      	movs	r3, #2
 800350c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003510:	e15b      	b.n	80037ca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_SPI_TransmitReceive+0x82>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_SPI_TransmitReceive+0x82>
 800351e:	887b      	ldrh	r3, [r7, #2]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d103      	bne.n	800352c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800352a:	e14e      	b.n	80037ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b04      	cmp	r3, #4
 8003536:	d003      	beq.n	8003540 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2205      	movs	r2, #5
 800353c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	887a      	ldrh	r2, [r7, #2]
 8003550:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	887a      	ldrh	r2, [r7, #2]
 8003556:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	887a      	ldrh	r2, [r7, #2]
 8003562:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	887a      	ldrh	r2, [r7, #2]
 8003568:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003580:	2b40      	cmp	r3, #64	; 0x40
 8003582:	d007      	beq.n	8003594 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003592:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800359c:	d178      	bne.n	8003690 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <HAL_SPI_TransmitReceive+0x10a>
 80035a6:	8b7b      	ldrh	r3, [r7, #26]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d166      	bne.n	800367a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b0:	881a      	ldrh	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	1c9a      	adds	r2, r3, #2
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035d0:	e053      	b.n	800367a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d11b      	bne.n	8003618 <HAL_SPI_TransmitReceive+0x176>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d016      	beq.n	8003618 <HAL_SPI_TransmitReceive+0x176>
 80035ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d113      	bne.n	8003618 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f4:	881a      	ldrh	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	1c9a      	adds	r2, r3, #2
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b01      	cmp	r3, #1
 8003624:	d119      	bne.n	800365a <HAL_SPI_TransmitReceive+0x1b8>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d014      	beq.n	800365a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363a:	b292      	uxth	r2, r2
 800363c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003642:	1c9a      	adds	r2, r3, #2
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003656:	2301      	movs	r3, #1
 8003658:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800365a:	f7fe f821 	bl	80016a0 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003666:	429a      	cmp	r2, r3
 8003668:	d807      	bhi.n	800367a <HAL_SPI_TransmitReceive+0x1d8>
 800366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003670:	d003      	beq.n	800367a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003678:	e0a7      	b.n	80037ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800367e:	b29b      	uxth	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1a6      	bne.n	80035d2 <HAL_SPI_TransmitReceive+0x130>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1a1      	bne.n	80035d2 <HAL_SPI_TransmitReceive+0x130>
 800368e:	e07c      	b.n	800378a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <HAL_SPI_TransmitReceive+0x1fc>
 8003698:	8b7b      	ldrh	r3, [r7, #26]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d16b      	bne.n	8003776 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	330c      	adds	r3, #12
 80036a8:	7812      	ldrb	r2, [r2, #0]
 80036aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036c4:	e057      	b.n	8003776 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d11c      	bne.n	800370e <HAL_SPI_TransmitReceive+0x26c>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d017      	beq.n	800370e <HAL_SPI_TransmitReceive+0x26c>
 80036de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d114      	bne.n	800370e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	330c      	adds	r3, #12
 80036ee:	7812      	ldrb	r2, [r2, #0]
 80036f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b01      	cmp	r3, #1
 800371a:	d119      	bne.n	8003750 <HAL_SPI_TransmitReceive+0x2ae>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003720:	b29b      	uxth	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d014      	beq.n	8003750 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800374c:	2301      	movs	r3, #1
 800374e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003750:	f7fd ffa6 	bl	80016a0 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800375c:	429a      	cmp	r2, r3
 800375e:	d803      	bhi.n	8003768 <HAL_SPI_TransmitReceive+0x2c6>
 8003760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003762:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003766:	d102      	bne.n	800376e <HAL_SPI_TransmitReceive+0x2cc>
 8003768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376a:	2b00      	cmp	r3, #0
 800376c:	d103      	bne.n	8003776 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003774:	e029      	b.n	80037ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800377a:	b29b      	uxth	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1a2      	bne.n	80036c6 <HAL_SPI_TransmitReceive+0x224>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d19d      	bne.n	80036c6 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800378a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800378c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 f904 	bl	800399c <SPI_EndRxTxTransaction>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d006      	beq.n	80037a8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80037a6:	e010      	b.n	80037ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10b      	bne.n	80037c8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	e000      	b.n	80037ca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80037c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3730      	adds	r7, #48	; 0x30
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	603b      	str	r3, [r7, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037f8:	f7fd ff52 	bl	80016a0 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	4413      	add	r3, r2
 8003806:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003808:	f7fd ff4a 	bl	80016a0 <HAL_GetTick>
 800380c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800380e:	4b39      	ldr	r3, [pc, #228]	; (80038f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	015b      	lsls	r3, r3, #5
 8003814:	0d1b      	lsrs	r3, r3, #20
 8003816:	69fa      	ldr	r2, [r7, #28]
 8003818:	fb02 f303 	mul.w	r3, r2, r3
 800381c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800381e:	e054      	b.n	80038ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003826:	d050      	beq.n	80038ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003828:	f7fd ff3a 	bl	80016a0 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	429a      	cmp	r2, r3
 8003836:	d902      	bls.n	800383e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d13d      	bne.n	80038ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800384c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003856:	d111      	bne.n	800387c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003860:	d004      	beq.n	800386c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386a:	d107      	bne.n	800387c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800387a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003884:	d10f      	bne.n	80038a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e017      	b.n	80038ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4013      	ands	r3, r2
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	bf0c      	ite	eq
 80038da:	2301      	moveq	r3, #1
 80038dc:	2300      	movne	r3, #0
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d19b      	bne.n	8003820 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3720      	adds	r7, #32
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000000 	.word	0x20000000

080038f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800390c:	d111      	bne.n	8003932 <SPI_EndRxTransaction+0x3a>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003916:	d004      	beq.n	8003922 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003920:	d107      	bne.n	8003932 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003930:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800393a:	d117      	bne.n	800396c <SPI_EndRxTransaction+0x74>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003944:	d112      	bne.n	800396c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2200      	movs	r2, #0
 800394e:	2101      	movs	r1, #1
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f7ff ff49 	bl	80037e8 <SPI_WaitFlagStateUntilTimeout>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d01a      	beq.n	8003992 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003960:	f043 0220 	orr.w	r2, r3, #32
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e013      	b.n	8003994 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2200      	movs	r2, #0
 8003974:	2180      	movs	r1, #128	; 0x80
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f7ff ff36 	bl	80037e8 <SPI_WaitFlagStateUntilTimeout>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d007      	beq.n	8003992 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003986:	f043 0220 	orr.w	r2, r3, #32
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e000      	b.n	8003994 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2200      	movs	r2, #0
 80039b0:	2180      	movs	r1, #128	; 0x80
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f7ff ff18 	bl	80037e8 <SPI_WaitFlagStateUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d007      	beq.n	80039ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c2:	f043 0220 	orr.w	r2, r3, #32
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e000      	b.n	80039d0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e041      	b.n	8003a6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f839 	bl	8003a76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3304      	adds	r3, #4
 8003a14:	4619      	mov	r1, r3
 8003a16:	4610      	mov	r0, r2
 8003a18:	f000 f9b4 	bl	8003d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d001      	beq.n	8003aa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e03a      	b.n	8003b16 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a18      	ldr	r2, [pc, #96]	; (8003b20 <HAL_TIM_Base_Start_IT+0x98>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00e      	beq.n	8003ae0 <HAL_TIM_Base_Start_IT+0x58>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aca:	d009      	beq.n	8003ae0 <HAL_TIM_Base_Start_IT+0x58>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a14      	ldr	r2, [pc, #80]	; (8003b24 <HAL_TIM_Base_Start_IT+0x9c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d004      	beq.n	8003ae0 <HAL_TIM_Base_Start_IT+0x58>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a13      	ldr	r2, [pc, #76]	; (8003b28 <HAL_TIM_Base_Start_IT+0xa0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d111      	bne.n	8003b04 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b06      	cmp	r3, #6
 8003af0:	d010      	beq.n	8003b14 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 0201 	orr.w	r2, r2, #1
 8003b00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b02:	e007      	b.n	8003b14 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr
 8003b20:	40012c00 	.word	0x40012c00
 8003b24:	40000400 	.word	0x40000400
 8003b28:	40000800 	.word	0x40000800

08003b2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d122      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d11b      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f06f 0202 	mvn.w	r2, #2
 8003b58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f8ed 	bl	8003d4e <HAL_TIM_IC_CaptureCallback>
 8003b74:	e005      	b.n	8003b82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f8e0 	bl	8003d3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f8ef 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d122      	bne.n	8003bdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d11b      	bne.n	8003bdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f06f 0204 	mvn.w	r2, #4
 8003bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f8c3 	bl	8003d4e <HAL_TIM_IC_CaptureCallback>
 8003bc8:	e005      	b.n	8003bd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f8b6 	bl	8003d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f8c5 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d122      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0308 	and.w	r3, r3, #8
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d11b      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0208 	mvn.w	r2, #8
 8003c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2204      	movs	r2, #4
 8003c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f899 	bl	8003d4e <HAL_TIM_IC_CaptureCallback>
 8003c1c:	e005      	b.n	8003c2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f88c 	bl	8003d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f89b 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f003 0310 	and.w	r3, r3, #16
 8003c3a:	2b10      	cmp	r3, #16
 8003c3c:	d122      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0310 	and.w	r3, r3, #16
 8003c48:	2b10      	cmp	r3, #16
 8003c4a:	d11b      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0210 	mvn.w	r2, #16
 8003c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2208      	movs	r2, #8
 8003c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f86f 	bl	8003d4e <HAL_TIM_IC_CaptureCallback>
 8003c70:	e005      	b.n	8003c7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f862 	bl	8003d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f871 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d10e      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d107      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f06f 0201 	mvn.w	r2, #1
 8003ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7fc fe74 	bl	8000998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cba:	2b80      	cmp	r3, #128	; 0x80
 8003cbc:	d10e      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc8:	2b80      	cmp	r3, #128	; 0x80
 8003cca:	d107      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f8bf 	bl	8003e5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce6:	2b40      	cmp	r3, #64	; 0x40
 8003ce8:	d10e      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf4:	2b40      	cmp	r3, #64	; 0x40
 8003cf6:	d107      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f835 	bl	8003d72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	d10e      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f003 0320 	and.w	r3, r3, #32
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	d107      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f06f 0220 	mvn.w	r2, #32
 8003d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f88a 	bl	8003e48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d34:	bf00      	nop
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr

08003d4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr

08003d60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr

08003d72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bc80      	pop	{r7}
 8003d82:	4770      	bx	lr

08003d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a29      	ldr	r2, [pc, #164]	; (8003e3c <TIM_Base_SetConfig+0xb8>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00b      	beq.n	8003db4 <TIM_Base_SetConfig+0x30>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da2:	d007      	beq.n	8003db4 <TIM_Base_SetConfig+0x30>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a26      	ldr	r2, [pc, #152]	; (8003e40 <TIM_Base_SetConfig+0xbc>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d003      	beq.n	8003db4 <TIM_Base_SetConfig+0x30>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a25      	ldr	r2, [pc, #148]	; (8003e44 <TIM_Base_SetConfig+0xc0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d108      	bne.n	8003dc6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a1c      	ldr	r2, [pc, #112]	; (8003e3c <TIM_Base_SetConfig+0xb8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00b      	beq.n	8003de6 <TIM_Base_SetConfig+0x62>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd4:	d007      	beq.n	8003de6 <TIM_Base_SetConfig+0x62>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a19      	ldr	r2, [pc, #100]	; (8003e40 <TIM_Base_SetConfig+0xbc>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d003      	beq.n	8003de6 <TIM_Base_SetConfig+0x62>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a18      	ldr	r2, [pc, #96]	; (8003e44 <TIM_Base_SetConfig+0xc0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d108      	bne.n	8003df8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a07      	ldr	r2, [pc, #28]	; (8003e3c <TIM_Base_SetConfig+0xb8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d103      	bne.n	8003e2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	615a      	str	r2, [r3, #20]
}
 8003e32:	bf00      	nop
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr
 8003e3c:	40012c00 	.word	0x40012c00
 8003e40:	40000400 	.word	0x40000400
 8003e44:	40000800 	.word	0x40000800

08003e48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	4770      	bx	lr

08003e5a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr

08003e6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e03f      	b.n	8003efe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fd fa0c 	bl	80012b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2224      	movs	r2, #36	; 0x24
 8003e9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f829 	bl	8003f08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ec4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695a      	ldr	r2, [r3, #20]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ed4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ee4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f42:	f023 030c 	bic.w	r3, r3, #12
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6812      	ldr	r2, [r2, #0]
 8003f4a:	68b9      	ldr	r1, [r7, #8]
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699a      	ldr	r2, [r3, #24]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a2c      	ldr	r2, [pc, #176]	; (800401c <UART_SetConfig+0x114>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d103      	bne.n	8003f78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f70:	f7fe feae 	bl	8002cd0 <HAL_RCC_GetPCLK2Freq>
 8003f74:	60f8      	str	r0, [r7, #12]
 8003f76:	e002      	b.n	8003f7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f78:	f7fe fe96 	bl	8002ca8 <HAL_RCC_GetPCLK1Freq>
 8003f7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	009a      	lsls	r2, r3, #2
 8003f88:	441a      	add	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f94:	4a22      	ldr	r2, [pc, #136]	; (8004020 <UART_SetConfig+0x118>)
 8003f96:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	0119      	lsls	r1, r3, #4
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009a      	lsls	r2, r3, #2
 8003fa8:	441a      	add	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fb4:	4b1a      	ldr	r3, [pc, #104]	; (8004020 <UART_SetConfig+0x118>)
 8003fb6:	fba3 0302 	umull	r0, r3, r3, r2
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	2064      	movs	r0, #100	; 0x64
 8003fbe:	fb00 f303 	mul.w	r3, r0, r3
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	3332      	adds	r3, #50	; 0x32
 8003fc8:	4a15      	ldr	r2, [pc, #84]	; (8004020 <UART_SetConfig+0x118>)
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fd4:	4419      	add	r1, r3
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	009a      	lsls	r2, r3, #2
 8003fe0:	441a      	add	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fec:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <UART_SetConfig+0x118>)
 8003fee:	fba3 0302 	umull	r0, r3, r3, r2
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	2064      	movs	r0, #100	; 0x64
 8003ff6:	fb00 f303 	mul.w	r3, r0, r3
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	3332      	adds	r3, #50	; 0x32
 8004000:	4a07      	ldr	r2, [pc, #28]	; (8004020 <UART_SetConfig+0x118>)
 8004002:	fba2 2303 	umull	r2, r3, r2, r3
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	f003 020f 	and.w	r2, r3, #15
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	440a      	add	r2, r1
 8004012:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004014:	bf00      	nop
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40013800 	.word	0x40013800
 8004020:	51eb851f 	.word	0x51eb851f

08004024 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800402a:	f3ef 8305 	mrs	r3, IPSR
 800402e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004030:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10f      	bne.n	8004056 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004036:	f3ef 8310 	mrs	r3, PRIMASK
 800403a:	607b      	str	r3, [r7, #4]
  return(result);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <osKernelInitialize+0x32>
 8004042:	4b10      	ldr	r3, [pc, #64]	; (8004084 <osKernelInitialize+0x60>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d109      	bne.n	800405e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800404a:	f3ef 8311 	mrs	r3, BASEPRI
 800404e:	603b      	str	r3, [r7, #0]
  return(result);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004056:	f06f 0305 	mvn.w	r3, #5
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	e00c      	b.n	8004078 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800405e:	4b09      	ldr	r3, [pc, #36]	; (8004084 <osKernelInitialize+0x60>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d105      	bne.n	8004072 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004066:	4b07      	ldr	r3, [pc, #28]	; (8004084 <osKernelInitialize+0x60>)
 8004068:	2201      	movs	r2, #1
 800406a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	e002      	b.n	8004078 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004076:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004078:	68fb      	ldr	r3, [r7, #12]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr
 8004084:	20000098 	.word	0x20000098

08004088 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800408e:	f3ef 8305 	mrs	r3, IPSR
 8004092:	60bb      	str	r3, [r7, #8]
  return(result);
 8004094:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10f      	bne.n	80040ba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800409a:	f3ef 8310 	mrs	r3, PRIMASK
 800409e:	607b      	str	r3, [r7, #4]
  return(result);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d109      	bne.n	80040ba <osKernelStart+0x32>
 80040a6:	4b11      	ldr	r3, [pc, #68]	; (80040ec <osKernelStart+0x64>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d109      	bne.n	80040c2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040ae:	f3ef 8311 	mrs	r3, BASEPRI
 80040b2:	603b      	str	r3, [r7, #0]
  return(result);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80040ba:	f06f 0305 	mvn.w	r3, #5
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	e00e      	b.n	80040e0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80040c2:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <osKernelStart+0x64>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d107      	bne.n	80040da <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80040ca:	4b08      	ldr	r3, [pc, #32]	; (80040ec <osKernelStart+0x64>)
 80040cc:	2202      	movs	r2, #2
 80040ce:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80040d0:	f001 fd3c 	bl	8005b4c <vTaskStartScheduler>
      stat = osOK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	e002      	b.n	80040e0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80040da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80040e0:	68fb      	ldr	r3, [r7, #12]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20000098 	.word	0x20000098

080040f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b092      	sub	sp, #72	; 0x48
 80040f4:	af04      	add	r7, sp, #16
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004100:	f3ef 8305 	mrs	r3, IPSR
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004108:	2b00      	cmp	r3, #0
 800410a:	f040 8094 	bne.w	8004236 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800410e:	f3ef 8310 	mrs	r3, PRIMASK
 8004112:	623b      	str	r3, [r7, #32]
  return(result);
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	2b00      	cmp	r3, #0
 8004118:	f040 808d 	bne.w	8004236 <osThreadNew+0x146>
 800411c:	4b48      	ldr	r3, [pc, #288]	; (8004240 <osThreadNew+0x150>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d106      	bne.n	8004132 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004124:	f3ef 8311 	mrs	r3, BASEPRI
 8004128:	61fb      	str	r3, [r7, #28]
  return(result);
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	2b00      	cmp	r3, #0
 800412e:	f040 8082 	bne.w	8004236 <osThreadNew+0x146>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d07e      	beq.n	8004236 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004138:	2380      	movs	r3, #128	; 0x80
 800413a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800413c:	2318      	movs	r3, #24
 800413e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004140:	2300      	movs	r3, #0
 8004142:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004144:	f107 031b 	add.w	r3, r7, #27
 8004148:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800414a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800414e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d045      	beq.n	80041e2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <osThreadNew+0x74>
        name = attr->name;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004174:	2b00      	cmp	r3, #0
 8004176:	d008      	beq.n	800418a <osThreadNew+0x9a>
 8004178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417a:	2b38      	cmp	r3, #56	; 0x38
 800417c:	d805      	bhi.n	800418a <osThreadNew+0x9a>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <osThreadNew+0x9e>
        return (NULL);
 800418a:	2300      	movs	r3, #0
 800418c:	e054      	b.n	8004238 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	089b      	lsrs	r3, r3, #2
 800419c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00e      	beq.n	80041c4 <osThreadNew+0xd4>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	2b5b      	cmp	r3, #91	; 0x5b
 80041ac:	d90a      	bls.n	80041c4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d006      	beq.n	80041c4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d002      	beq.n	80041c4 <osThreadNew+0xd4>
        mem = 1;
 80041be:	2301      	movs	r3, #1
 80041c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80041c2:	e010      	b.n	80041e6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10c      	bne.n	80041e6 <osThreadNew+0xf6>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d108      	bne.n	80041e6 <osThreadNew+0xf6>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d104      	bne.n	80041e6 <osThreadNew+0xf6>
          mem = 0;
 80041dc:	2300      	movs	r3, #0
 80041de:	62bb      	str	r3, [r7, #40]	; 0x28
 80041e0:	e001      	b.n	80041e6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80041e2:	2300      	movs	r3, #0
 80041e4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80041e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d110      	bne.n	800420e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80041f4:	9202      	str	r2, [sp, #8]
 80041f6:	9301      	str	r3, [sp, #4]
 80041f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004200:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f001 fada 	bl	80057bc <xTaskCreateStatic>
 8004208:	4603      	mov	r3, r0
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	e013      	b.n	8004236 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800420e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004210:	2b00      	cmp	r3, #0
 8004212:	d110      	bne.n	8004236 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	b29a      	uxth	r2, r3
 8004218:	f107 0314 	add.w	r3, r7, #20
 800421c:	9301      	str	r3, [sp, #4]
 800421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f001 fb21 	bl	800586e <xTaskCreate>
 800422c:	4603      	mov	r3, r0
 800422e:	2b01      	cmp	r3, #1
 8004230:	d001      	beq.n	8004236 <osThreadNew+0x146>
          hTask = NULL;
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004236:	697b      	ldr	r3, [r7, #20]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3738      	adds	r7, #56	; 0x38
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	20000098 	.word	0x20000098

08004244 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800424c:	f3ef 8305 	mrs	r3, IPSR
 8004250:	613b      	str	r3, [r7, #16]
  return(result);
 8004252:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10f      	bne.n	8004278 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004258:	f3ef 8310 	mrs	r3, PRIMASK
 800425c:	60fb      	str	r3, [r7, #12]
  return(result);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d109      	bne.n	8004278 <osDelay+0x34>
 8004264:	4b0d      	ldr	r3, [pc, #52]	; (800429c <osDelay+0x58>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b02      	cmp	r3, #2
 800426a:	d109      	bne.n	8004280 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800426c:	f3ef 8311 	mrs	r3, BASEPRI
 8004270:	60bb      	str	r3, [r7, #8]
  return(result);
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <osDelay+0x3c>
    stat = osErrorISR;
 8004278:	f06f 0305 	mvn.w	r3, #5
 800427c:	617b      	str	r3, [r7, #20]
 800427e:	e007      	b.n	8004290 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <osDelay+0x4c>
      vTaskDelay(ticks);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f001 fc2a 	bl	8005ae4 <vTaskDelay>
    }
  }

  return (stat);
 8004290:	697b      	ldr	r3, [r7, #20]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	20000098 	.word	0x20000098

080042a0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08c      	sub	sp, #48	; 0x30
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80042ac:	2300      	movs	r3, #0
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042b0:	f3ef 8305 	mrs	r3, IPSR
 80042b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80042b6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f040 8088 	bne.w	80043ce <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042be:	f3ef 8310 	mrs	r3, PRIMASK
 80042c2:	617b      	str	r3, [r7, #20]
  return(result);
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f040 8081 	bne.w	80043ce <osSemaphoreNew+0x12e>
 80042cc:	4b42      	ldr	r3, [pc, #264]	; (80043d8 <osSemaphoreNew+0x138>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d105      	bne.n	80042e0 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80042d4:	f3ef 8311 	mrs	r3, BASEPRI
 80042d8:	613b      	str	r3, [r7, #16]
  return(result);
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d176      	bne.n	80043ce <osSemaphoreNew+0x12e>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d073      	beq.n	80043ce <osSemaphoreNew+0x12e>
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d86f      	bhi.n	80043ce <osSemaphoreNew+0x12e>
    mem = -1;
 80042ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042f2:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d015      	beq.n	8004326 <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d006      	beq.n	8004310 <osSemaphoreNew+0x70>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	2b4f      	cmp	r3, #79	; 0x4f
 8004308:	d902      	bls.n	8004310 <osSemaphoreNew+0x70>
        mem = 1;
 800430a:	2301      	movs	r3, #1
 800430c:	623b      	str	r3, [r7, #32]
 800430e:	e00c      	b.n	800432a <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d108      	bne.n	800432a <osSemaphoreNew+0x8a>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d104      	bne.n	800432a <osSemaphoreNew+0x8a>
          mem = 0;
 8004320:	2300      	movs	r3, #0
 8004322:	623b      	str	r3, [r7, #32]
 8004324:	e001      	b.n	800432a <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 8004326:	2300      	movs	r3, #0
 8004328:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004330:	d04d      	beq.n	80043ce <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d129      	bne.n	800438c <osSemaphoreNew+0xec>
        if (mem == 1) {
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d10b      	bne.n	8004356 <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	2303      	movs	r3, #3
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	4613      	mov	r3, r2
 8004348:	2200      	movs	r2, #0
 800434a:	2100      	movs	r1, #0
 800434c:	2001      	movs	r0, #1
 800434e:	f000 fa7f 	bl	8004850 <xQueueGenericCreateStatic>
 8004352:	6278      	str	r0, [r7, #36]	; 0x24
 8004354:	e005      	b.n	8004362 <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004356:	2203      	movs	r2, #3
 8004358:	2100      	movs	r1, #0
 800435a:	2001      	movs	r0, #1
 800435c:	f000 faea 	bl	8004934 <xQueueGenericCreate>
 8004360:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	2b00      	cmp	r3, #0
 8004366:	d022      	beq.n	80043ae <osSemaphoreNew+0x10e>
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d01f      	beq.n	80043ae <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800436e:	2300      	movs	r3, #0
 8004370:	2200      	movs	r2, #0
 8004372:	2100      	movs	r1, #0
 8004374:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004376:	f000 fba3 	bl	8004ac0 <xQueueGenericSend>
 800437a:	4603      	mov	r3, r0
 800437c:	2b01      	cmp	r3, #1
 800437e:	d016      	beq.n	80043ae <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 8004380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004382:	f001 f84d 	bl	8005420 <vQueueDelete>
            hSemaphore = NULL;
 8004386:	2300      	movs	r3, #0
 8004388:	627b      	str	r3, [r7, #36]	; 0x24
 800438a:	e010      	b.n	80043ae <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d108      	bne.n	80043a4 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	461a      	mov	r2, r3
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 fb2a 	bl	80049f4 <xQueueCreateCountingSemaphoreStatic>
 80043a0:	6278      	str	r0, [r7, #36]	; 0x24
 80043a2:	e004      	b.n	80043ae <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80043a4:	68b9      	ldr	r1, [r7, #8]
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 fb59 	bl	8004a5e <xQueueCreateCountingSemaphore>
 80043ac:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00c      	beq.n	80043ce <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <osSemaphoreNew+0x122>
          name = attr->name;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	61fb      	str	r3, [r7, #28]
 80043c0:	e001      	b.n	80043c6 <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 80043c2:	2300      	movs	r3, #0
 80043c4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80043c6:	69f9      	ldr	r1, [r7, #28]
 80043c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043ca:	f001 f973 	bl	80056b4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3728      	adds	r7, #40	; 0x28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	20000098 	.word	0x20000098

080043dc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d103      	bne.n	80043fc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80043f4:	f06f 0303 	mvn.w	r3, #3
 80043f8:	61fb      	str	r3, [r7, #28]
 80043fa:	e04b      	b.n	8004494 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043fc:	f3ef 8305 	mrs	r3, IPSR
 8004400:	617b      	str	r3, [r7, #20]
  return(result);
 8004402:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10f      	bne.n	8004428 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004408:	f3ef 8310 	mrs	r3, PRIMASK
 800440c:	613b      	str	r3, [r7, #16]
  return(result);
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d109      	bne.n	8004428 <osSemaphoreAcquire+0x4c>
 8004414:	4b22      	ldr	r3, [pc, #136]	; (80044a0 <osSemaphoreAcquire+0xc4>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d128      	bne.n	800446e <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800441c:	f3ef 8311 	mrs	r3, BASEPRI
 8004420:	60fb      	str	r3, [r7, #12]
  return(result);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d022      	beq.n	800446e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800442e:	f06f 0303 	mvn.w	r3, #3
 8004432:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004434:	e02d      	b.n	8004492 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8004436:	2300      	movs	r3, #0
 8004438:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800443a:	f107 0308 	add.w	r3, r7, #8
 800443e:	461a      	mov	r2, r3
 8004440:	2100      	movs	r1, #0
 8004442:	69b8      	ldr	r0, [r7, #24]
 8004444:	f000 ff38 	bl	80052b8 <xQueueReceiveFromISR>
 8004448:	4603      	mov	r3, r0
 800444a:	2b01      	cmp	r3, #1
 800444c:	d003      	beq.n	8004456 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800444e:	f06f 0302 	mvn.w	r3, #2
 8004452:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004454:	e01d      	b.n	8004492 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d01a      	beq.n	8004492 <osSemaphoreAcquire+0xb6>
 800445c:	4b11      	ldr	r3, [pc, #68]	; (80044a4 <osSemaphoreAcquire+0xc8>)
 800445e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800446c:	e011      	b.n	8004492 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800446e:	6839      	ldr	r1, [r7, #0]
 8004470:	69b8      	ldr	r0, [r7, #24]
 8004472:	f000 fe19 	bl	80050a8 <xQueueSemaphoreTake>
 8004476:	4603      	mov	r3, r0
 8004478:	2b01      	cmp	r3, #1
 800447a:	d00b      	beq.n	8004494 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8004482:	f06f 0301 	mvn.w	r3, #1
 8004486:	61fb      	str	r3, [r7, #28]
 8004488:	e004      	b.n	8004494 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800448a:	f06f 0302 	mvn.w	r3, #2
 800448e:	61fb      	str	r3, [r7, #28]
 8004490:	e000      	b.n	8004494 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8004492:	bf00      	nop
      }
    }
  }

  return (stat);
 8004494:	69fb      	ldr	r3, [r7, #28]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3720      	adds	r7, #32
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20000098 	.word	0x20000098
 80044a4:	e000ed04 	.word	0xe000ed04

080044a8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d103      	bne.n	80044c6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80044be:	f06f 0303 	mvn.w	r3, #3
 80044c2:	61fb      	str	r3, [r7, #28]
 80044c4:	e03e      	b.n	8004544 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044c6:	f3ef 8305 	mrs	r3, IPSR
 80044ca:	617b      	str	r3, [r7, #20]
  return(result);
 80044cc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10f      	bne.n	80044f2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d2:	f3ef 8310 	mrs	r3, PRIMASK
 80044d6:	613b      	str	r3, [r7, #16]
  return(result);
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d109      	bne.n	80044f2 <osSemaphoreRelease+0x4a>
 80044de:	4b1c      	ldr	r3, [pc, #112]	; (8004550 <osSemaphoreRelease+0xa8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d120      	bne.n	8004528 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80044e6:	f3ef 8311 	mrs	r3, BASEPRI
 80044ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d01a      	beq.n	8004528 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80044f2:	2300      	movs	r3, #0
 80044f4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80044f6:	f107 0308 	add.w	r3, r7, #8
 80044fa:	4619      	mov	r1, r3
 80044fc:	69b8      	ldr	r0, [r7, #24]
 80044fe:	f000 fc6d 	bl	8004ddc <xQueueGiveFromISR>
 8004502:	4603      	mov	r3, r0
 8004504:	2b01      	cmp	r3, #1
 8004506:	d003      	beq.n	8004510 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8004508:	f06f 0302 	mvn.w	r3, #2
 800450c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800450e:	e018      	b.n	8004542 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d015      	beq.n	8004542 <osSemaphoreRelease+0x9a>
 8004516:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <osSemaphoreRelease+0xac>)
 8004518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004526:	e00c      	b.n	8004542 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004528:	2300      	movs	r3, #0
 800452a:	2200      	movs	r2, #0
 800452c:	2100      	movs	r1, #0
 800452e:	69b8      	ldr	r0, [r7, #24]
 8004530:	f000 fac6 	bl	8004ac0 <xQueueGenericSend>
 8004534:	4603      	mov	r3, r0
 8004536:	2b01      	cmp	r3, #1
 8004538:	d004      	beq.n	8004544 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800453a:	f06f 0302 	mvn.w	r3, #2
 800453e:	61fb      	str	r3, [r7, #28]
 8004540:	e000      	b.n	8004544 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004542:	bf00      	nop
    }
  }

  return (stat);
 8004544:	69fb      	ldr	r3, [r7, #28]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20000098 	.word	0x20000098
 8004554:	e000ed04 	.word	0xe000ed04

08004558 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8004558:	b580      	push	{r7, lr}
 800455a:	b088      	sub	sp, #32
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	61bb      	str	r3, [r7, #24]
  uint32_t count;

  if (hSemaphore == NULL) {
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d102      	bne.n	8004570 <osSemaphoreGetCount+0x18>
    count = 0U;
 800456a:	2300      	movs	r3, #0
 800456c:	61fb      	str	r3, [r7, #28]
 800456e:	e01e      	b.n	80045ae <osSemaphoreGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004570:	f3ef 8305 	mrs	r3, IPSR
 8004574:	617b      	str	r3, [r7, #20]
  return(result);
 8004576:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10f      	bne.n	800459c <osSemaphoreGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800457c:	f3ef 8310 	mrs	r3, PRIMASK
 8004580:	613b      	str	r3, [r7, #16]
  return(result);
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d109      	bne.n	800459c <osSemaphoreGetCount+0x44>
 8004588:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <osSemaphoreGetCount+0x60>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b02      	cmp	r3, #2
 800458e:	d10a      	bne.n	80045a6 <osSemaphoreGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004590:	f3ef 8311 	mrs	r3, BASEPRI
 8004594:	60fb      	str	r3, [r7, #12]
  return(result);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d004      	beq.n	80045a6 <osSemaphoreGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 800459c:	69b8      	ldr	r0, [r7, #24]
 800459e:	f000 ff25 	bl	80053ec <uxQueueMessagesWaitingFromISR>
 80045a2:	61f8      	str	r0, [r7, #28]
 80045a4:	e003      	b.n	80045ae <osSemaphoreGetCount+0x56>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 80045a6:	69b8      	ldr	r0, [r7, #24]
 80045a8:	f000 ff03 	bl	80053b2 <uxQueueMessagesWaiting>
 80045ac:	61f8      	str	r0, [r7, #28]
  }

  return (count);
 80045ae:	69fb      	ldr	r3, [r7, #28]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3720      	adds	r7, #32
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	20000098 	.word	0x20000098

080045bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4a06      	ldr	r2, [pc, #24]	; (80045e4 <vApplicationGetIdleTaskMemory+0x28>)
 80045cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	4a05      	ldr	r2, [pc, #20]	; (80045e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80045d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2280      	movs	r2, #128	; 0x80
 80045d8:	601a      	str	r2, [r3, #0]
}
 80045da:	bf00      	nop
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr
 80045e4:	2000009c 	.word	0x2000009c
 80045e8:	200000f8 	.word	0x200000f8

080045ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4a07      	ldr	r2, [pc, #28]	; (8004618 <vApplicationGetTimerTaskMemory+0x2c>)
 80045fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	4a06      	ldr	r2, [pc, #24]	; (800461c <vApplicationGetTimerTaskMemory+0x30>)
 8004602:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f44f 7280 	mov.w	r2, #256	; 0x100
 800460a:	601a      	str	r2, [r3, #0]
}
 800460c:	bf00      	nop
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	200002f8 	.word	0x200002f8
 800461c:	20000354 	.word	0x20000354

08004620 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f103 0208 	add.w	r2, r3, #8
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004638:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f103 0208 	add.w	r2, r3, #8
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f103 0208 	add.w	r2, r3, #8
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	bc80      	pop	{r7}
 800465c:	4770      	bx	lr

0800465e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr

08004676 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004676:	b480      	push	{r7}
 8004678:	b085      	sub	sp, #20
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	601a      	str	r2, [r3, #0]
}
 80046b2:	bf00      	nop
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr

080046bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046d2:	d103      	bne.n	80046dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	e00c      	b.n	80046f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3308      	adds	r3, #8
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	e002      	b.n	80046ea <vListInsert+0x2e>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d2f6      	bcs.n	80046e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	601a      	str	r2, [r3, #0]
}
 8004722:	bf00      	nop
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr

0800472c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6892      	ldr	r2, [r2, #8]
 8004742:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6852      	ldr	r2, [r2, #4]
 800474c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	429a      	cmp	r2, r3
 8004756:	d103      	bne.n	8004760 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	1e5a      	subs	r2, r3, #1
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	bc80      	pop	{r7}
 800477c:	4770      	bx	lr
	...

08004780 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d109      	bne.n	80047a8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	e7fe      	b.n	80047a6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80047a8:	f002 fbe6 	bl	8006f78 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b4:	68f9      	ldr	r1, [r7, #12]
 80047b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047b8:	fb01 f303 	mul.w	r3, r1, r3
 80047bc:	441a      	add	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d8:	3b01      	subs	r3, #1
 80047da:	68f9      	ldr	r1, [r7, #12]
 80047dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047de:	fb01 f303 	mul.w	r3, r1, r3
 80047e2:	441a      	add	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	22ff      	movs	r2, #255	; 0xff
 80047ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	22ff      	movs	r2, #255	; 0xff
 80047f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d114      	bne.n	8004828 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d01a      	beq.n	800483c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	3310      	adds	r3, #16
 800480a:	4618      	mov	r0, r3
 800480c:	f001 fc22 	bl	8006054 <xTaskRemoveFromEventList>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d012      	beq.n	800483c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004816:	4b0d      	ldr	r3, [pc, #52]	; (800484c <xQueueGenericReset+0xcc>)
 8004818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	e009      	b.n	800483c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	3310      	adds	r3, #16
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff fef7 	bl	8004620 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3324      	adds	r3, #36	; 0x24
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff fef2 	bl	8004620 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800483c:	f002 fbca 	bl	8006fd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004840:	2301      	movs	r3, #1
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	e000ed04 	.word	0xe000ed04

08004850 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08e      	sub	sp, #56	; 0x38
 8004854:	af02      	add	r7, sp, #8
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
 800485c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d109      	bne.n	8004878 <xQueueGenericCreateStatic+0x28>
 8004864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	62bb      	str	r3, [r7, #40]	; 0x28
 8004876:	e7fe      	b.n	8004876 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d109      	bne.n	8004892 <xQueueGenericCreateStatic+0x42>
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
 8004890:	e7fe      	b.n	8004890 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <xQueueGenericCreateStatic+0x4e>
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <xQueueGenericCreateStatic+0x52>
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <xQueueGenericCreateStatic+0x54>
 80048a2:	2300      	movs	r3, #0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d109      	bne.n	80048bc <xQueueGenericCreateStatic+0x6c>
 80048a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	623b      	str	r3, [r7, #32]
 80048ba:	e7fe      	b.n	80048ba <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d102      	bne.n	80048c8 <xQueueGenericCreateStatic+0x78>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <xQueueGenericCreateStatic+0x7c>
 80048c8:	2301      	movs	r3, #1
 80048ca:	e000      	b.n	80048ce <xQueueGenericCreateStatic+0x7e>
 80048cc:	2300      	movs	r3, #0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d109      	bne.n	80048e6 <xQueueGenericCreateStatic+0x96>
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	61fb      	str	r3, [r7, #28]
 80048e4:	e7fe      	b.n	80048e4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80048e6:	2350      	movs	r3, #80	; 0x50
 80048e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2b50      	cmp	r3, #80	; 0x50
 80048ee:	d009      	beq.n	8004904 <xQueueGenericCreateStatic+0xb4>
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	61bb      	str	r3, [r7, #24]
 8004902:	e7fe      	b.n	8004902 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00d      	beq.n	800492a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800490e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004910:	2201      	movs	r2, #1
 8004912:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004916:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800491a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	4613      	mov	r3, r2
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	68b9      	ldr	r1, [r7, #8]
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 f842 	bl	80049ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800492a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800492c:	4618      	mov	r0, r3
 800492e:	3730      	adds	r7, #48	; 0x30
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004934:	b580      	push	{r7, lr}
 8004936:	b08a      	sub	sp, #40	; 0x28
 8004938:	af02      	add	r7, sp, #8
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	4613      	mov	r3, r2
 8004940:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d109      	bne.n	800495c <xQueueGenericCreate+0x28>
 8004948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	e7fe      	b.n	800495a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d102      	bne.n	8004968 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004962:	2300      	movs	r3, #0
 8004964:	61fb      	str	r3, [r7, #28]
 8004966:	e004      	b.n	8004972 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	fb02 f303 	mul.w	r3, r2, r3
 8004970:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	3350      	adds	r3, #80	; 0x50
 8004976:	4618      	mov	r0, r3
 8004978:	f002 fbf4 	bl	8007164 <pvPortMalloc>
 800497c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00f      	beq.n	80049a4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	3350      	adds	r3, #80	; 0x50
 8004988:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004992:	79fa      	ldrb	r2, [r7, #7]
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	4613      	mov	r3, r2
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	68b9      	ldr	r1, [r7, #8]
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 f805 	bl	80049ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80049a4:	69bb      	ldr	r3, [r7, #24]
	}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3720      	adds	r7, #32
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b084      	sub	sp, #16
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	607a      	str	r2, [r7, #4]
 80049ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d103      	bne.n	80049ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	e002      	b.n	80049d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049dc:	2101      	movs	r1, #1
 80049de:	69b8      	ldr	r0, [r7, #24]
 80049e0:	f7ff fece 	bl	8004780 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	78fa      	ldrb	r2, [r7, #3]
 80049e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80049ec:	bf00      	nop
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08a      	sub	sp, #40	; 0x28
 80049f8:	af02      	add	r7, sp, #8
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d109      	bne.n	8004a1a <xQueueCreateCountingSemaphoreStatic+0x26>
 8004a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	e7fe      	b.n	8004a18 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d909      	bls.n	8004a36 <xQueueCreateCountingSemaphoreStatic+0x42>
 8004a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	e7fe      	b.n	8004a34 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004a36:	2302      	movs	r3, #2
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	2100      	movs	r1, #0
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f7ff ff05 	bl	8004850 <xQueueGenericCreateStatic>
 8004a46:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004a54:	69fb      	ldr	r3, [r7, #28]
	}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3720      	adds	r7, #32
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b086      	sub	sp, #24
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d109      	bne.n	8004a82 <xQueueCreateCountingSemaphore+0x24>
 8004a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	613b      	str	r3, [r7, #16]
 8004a80:	e7fe      	b.n	8004a80 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d909      	bls.n	8004a9e <xQueueCreateCountingSemaphore+0x40>
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	e7fe      	b.n	8004a9c <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7ff ff46 	bl	8004934 <xQueueGenericCreate>
 8004aa8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004ab6:	697b      	ldr	r3, [r7, #20]
	}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08e      	sub	sp, #56	; 0x38
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d109      	bne.n	8004af0 <xQueueGenericSend+0x30>
 8004adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aee:	e7fe      	b.n	8004aee <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d103      	bne.n	8004afe <xQueueGenericSend+0x3e>
 8004af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <xQueueGenericSend+0x42>
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <xQueueGenericSend+0x44>
 8004b02:	2300      	movs	r3, #0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d109      	bne.n	8004b1c <xQueueGenericSend+0x5c>
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	627b      	str	r3, [r7, #36]	; 0x24
 8004b1a:	e7fe      	b.n	8004b1a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d103      	bne.n	8004b2a <xQueueGenericSend+0x6a>
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d101      	bne.n	8004b2e <xQueueGenericSend+0x6e>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e000      	b.n	8004b30 <xQueueGenericSend+0x70>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d109      	bne.n	8004b48 <xQueueGenericSend+0x88>
 8004b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	623b      	str	r3, [r7, #32]
 8004b46:	e7fe      	b.n	8004b46 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b48:	f001 fc3e 	bl	80063c8 <xTaskGetSchedulerState>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d102      	bne.n	8004b58 <xQueueGenericSend+0x98>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <xQueueGenericSend+0x9c>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e000      	b.n	8004b5e <xQueueGenericSend+0x9e>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d109      	bne.n	8004b76 <xQueueGenericSend+0xb6>
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	61fb      	str	r3, [r7, #28]
 8004b74:	e7fe      	b.n	8004b74 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b76:	f002 f9ff 	bl	8006f78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d302      	bcc.n	8004b8c <xQueueGenericSend+0xcc>
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d129      	bne.n	8004be0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	68b9      	ldr	r1, [r7, #8]
 8004b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b92:	f000 fc7e 	bl	8005492 <prvCopyDataToQueue>
 8004b96:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d010      	beq.n	8004bc2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba2:	3324      	adds	r3, #36	; 0x24
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f001 fa55 	bl	8006054 <xTaskRemoveFromEventList>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d013      	beq.n	8004bd8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004bb0:	4b3f      	ldr	r3, [pc, #252]	; (8004cb0 <xQueueGenericSend+0x1f0>)
 8004bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	e00a      	b.n	8004bd8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d007      	beq.n	8004bd8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004bc8:	4b39      	ldr	r3, [pc, #228]	; (8004cb0 <xQueueGenericSend+0x1f0>)
 8004bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004bd8:	f002 f9fc 	bl	8006fd4 <vPortExitCritical>
				return pdPASS;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e063      	b.n	8004ca8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d103      	bne.n	8004bee <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004be6:	f002 f9f5 	bl	8006fd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	e05c      	b.n	8004ca8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d106      	bne.n	8004c02 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bf4:	f107 0314 	add.w	r3, r7, #20
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f001 fa8d 	bl	8006118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c02:	f002 f9e7 	bl	8006fd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c06:	f001 f805 	bl	8005c14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c0a:	f002 f9b5 	bl	8006f78 <vPortEnterCritical>
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c14:	b25b      	sxtb	r3, r3
 8004c16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c1a:	d103      	bne.n	8004c24 <xQueueGenericSend+0x164>
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c2a:	b25b      	sxtb	r3, r3
 8004c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c30:	d103      	bne.n	8004c3a <xQueueGenericSend+0x17a>
 8004c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c3a:	f002 f9cb 	bl	8006fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c3e:	1d3a      	adds	r2, r7, #4
 8004c40:	f107 0314 	add.w	r3, r7, #20
 8004c44:	4611      	mov	r1, r2
 8004c46:	4618      	mov	r0, r3
 8004c48:	f001 fa7c 	bl	8006144 <xTaskCheckForTimeOut>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d124      	bne.n	8004c9c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c54:	f000 fd15 	bl	8005682 <prvIsQueueFull>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d018      	beq.n	8004c90 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c60:	3310      	adds	r3, #16
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	4611      	mov	r1, r2
 8004c66:	4618      	mov	r0, r3
 8004c68:	f001 f9a6 	bl	8005fb8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c6e:	f000 fca0 	bl	80055b2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c72:	f000 ffdd 	bl	8005c30 <xTaskResumeAll>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f47f af7c 	bne.w	8004b76 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004c7e:	4b0c      	ldr	r3, [pc, #48]	; (8004cb0 <xQueueGenericSend+0x1f0>)
 8004c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	e772      	b.n	8004b76 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c92:	f000 fc8e 	bl	80055b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c96:	f000 ffcb 	bl	8005c30 <xTaskResumeAll>
 8004c9a:	e76c      	b.n	8004b76 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c9e:	f000 fc88 	bl	80055b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ca2:	f000 ffc5 	bl	8005c30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ca6:	2300      	movs	r3, #0
		}
	}
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3738      	adds	r7, #56	; 0x38
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	e000ed04 	.word	0xe000ed04

08004cb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08e      	sub	sp, #56	; 0x38
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d109      	bne.n	8004ce0 <xQueueGenericSendFromISR+0x2c>
 8004ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cde:	e7fe      	b.n	8004cde <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d103      	bne.n	8004cee <xQueueGenericSendFromISR+0x3a>
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <xQueueGenericSendFromISR+0x3e>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e000      	b.n	8004cf4 <xQueueGenericSendFromISR+0x40>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d109      	bne.n	8004d0c <xQueueGenericSendFromISR+0x58>
 8004cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	623b      	str	r3, [r7, #32]
 8004d0a:	e7fe      	b.n	8004d0a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d103      	bne.n	8004d1a <xQueueGenericSendFromISR+0x66>
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d101      	bne.n	8004d1e <xQueueGenericSendFromISR+0x6a>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <xQueueGenericSendFromISR+0x6c>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d109      	bne.n	8004d38 <xQueueGenericSendFromISR+0x84>
 8004d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	61fb      	str	r3, [r7, #28]
 8004d36:	e7fe      	b.n	8004d36 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d38:	f002 f9d8 	bl	80070ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d3c:	f3ef 8211 	mrs	r2, BASEPRI
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	61ba      	str	r2, [r7, #24]
 8004d52:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d54:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d56:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d302      	bcc.n	8004d6a <xQueueGenericSendFromISR+0xb6>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d12c      	bne.n	8004dc4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	68b9      	ldr	r1, [r7, #8]
 8004d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d7a:	f000 fb8a 	bl	8005492 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d7e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004d82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d86:	d112      	bne.n	8004dae <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d016      	beq.n	8004dbe <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	3324      	adds	r3, #36	; 0x24
 8004d94:	4618      	mov	r0, r3
 8004d96:	f001 f95d 	bl	8006054 <xTaskRemoveFromEventList>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00e      	beq.n	8004dbe <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00b      	beq.n	8004dbe <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	e007      	b.n	8004dbe <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004dae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004db2:	3301      	adds	r3, #1
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	b25a      	sxtb	r2, r3
 8004db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004dc2:	e001      	b.n	8004dc8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3738      	adds	r7, #56	; 0x38
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08e      	sub	sp, #56	; 0x38
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d109      	bne.n	8004e04 <xQueueGiveFromISR+0x28>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	623b      	str	r3, [r7, #32]
 8004e02:	e7fe      	b.n	8004e02 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d009      	beq.n	8004e20 <xQueueGiveFromISR+0x44>
 8004e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	61fb      	str	r3, [r7, #28]
 8004e1e:	e7fe      	b.n	8004e1e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d103      	bne.n	8004e30 <xQueueGiveFromISR+0x54>
 8004e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <xQueueGiveFromISR+0x58>
 8004e30:	2301      	movs	r3, #1
 8004e32:	e000      	b.n	8004e36 <xQueueGiveFromISR+0x5a>
 8004e34:	2300      	movs	r3, #0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d109      	bne.n	8004e4e <xQueueGiveFromISR+0x72>
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	61bb      	str	r3, [r7, #24]
 8004e4c:	e7fe      	b.n	8004e4c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e4e:	f002 f94d 	bl	80070ec <vPortValidateInterruptPriority>
	__asm volatile
 8004e52:	f3ef 8211 	mrs	r2, BASEPRI
 8004e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5a:	f383 8811 	msr	BASEPRI, r3
 8004e5e:	f3bf 8f6f 	isb	sy
 8004e62:	f3bf 8f4f 	dsb	sy
 8004e66:	617a      	str	r2, [r7, #20]
 8004e68:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004e6a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e72:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d22b      	bcs.n	8004ed6 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e98:	d112      	bne.n	8004ec0 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d016      	beq.n	8004ed0 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	3324      	adds	r3, #36	; 0x24
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f001 f8d4 	bl	8006054 <xTaskRemoveFromEventList>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00e      	beq.n	8004ed0 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00b      	beq.n	8004ed0 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]
 8004ebe:	e007      	b.n	8004ed0 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	b25a      	sxtb	r2, r3
 8004eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ed4:	e001      	b.n	8004eda <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	637b      	str	r3, [r7, #52]	; 0x34
 8004eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004edc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3738      	adds	r7, #56	; 0x38
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08c      	sub	sp, #48	; 0x30
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004efc:	2300      	movs	r3, #0
 8004efe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d109      	bne.n	8004f1e <xQueueReceive+0x2e>
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	623b      	str	r3, [r7, #32]
 8004f1c:	e7fe      	b.n	8004f1c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d103      	bne.n	8004f2c <xQueueReceive+0x3c>
 8004f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <xQueueReceive+0x40>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e000      	b.n	8004f32 <xQueueReceive+0x42>
 8004f30:	2300      	movs	r3, #0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d109      	bne.n	8004f4a <xQueueReceive+0x5a>
 8004f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	61fb      	str	r3, [r7, #28]
 8004f48:	e7fe      	b.n	8004f48 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f4a:	f001 fa3d 	bl	80063c8 <xTaskGetSchedulerState>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d102      	bne.n	8004f5a <xQueueReceive+0x6a>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <xQueueReceive+0x6e>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <xQueueReceive+0x70>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d109      	bne.n	8004f78 <xQueueReceive+0x88>
 8004f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	e7fe      	b.n	8004f76 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f78:	f001 fffe 	bl	8006f78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01f      	beq.n	8004fc8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f88:	68b9      	ldr	r1, [r7, #8]
 8004f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f8c:	f000 faeb 	bl	8005566 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	1e5a      	subs	r2, r3, #1
 8004f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f96:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00f      	beq.n	8004fc0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa2:	3310      	adds	r3, #16
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f001 f855 	bl	8006054 <xTaskRemoveFromEventList>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d007      	beq.n	8004fc0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004fb0:	4b3c      	ldr	r3, [pc, #240]	; (80050a4 <xQueueReceive+0x1b4>)
 8004fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004fc0:	f002 f808 	bl	8006fd4 <vPortExitCritical>
				return pdPASS;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e069      	b.n	800509c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d103      	bne.n	8004fd6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fce:	f002 f801 	bl	8006fd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	e062      	b.n	800509c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d106      	bne.n	8004fea <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fdc:	f107 0310 	add.w	r3, r7, #16
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f001 f899 	bl	8006118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fea:	f001 fff3 	bl	8006fd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fee:	f000 fe11 	bl	8005c14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ff2:	f001 ffc1 	bl	8006f78 <vPortEnterCritical>
 8004ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ffc:	b25b      	sxtb	r3, r3
 8004ffe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005002:	d103      	bne.n	800500c <xQueueReceive+0x11c>
 8005004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800500c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005012:	b25b      	sxtb	r3, r3
 8005014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005018:	d103      	bne.n	8005022 <xQueueReceive+0x132>
 800501a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005022:	f001 ffd7 	bl	8006fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005026:	1d3a      	adds	r2, r7, #4
 8005028:	f107 0310 	add.w	r3, r7, #16
 800502c:	4611      	mov	r1, r2
 800502e:	4618      	mov	r0, r3
 8005030:	f001 f888 	bl	8006144 <xTaskCheckForTimeOut>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d123      	bne.n	8005082 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800503a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800503c:	f000 fb0b 	bl	8005656 <prvIsQueueEmpty>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d017      	beq.n	8005076 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	3324      	adds	r3, #36	; 0x24
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	4611      	mov	r1, r2
 800504e:	4618      	mov	r0, r3
 8005050:	f000 ffb2 	bl	8005fb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005056:	f000 faac 	bl	80055b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800505a:	f000 fde9 	bl	8005c30 <xTaskResumeAll>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d189      	bne.n	8004f78 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005064:	4b0f      	ldr	r3, [pc, #60]	; (80050a4 <xQueueReceive+0x1b4>)
 8005066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	f3bf 8f6f 	isb	sy
 8005074:	e780      	b.n	8004f78 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005078:	f000 fa9b 	bl	80055b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800507c:	f000 fdd8 	bl	8005c30 <xTaskResumeAll>
 8005080:	e77a      	b.n	8004f78 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005084:	f000 fa95 	bl	80055b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005088:	f000 fdd2 	bl	8005c30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800508c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800508e:	f000 fae2 	bl	8005656 <prvIsQueueEmpty>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	f43f af6f 	beq.w	8004f78 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800509a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800509c:	4618      	mov	r0, r3
 800509e:	3730      	adds	r7, #48	; 0x30
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	e000ed04 	.word	0xe000ed04

080050a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08e      	sub	sp, #56	; 0x38
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80050b2:	2300      	movs	r3, #0
 80050b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80050ba:	2300      	movs	r3, #0
 80050bc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80050be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d109      	bne.n	80050d8 <xQueueSemaphoreTake+0x30>
 80050c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	623b      	str	r3, [r7, #32]
 80050d6:	e7fe      	b.n	80050d6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80050d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d009      	beq.n	80050f4 <xQueueSemaphoreTake+0x4c>
 80050e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	61fb      	str	r3, [r7, #28]
 80050f2:	e7fe      	b.n	80050f2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050f4:	f001 f968 	bl	80063c8 <xTaskGetSchedulerState>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d102      	bne.n	8005104 <xQueueSemaphoreTake+0x5c>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <xQueueSemaphoreTake+0x60>
 8005104:	2301      	movs	r3, #1
 8005106:	e000      	b.n	800510a <xQueueSemaphoreTake+0x62>
 8005108:	2300      	movs	r3, #0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d109      	bne.n	8005122 <xQueueSemaphoreTake+0x7a>
 800510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	61bb      	str	r3, [r7, #24]
 8005120:	e7fe      	b.n	8005120 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005122:	f001 ff29 	bl	8006f78 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800512c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512e:	2b00      	cmp	r3, #0
 8005130:	d024      	beq.n	800517c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005134:	1e5a      	subs	r2, r3, #1
 8005136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005138:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800513a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d104      	bne.n	800514c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005142:	f001 fabd 	bl	80066c0 <pvTaskIncrementMutexHeldCount>
 8005146:	4602      	mov	r2, r0
 8005148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800514c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00f      	beq.n	8005174 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005156:	3310      	adds	r3, #16
 8005158:	4618      	mov	r0, r3
 800515a:	f000 ff7b 	bl	8006054 <xTaskRemoveFromEventList>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d007      	beq.n	8005174 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005164:	4b53      	ldr	r3, [pc, #332]	; (80052b4 <xQueueSemaphoreTake+0x20c>)
 8005166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005174:	f001 ff2e 	bl	8006fd4 <vPortExitCritical>
				return pdPASS;
 8005178:	2301      	movs	r3, #1
 800517a:	e096      	b.n	80052aa <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d110      	bne.n	80051a4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005184:	2b00      	cmp	r3, #0
 8005186:	d009      	beq.n	800519c <xQueueSemaphoreTake+0xf4>
 8005188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	e7fe      	b.n	800519a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800519c:	f001 ff1a 	bl	8006fd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80051a0:	2300      	movs	r3, #0
 80051a2:	e082      	b.n	80052aa <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d106      	bne.n	80051b8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051aa:	f107 030c 	add.w	r3, r7, #12
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 ffb2 	bl	8006118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051b4:	2301      	movs	r3, #1
 80051b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051b8:	f001 ff0c 	bl	8006fd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051bc:	f000 fd2a 	bl	8005c14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051c0:	f001 feda 	bl	8006f78 <vPortEnterCritical>
 80051c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051ca:	b25b      	sxtb	r3, r3
 80051cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051d0:	d103      	bne.n	80051da <xQueueSemaphoreTake+0x132>
 80051d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051e0:	b25b      	sxtb	r3, r3
 80051e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051e6:	d103      	bne.n	80051f0 <xQueueSemaphoreTake+0x148>
 80051e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051f0:	f001 fef0 	bl	8006fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051f4:	463a      	mov	r2, r7
 80051f6:	f107 030c 	add.w	r3, r7, #12
 80051fa:	4611      	mov	r1, r2
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 ffa1 	bl	8006144 <xTaskCheckForTimeOut>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d132      	bne.n	800526e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005208:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800520a:	f000 fa24 	bl	8005656 <prvIsQueueEmpty>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d026      	beq.n	8005262 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d109      	bne.n	8005230 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800521c:	f001 feac 	bl	8006f78 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	4618      	mov	r0, r3
 8005226:	f001 f8ed 	bl	8006404 <xTaskPriorityInherit>
 800522a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800522c:	f001 fed2 	bl	8006fd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005232:	3324      	adds	r3, #36	; 0x24
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	4611      	mov	r1, r2
 8005238:	4618      	mov	r0, r3
 800523a:	f000 febd 	bl	8005fb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800523e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005240:	f000 f9b7 	bl	80055b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005244:	f000 fcf4 	bl	8005c30 <xTaskResumeAll>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	f47f af69 	bne.w	8005122 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005250:	4b18      	ldr	r3, [pc, #96]	; (80052b4 <xQueueSemaphoreTake+0x20c>)
 8005252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	e75f      	b.n	8005122 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005262:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005264:	f000 f9a5 	bl	80055b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005268:	f000 fce2 	bl	8005c30 <xTaskResumeAll>
 800526c:	e759      	b.n	8005122 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800526e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005270:	f000 f99f 	bl	80055b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005274:	f000 fcdc 	bl	8005c30 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005278:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800527a:	f000 f9ec 	bl	8005656 <prvIsQueueEmpty>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	f43f af4e 	beq.w	8005122 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00d      	beq.n	80052a8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800528c:	f001 fe74 	bl	8006f78 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005290:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005292:	f000 f8e7 	bl	8005464 <prvGetDisinheritPriorityAfterTimeout>
 8005296:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800529e:	4618      	mov	r0, r3
 80052a0:	f001 f98a 	bl	80065b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80052a4:	f001 fe96 	bl	8006fd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80052a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3738      	adds	r7, #56	; 0x38
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	e000ed04 	.word	0xe000ed04

080052b8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b08e      	sub	sp, #56	; 0x38
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80052c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d109      	bne.n	80052e2 <xQueueReceiveFromISR+0x2a>
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	623b      	str	r3, [r7, #32]
 80052e0:	e7fe      	b.n	80052e0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d103      	bne.n	80052f0 <xQueueReceiveFromISR+0x38>
 80052e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <xQueueReceiveFromISR+0x3c>
 80052f0:	2301      	movs	r3, #1
 80052f2:	e000      	b.n	80052f6 <xQueueReceiveFromISR+0x3e>
 80052f4:	2300      	movs	r3, #0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d109      	bne.n	800530e <xQueueReceiveFromISR+0x56>
 80052fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	61fb      	str	r3, [r7, #28]
 800530c:	e7fe      	b.n	800530c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800530e:	f001 feed 	bl	80070ec <vPortValidateInterruptPriority>
	__asm volatile
 8005312:	f3ef 8211 	mrs	r2, BASEPRI
 8005316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531a:	f383 8811 	msr	BASEPRI, r3
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f3bf 8f4f 	dsb	sy
 8005326:	61ba      	str	r2, [r7, #24]
 8005328:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800532a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800532c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005332:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	2b00      	cmp	r3, #0
 8005338:	d02f      	beq.n	800539a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005348:	f000 f90d 	bl	8005566 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800534c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534e:	1e5a      	subs	r2, r3, #1
 8005350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005352:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005354:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800535c:	d112      	bne.n	8005384 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800535e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d016      	beq.n	8005394 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005368:	3310      	adds	r3, #16
 800536a:	4618      	mov	r0, r3
 800536c:	f000 fe72 	bl	8006054 <xTaskRemoveFromEventList>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00e      	beq.n	8005394 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00b      	beq.n	8005394 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	e007      	b.n	8005394 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005388:	3301      	adds	r3, #1
 800538a:	b2db      	uxtb	r3, r3
 800538c:	b25a      	sxtb	r2, r3
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005394:	2301      	movs	r3, #1
 8005396:	637b      	str	r3, [r7, #52]	; 0x34
 8005398:	e001      	b.n	800539e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800539a:	2300      	movs	r3, #0
 800539c:	637b      	str	r3, [r7, #52]	; 0x34
 800539e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3738      	adds	r7, #56	; 0x38
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d109      	bne.n	80053d4 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	60bb      	str	r3, [r7, #8]
 80053d2:	e7fe      	b.n	80053d2 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 80053d4:	f001 fdd0 	bl	8006f78 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80053de:	f001 fdf9 	bl	8006fd4 <vPortExitCritical>

	return uxReturn;
 80053e2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d109      	bne.n	800540e <uxQueueMessagesWaitingFromISR+0x22>
 80053fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	60bb      	str	r3, [r7, #8]
 800540c:	e7fe      	b.n	800540c <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005412:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8005414:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	bc80      	pop	{r7}
 800541e:	4770      	bx	lr

08005420 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d109      	bne.n	8005446 <vQueueDelete+0x26>
 8005432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	60bb      	str	r3, [r7, #8]
 8005444:	e7fe      	b.n	8005444 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 f95c 	bl	8005704 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005452:	2b00      	cmp	r3, #0
 8005454:	d102      	bne.n	800545c <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f001 ff46 	bl	80072e8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800545c:	bf00      	nop
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	2b00      	cmp	r3, #0
 8005472:	d006      	beq.n	8005482 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800547e:	60fb      	str	r3, [r7, #12]
 8005480:	e001      	b.n	8005486 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005482:	2300      	movs	r3, #0
 8005484:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005486:	68fb      	ldr	r3, [r7, #12]
	}
 8005488:	4618      	mov	r0, r3
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	bc80      	pop	{r7}
 8005490:	4770      	bx	lr

08005492 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b086      	sub	sp, #24
 8005496:	af00      	add	r7, sp, #0
 8005498:	60f8      	str	r0, [r7, #12]
 800549a:	60b9      	str	r1, [r7, #8]
 800549c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800549e:	2300      	movs	r3, #0
 80054a0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10d      	bne.n	80054cc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d14d      	bne.n	8005554 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	4618      	mov	r0, r3
 80054be:	f001 f80f 	bl	80064e0 <xTaskPriorityDisinherit>
 80054c2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	605a      	str	r2, [r3, #4]
 80054ca:	e043      	b.n	8005554 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d119      	bne.n	8005506 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6898      	ldr	r0, [r3, #8]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	461a      	mov	r2, r3
 80054dc:	68b9      	ldr	r1, [r7, #8]
 80054de:	f002 f83f 	bl	8007560 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	689a      	ldr	r2, [r3, #8]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ea:	441a      	add	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d32b      	bcc.n	8005554 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	609a      	str	r2, [r3, #8]
 8005504:	e026      	b.n	8005554 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	68d8      	ldr	r0, [r3, #12]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	461a      	mov	r2, r3
 8005510:	68b9      	ldr	r1, [r7, #8]
 8005512:	f002 f825 	bl	8007560 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	68da      	ldr	r2, [r3, #12]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	425b      	negs	r3, r3
 8005520:	441a      	add	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	429a      	cmp	r2, r3
 8005530:	d207      	bcs.n	8005542 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	425b      	negs	r3, r3
 800553c:	441a      	add	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b02      	cmp	r3, #2
 8005546:	d105      	bne.n	8005554 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	3b01      	subs	r3, #1
 8005552:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800555c:	697b      	ldr	r3, [r7, #20]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005574:	2b00      	cmp	r3, #0
 8005576:	d018      	beq.n	80055aa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005580:	441a      	add	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68da      	ldr	r2, [r3, #12]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	429a      	cmp	r2, r3
 8005590:	d303      	bcc.n	800559a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68d9      	ldr	r1, [r3, #12]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	461a      	mov	r2, r3
 80055a4:	6838      	ldr	r0, [r7, #0]
 80055a6:	f001 ffdb 	bl	8007560 <memcpy>
	}
}
 80055aa:	bf00      	nop
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b084      	sub	sp, #16
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80055ba:	f001 fcdd 	bl	8006f78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055c4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055c6:	e011      	b.n	80055ec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d012      	beq.n	80055f6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3324      	adds	r3, #36	; 0x24
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fd3d 	bl	8006054 <xTaskRemoveFromEventList>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80055e0:	f000 fe10 	bl	8006204 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	dce9      	bgt.n	80055c8 <prvUnlockQueue+0x16>
 80055f4:	e000      	b.n	80055f8 <prvUnlockQueue+0x46>
					break;
 80055f6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	22ff      	movs	r2, #255	; 0xff
 80055fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005600:	f001 fce8 	bl	8006fd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005604:	f001 fcb8 	bl	8006f78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800560e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005610:	e011      	b.n	8005636 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d012      	beq.n	8005640 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	3310      	adds	r3, #16
 800561e:	4618      	mov	r0, r3
 8005620:	f000 fd18 	bl	8006054 <xTaskRemoveFromEventList>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800562a:	f000 fdeb 	bl	8006204 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800562e:	7bbb      	ldrb	r3, [r7, #14]
 8005630:	3b01      	subs	r3, #1
 8005632:	b2db      	uxtb	r3, r3
 8005634:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005636:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800563a:	2b00      	cmp	r3, #0
 800563c:	dce9      	bgt.n	8005612 <prvUnlockQueue+0x60>
 800563e:	e000      	b.n	8005642 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005640:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	22ff      	movs	r2, #255	; 0xff
 8005646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800564a:	f001 fcc3 	bl	8006fd4 <vPortExitCritical>
}
 800564e:	bf00      	nop
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b084      	sub	sp, #16
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800565e:	f001 fc8b 	bl	8006f78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005666:	2b00      	cmp	r3, #0
 8005668:	d102      	bne.n	8005670 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800566a:	2301      	movs	r3, #1
 800566c:	60fb      	str	r3, [r7, #12]
 800566e:	e001      	b.n	8005674 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005670:	2300      	movs	r3, #0
 8005672:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005674:	f001 fcae 	bl	8006fd4 <vPortExitCritical>

	return xReturn;
 8005678:	68fb      	ldr	r3, [r7, #12]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800568a:	f001 fc75 	bl	8006f78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005696:	429a      	cmp	r2, r3
 8005698:	d102      	bne.n	80056a0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800569a:	2301      	movs	r3, #1
 800569c:	60fb      	str	r3, [r7, #12]
 800569e:	e001      	b.n	80056a4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80056a0:	2300      	movs	r3, #0
 80056a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056a4:	f001 fc96 	bl	8006fd4 <vPortExitCritical>

	return xReturn;
 80056a8:	68fb      	ldr	r3, [r7, #12]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
	...

080056b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056be:	2300      	movs	r3, #0
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	e014      	b.n	80056ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80056c4:	4a0e      	ldr	r2, [pc, #56]	; (8005700 <vQueueAddToRegistry+0x4c>)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10b      	bne.n	80056e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80056d0:	490b      	ldr	r1, [pc, #44]	; (8005700 <vQueueAddToRegistry+0x4c>)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80056da:	4a09      	ldr	r2, [pc, #36]	; (8005700 <vQueueAddToRegistry+0x4c>)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	4413      	add	r3, r2
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80056e6:	e005      	b.n	80056f4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	3301      	adds	r3, #1
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2b07      	cmp	r3, #7
 80056f2:	d9e7      	bls.n	80056c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80056f4:	bf00      	nop
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bc80      	pop	{r7}
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	20001c6c 	.word	0x20001c6c

08005704 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800570c:	2300      	movs	r3, #0
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	e016      	b.n	8005740 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005712:	4a0f      	ldr	r2, [pc, #60]	; (8005750 <vQueueUnregisterQueue+0x4c>)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	4413      	add	r3, r2
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	429a      	cmp	r2, r3
 8005720:	d10b      	bne.n	800573a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005722:	4a0b      	ldr	r2, [pc, #44]	; (8005750 <vQueueUnregisterQueue+0x4c>)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2100      	movs	r1, #0
 8005728:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800572c:	4a08      	ldr	r2, [pc, #32]	; (8005750 <vQueueUnregisterQueue+0x4c>)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	4413      	add	r3, r2
 8005734:	2200      	movs	r2, #0
 8005736:	605a      	str	r2, [r3, #4]
				break;
 8005738:	e005      	b.n	8005746 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3301      	adds	r3, #1
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2b07      	cmp	r3, #7
 8005744:	d9e5      	bls.n	8005712 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005746:	bf00      	nop
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	bc80      	pop	{r7}
 800574e:	4770      	bx	lr
 8005750:	20001c6c 	.word	0x20001c6c

08005754 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005764:	f001 fc08 	bl	8006f78 <vPortEnterCritical>
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800576e:	b25b      	sxtb	r3, r3
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005774:	d103      	bne.n	800577e <vQueueWaitForMessageRestricted+0x2a>
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005784:	b25b      	sxtb	r3, r3
 8005786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800578a:	d103      	bne.n	8005794 <vQueueWaitForMessageRestricted+0x40>
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005794:	f001 fc1e 	bl	8006fd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	2b00      	cmp	r3, #0
 800579e:	d106      	bne.n	80057ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	3324      	adds	r3, #36	; 0x24
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	68b9      	ldr	r1, [r7, #8]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 fc29 	bl	8006000 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80057ae:	6978      	ldr	r0, [r7, #20]
 80057b0:	f7ff feff 	bl	80055b2 <prvUnlockQueue>
	}
 80057b4:	bf00      	nop
 80057b6:	3718      	adds	r7, #24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b08e      	sub	sp, #56	; 0x38
 80057c0:	af04      	add	r7, sp, #16
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d109      	bne.n	80057e4 <xTaskCreateStatic+0x28>
 80057d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	623b      	str	r3, [r7, #32]
 80057e2:	e7fe      	b.n	80057e2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80057e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d109      	bne.n	80057fe <xTaskCreateStatic+0x42>
 80057ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ee:	f383 8811 	msr	BASEPRI, r3
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	f3bf 8f4f 	dsb	sy
 80057fa:	61fb      	str	r3, [r7, #28]
 80057fc:	e7fe      	b.n	80057fc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057fe:	235c      	movs	r3, #92	; 0x5c
 8005800:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	2b5c      	cmp	r3, #92	; 0x5c
 8005806:	d009      	beq.n	800581c <xTaskCreateStatic+0x60>
 8005808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580c:	f383 8811 	msr	BASEPRI, r3
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	61bb      	str	r3, [r7, #24]
 800581a:	e7fe      	b.n	800581a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581e:	2b00      	cmp	r3, #0
 8005820:	d01e      	beq.n	8005860 <xTaskCreateStatic+0xa4>
 8005822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005824:	2b00      	cmp	r3, #0
 8005826:	d01b      	beq.n	8005860 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005830:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	2202      	movs	r2, #2
 8005836:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800583a:	2300      	movs	r3, #0
 800583c:	9303      	str	r3, [sp, #12]
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	9302      	str	r3, [sp, #8]
 8005842:	f107 0314 	add.w	r3, r7, #20
 8005846:	9301      	str	r3, [sp, #4]
 8005848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	68b9      	ldr	r1, [r7, #8]
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 f850 	bl	80058f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005858:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800585a:	f000 f8d3 	bl	8005a04 <prvAddNewTaskToReadyList>
 800585e:	e001      	b.n	8005864 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005860:	2300      	movs	r3, #0
 8005862:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005864:	697b      	ldr	r3, [r7, #20]
	}
 8005866:	4618      	mov	r0, r3
 8005868:	3728      	adds	r7, #40	; 0x28
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800586e:	b580      	push	{r7, lr}
 8005870:	b08c      	sub	sp, #48	; 0x30
 8005872:	af04      	add	r7, sp, #16
 8005874:	60f8      	str	r0, [r7, #12]
 8005876:	60b9      	str	r1, [r7, #8]
 8005878:	603b      	str	r3, [r7, #0]
 800587a:	4613      	mov	r3, r2
 800587c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800587e:	88fb      	ldrh	r3, [r7, #6]
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4618      	mov	r0, r3
 8005884:	f001 fc6e 	bl	8007164 <pvPortMalloc>
 8005888:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00e      	beq.n	80058ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005890:	205c      	movs	r0, #92	; 0x5c
 8005892:	f001 fc67 	bl	8007164 <pvPortMalloc>
 8005896:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	631a      	str	r2, [r3, #48]	; 0x30
 80058a4:	e005      	b.n	80058b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058a6:	6978      	ldr	r0, [r7, #20]
 80058a8:	f001 fd1e 	bl	80072e8 <vPortFree>
 80058ac:	e001      	b.n	80058b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d017      	beq.n	80058e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058c0:	88fa      	ldrh	r2, [r7, #6]
 80058c2:	2300      	movs	r3, #0
 80058c4:	9303      	str	r3, [sp, #12]
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	9302      	str	r3, [sp, #8]
 80058ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058cc:	9301      	str	r3, [sp, #4]
 80058ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	68b9      	ldr	r1, [r7, #8]
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f000 f80e 	bl	80058f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058dc:	69f8      	ldr	r0, [r7, #28]
 80058de:	f000 f891 	bl	8005a04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058e2:	2301      	movs	r3, #1
 80058e4:	61bb      	str	r3, [r7, #24]
 80058e6:	e002      	b.n	80058ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80058ee:	69bb      	ldr	r3, [r7, #24]
	}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3720      	adds	r7, #32
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b088      	sub	sp, #32
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005908:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	461a      	mov	r2, r3
 8005910:	21a5      	movs	r1, #165	; 0xa5
 8005912:	f001 fe30 	bl	8007576 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005920:	3b01      	subs	r3, #1
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	f023 0307 	bic.w	r3, r3, #7
 800592e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	2b00      	cmp	r3, #0
 8005938:	d009      	beq.n	800594e <prvInitialiseNewTask+0x56>
 800593a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	617b      	str	r3, [r7, #20]
 800594c:	e7fe      	b.n	800594c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800594e:	2300      	movs	r3, #0
 8005950:	61fb      	str	r3, [r7, #28]
 8005952:	e012      	b.n	800597a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	4413      	add	r3, r2
 800595a:	7819      	ldrb	r1, [r3, #0]
 800595c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	4413      	add	r3, r2
 8005962:	3334      	adds	r3, #52	; 0x34
 8005964:	460a      	mov	r2, r1
 8005966:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	4413      	add	r3, r2
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d006      	beq.n	8005982 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	3301      	adds	r3, #1
 8005978:	61fb      	str	r3, [r7, #28]
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	2b0f      	cmp	r3, #15
 800597e:	d9e9      	bls.n	8005954 <prvInitialiseNewTask+0x5c>
 8005980:	e000      	b.n	8005984 <prvInitialiseNewTask+0x8c>
		{
			break;
 8005982:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800598c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598e:	2b37      	cmp	r3, #55	; 0x37
 8005990:	d901      	bls.n	8005996 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005992:	2337      	movs	r3, #55	; 0x37
 8005994:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800599a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800599c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059a0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80059a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a4:	2200      	movs	r2, #0
 80059a6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059aa:	3304      	adds	r3, #4
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7fe fe56 	bl	800465e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b4:	3318      	adds	r3, #24
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fe fe51 	bl	800465e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059d0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d4:	2200      	movs	r2, #0
 80059d6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	68f9      	ldr	r1, [r7, #12]
 80059e4:	69b8      	ldr	r0, [r7, #24]
 80059e6:	f001 f9dd 	bl	8006da4 <pxPortInitialiseStack>
 80059ea:	4602      	mov	r2, r0
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80059f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d002      	beq.n	80059fc <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059fc:	bf00      	nop
 80059fe:	3720      	adds	r7, #32
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a0c:	f001 fab4 	bl	8006f78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a10:	4b2d      	ldr	r3, [pc, #180]	; (8005ac8 <prvAddNewTaskToReadyList+0xc4>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3301      	adds	r3, #1
 8005a16:	4a2c      	ldr	r2, [pc, #176]	; (8005ac8 <prvAddNewTaskToReadyList+0xc4>)
 8005a18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a1a:	4b2c      	ldr	r3, [pc, #176]	; (8005acc <prvAddNewTaskToReadyList+0xc8>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d109      	bne.n	8005a36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a22:	4a2a      	ldr	r2, [pc, #168]	; (8005acc <prvAddNewTaskToReadyList+0xc8>)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a28:	4b27      	ldr	r3, [pc, #156]	; (8005ac8 <prvAddNewTaskToReadyList+0xc4>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d110      	bne.n	8005a52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a30:	f000 fc0c 	bl	800624c <prvInitialiseTaskLists>
 8005a34:	e00d      	b.n	8005a52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a36:	4b26      	ldr	r3, [pc, #152]	; (8005ad0 <prvAddNewTaskToReadyList+0xcc>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d109      	bne.n	8005a52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a3e:	4b23      	ldr	r3, [pc, #140]	; (8005acc <prvAddNewTaskToReadyList+0xc8>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d802      	bhi.n	8005a52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a4c:	4a1f      	ldr	r2, [pc, #124]	; (8005acc <prvAddNewTaskToReadyList+0xc8>)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a52:	4b20      	ldr	r3, [pc, #128]	; (8005ad4 <prvAddNewTaskToReadyList+0xd0>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3301      	adds	r3, #1
 8005a58:	4a1e      	ldr	r2, [pc, #120]	; (8005ad4 <prvAddNewTaskToReadyList+0xd0>)
 8005a5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a5c:	4b1d      	ldr	r3, [pc, #116]	; (8005ad4 <prvAddNewTaskToReadyList+0xd0>)
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a68:	4b1b      	ldr	r3, [pc, #108]	; (8005ad8 <prvAddNewTaskToReadyList+0xd4>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d903      	bls.n	8005a78 <prvAddNewTaskToReadyList+0x74>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	4a18      	ldr	r2, [pc, #96]	; (8005ad8 <prvAddNewTaskToReadyList+0xd4>)
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4a15      	ldr	r2, [pc, #84]	; (8005adc <prvAddNewTaskToReadyList+0xd8>)
 8005a86:	441a      	add	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4610      	mov	r0, r2
 8005a90:	f7fe fdf1 	bl	8004676 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a94:	f001 fa9e 	bl	8006fd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a98:	4b0d      	ldr	r3, [pc, #52]	; (8005ad0 <prvAddNewTaskToReadyList+0xcc>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00e      	beq.n	8005abe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005aa0:	4b0a      	ldr	r3, [pc, #40]	; (8005acc <prvAddNewTaskToReadyList+0xc8>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d207      	bcs.n	8005abe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005aae:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <prvAddNewTaskToReadyList+0xdc>)
 8005ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005abe:	bf00      	nop
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20000c28 	.word	0x20000c28
 8005acc:	20000754 	.word	0x20000754
 8005ad0:	20000c34 	.word	0x20000c34
 8005ad4:	20000c44 	.word	0x20000c44
 8005ad8:	20000c30 	.word	0x20000c30
 8005adc:	20000758 	.word	0x20000758
 8005ae0:	e000ed04 	.word	0xe000ed04

08005ae4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005aec:	2300      	movs	r3, #0
 8005aee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d016      	beq.n	8005b24 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005af6:	4b13      	ldr	r3, [pc, #76]	; (8005b44 <vTaskDelay+0x60>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d009      	beq.n	8005b12 <vTaskDelay+0x2e>
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	60bb      	str	r3, [r7, #8]
 8005b10:	e7fe      	b.n	8005b10 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005b12:	f000 f87f 	bl	8005c14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b16:	2100      	movs	r1, #0
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fde5 	bl	80066e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b1e:	f000 f887 	bl	8005c30 <xTaskResumeAll>
 8005b22:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d107      	bne.n	8005b3a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005b2a:	4b07      	ldr	r3, [pc, #28]	; (8005b48 <vTaskDelay+0x64>)
 8005b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b3a:	bf00      	nop
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	20000c50 	.word	0x20000c50
 8005b48:	e000ed04 	.word	0xe000ed04

08005b4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08a      	sub	sp, #40	; 0x28
 8005b50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b56:	2300      	movs	r3, #0
 8005b58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b5a:	463a      	mov	r2, r7
 8005b5c:	1d39      	adds	r1, r7, #4
 8005b5e:	f107 0308 	add.w	r3, r7, #8
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fe fd2a 	bl	80045bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b68:	6839      	ldr	r1, [r7, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	9202      	str	r2, [sp, #8]
 8005b70:	9301      	str	r3, [sp, #4]
 8005b72:	2300      	movs	r3, #0
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	2300      	movs	r3, #0
 8005b78:	460a      	mov	r2, r1
 8005b7a:	4920      	ldr	r1, [pc, #128]	; (8005bfc <vTaskStartScheduler+0xb0>)
 8005b7c:	4820      	ldr	r0, [pc, #128]	; (8005c00 <vTaskStartScheduler+0xb4>)
 8005b7e:	f7ff fe1d 	bl	80057bc <xTaskCreateStatic>
 8005b82:	4602      	mov	r2, r0
 8005b84:	4b1f      	ldr	r3, [pc, #124]	; (8005c04 <vTaskStartScheduler+0xb8>)
 8005b86:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b88:	4b1e      	ldr	r3, [pc, #120]	; (8005c04 <vTaskStartScheduler+0xb8>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b90:	2301      	movs	r3, #1
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	e001      	b.n	8005b9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d102      	bne.n	8005ba6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ba0:	f000 fdf6 	bl	8006790 <xTimerCreateTimerTask>
 8005ba4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d115      	bne.n	8005bd8 <vTaskStartScheduler+0x8c>
 8005bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005bbe:	4b12      	ldr	r3, [pc, #72]	; (8005c08 <vTaskStartScheduler+0xbc>)
 8005bc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005bc6:	4b11      	ldr	r3, [pc, #68]	; (8005c0c <vTaskStartScheduler+0xc0>)
 8005bc8:	2201      	movs	r2, #1
 8005bca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005bcc:	4b10      	ldr	r3, [pc, #64]	; (8005c10 <vTaskStartScheduler+0xc4>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005bd2:	f001 f961 	bl	8006e98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005bd6:	e00d      	b.n	8005bf4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bde:	d109      	bne.n	8005bf4 <vTaskStartScheduler+0xa8>
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	e7fe      	b.n	8005bf2 <vTaskStartScheduler+0xa6>
}
 8005bf4:	bf00      	nop
 8005bf6:	3718      	adds	r7, #24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	080085dc 	.word	0x080085dc
 8005c00:	0800621d 	.word	0x0800621d
 8005c04:	20000c4c 	.word	0x20000c4c
 8005c08:	20000c48 	.word	0x20000c48
 8005c0c:	20000c34 	.word	0x20000c34
 8005c10:	20000c2c 	.word	0x20000c2c

08005c14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005c18:	4b04      	ldr	r3, [pc, #16]	; (8005c2c <vTaskSuspendAll+0x18>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	4a03      	ldr	r2, [pc, #12]	; (8005c2c <vTaskSuspendAll+0x18>)
 8005c20:	6013      	str	r3, [r2, #0]
}
 8005c22:	bf00      	nop
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	20000c50 	.word	0x20000c50

08005c30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c3e:	4b41      	ldr	r3, [pc, #260]	; (8005d44 <xTaskResumeAll+0x114>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d109      	bne.n	8005c5a <xTaskResumeAll+0x2a>
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	603b      	str	r3, [r7, #0]
 8005c58:	e7fe      	b.n	8005c58 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c5a:	f001 f98d 	bl	8006f78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c5e:	4b39      	ldr	r3, [pc, #228]	; (8005d44 <xTaskResumeAll+0x114>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	4a37      	ldr	r2, [pc, #220]	; (8005d44 <xTaskResumeAll+0x114>)
 8005c66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c68:	4b36      	ldr	r3, [pc, #216]	; (8005d44 <xTaskResumeAll+0x114>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d162      	bne.n	8005d36 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c70:	4b35      	ldr	r3, [pc, #212]	; (8005d48 <xTaskResumeAll+0x118>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d05e      	beq.n	8005d36 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c78:	e02f      	b.n	8005cda <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005c7a:	4b34      	ldr	r3, [pc, #208]	; (8005d4c <xTaskResumeAll+0x11c>)
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	3318      	adds	r3, #24
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fe fd50 	bl	800472c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7fe fd4b 	bl	800472c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9a:	4b2d      	ldr	r3, [pc, #180]	; (8005d50 <xTaskResumeAll+0x120>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d903      	bls.n	8005caa <xTaskResumeAll+0x7a>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca6:	4a2a      	ldr	r2, [pc, #168]	; (8005d50 <xTaskResumeAll+0x120>)
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cae:	4613      	mov	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4a27      	ldr	r2, [pc, #156]	; (8005d54 <xTaskResumeAll+0x124>)
 8005cb8:	441a      	add	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	f7fe fcd8 	bl	8004676 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cca:	4b23      	ldr	r3, [pc, #140]	; (8005d58 <xTaskResumeAll+0x128>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d302      	bcc.n	8005cda <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005cd4:	4b21      	ldr	r3, [pc, #132]	; (8005d5c <xTaskResumeAll+0x12c>)
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cda:	4b1c      	ldr	r3, [pc, #112]	; (8005d4c <xTaskResumeAll+0x11c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1cb      	bne.n	8005c7a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ce8:	f000 fb4a 	bl	8006380 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005cec:	4b1c      	ldr	r3, [pc, #112]	; (8005d60 <xTaskResumeAll+0x130>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d010      	beq.n	8005d1a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005cf8:	f000 f844 	bl	8005d84 <xTaskIncrementTick>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005d02:	4b16      	ldr	r3, [pc, #88]	; (8005d5c <xTaskResumeAll+0x12c>)
 8005d04:	2201      	movs	r2, #1
 8005d06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1f1      	bne.n	8005cf8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005d14:	4b12      	ldr	r3, [pc, #72]	; (8005d60 <xTaskResumeAll+0x130>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d1a:	4b10      	ldr	r3, [pc, #64]	; (8005d5c <xTaskResumeAll+0x12c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d009      	beq.n	8005d36 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d22:	2301      	movs	r3, #1
 8005d24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d26:	4b0f      	ldr	r3, [pc, #60]	; (8005d64 <xTaskResumeAll+0x134>)
 8005d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d36:	f001 f94d 	bl	8006fd4 <vPortExitCritical>

	return xAlreadyYielded;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	20000c50 	.word	0x20000c50
 8005d48:	20000c28 	.word	0x20000c28
 8005d4c:	20000be8 	.word	0x20000be8
 8005d50:	20000c30 	.word	0x20000c30
 8005d54:	20000758 	.word	0x20000758
 8005d58:	20000754 	.word	0x20000754
 8005d5c:	20000c3c 	.word	0x20000c3c
 8005d60:	20000c38 	.word	0x20000c38
 8005d64:	e000ed04 	.word	0xe000ed04

08005d68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d6e:	4b04      	ldr	r3, [pc, #16]	; (8005d80 <xTaskGetTickCount+0x18>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d74:	687b      	ldr	r3, [r7, #4]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bc80      	pop	{r7}
 8005d7e:	4770      	bx	lr
 8005d80:	20000c2c 	.word	0x20000c2c

08005d84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d8e:	4b51      	ldr	r3, [pc, #324]	; (8005ed4 <xTaskIncrementTick+0x150>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f040 808d 	bne.w	8005eb2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d98:	4b4f      	ldr	r3, [pc, #316]	; (8005ed8 <xTaskIncrementTick+0x154>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005da0:	4a4d      	ldr	r2, [pc, #308]	; (8005ed8 <xTaskIncrementTick+0x154>)
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d11f      	bne.n	8005dec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005dac:	4b4b      	ldr	r3, [pc, #300]	; (8005edc <xTaskIncrementTick+0x158>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d009      	beq.n	8005dca <xTaskIncrementTick+0x46>
 8005db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	603b      	str	r3, [r7, #0]
 8005dc8:	e7fe      	b.n	8005dc8 <xTaskIncrementTick+0x44>
 8005dca:	4b44      	ldr	r3, [pc, #272]	; (8005edc <xTaskIncrementTick+0x158>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	4b43      	ldr	r3, [pc, #268]	; (8005ee0 <xTaskIncrementTick+0x15c>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a41      	ldr	r2, [pc, #260]	; (8005edc <xTaskIncrementTick+0x158>)
 8005dd6:	6013      	str	r3, [r2, #0]
 8005dd8:	4a41      	ldr	r2, [pc, #260]	; (8005ee0 <xTaskIncrementTick+0x15c>)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	4b41      	ldr	r3, [pc, #260]	; (8005ee4 <xTaskIncrementTick+0x160>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3301      	adds	r3, #1
 8005de4:	4a3f      	ldr	r2, [pc, #252]	; (8005ee4 <xTaskIncrementTick+0x160>)
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	f000 faca 	bl	8006380 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005dec:	4b3e      	ldr	r3, [pc, #248]	; (8005ee8 <xTaskIncrementTick+0x164>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d34e      	bcc.n	8005e94 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005df6:	4b39      	ldr	r3, [pc, #228]	; (8005edc <xTaskIncrementTick+0x158>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <xTaskIncrementTick+0x80>
 8005e00:	2301      	movs	r3, #1
 8005e02:	e000      	b.n	8005e06 <xTaskIncrementTick+0x82>
 8005e04:	2300      	movs	r3, #0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d004      	beq.n	8005e14 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e0a:	4b37      	ldr	r3, [pc, #220]	; (8005ee8 <xTaskIncrementTick+0x164>)
 8005e0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e10:	601a      	str	r2, [r3, #0]
					break;
 8005e12:	e03f      	b.n	8005e94 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005e14:	4b31      	ldr	r3, [pc, #196]	; (8005edc <xTaskIncrementTick+0x158>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d203      	bcs.n	8005e34 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e2c:	4a2e      	ldr	r2, [pc, #184]	; (8005ee8 <xTaskIncrementTick+0x164>)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6013      	str	r3, [r2, #0]
						break;
 8005e32:	e02f      	b.n	8005e94 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	3304      	adds	r3, #4
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fe fc77 	bl	800472c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d004      	beq.n	8005e50 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	3318      	adds	r3, #24
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fe fc6e 	bl	800472c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e54:	4b25      	ldr	r3, [pc, #148]	; (8005eec <xTaskIncrementTick+0x168>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d903      	bls.n	8005e64 <xTaskIncrementTick+0xe0>
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e60:	4a22      	ldr	r2, [pc, #136]	; (8005eec <xTaskIncrementTick+0x168>)
 8005e62:	6013      	str	r3, [r2, #0]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e68:	4613      	mov	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4413      	add	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4a1f      	ldr	r2, [pc, #124]	; (8005ef0 <xTaskIncrementTick+0x16c>)
 8005e72:	441a      	add	r2, r3
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	3304      	adds	r3, #4
 8005e78:	4619      	mov	r1, r3
 8005e7a:	4610      	mov	r0, r2
 8005e7c:	f7fe fbfb 	bl	8004676 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e84:	4b1b      	ldr	r3, [pc, #108]	; (8005ef4 <xTaskIncrementTick+0x170>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d3b3      	bcc.n	8005df6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e92:	e7b0      	b.n	8005df6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e94:	4b17      	ldr	r3, [pc, #92]	; (8005ef4 <xTaskIncrementTick+0x170>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e9a:	4915      	ldr	r1, [pc, #84]	; (8005ef0 <xTaskIncrementTick+0x16c>)
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d907      	bls.n	8005ebc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005eac:	2301      	movs	r3, #1
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	e004      	b.n	8005ebc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005eb2:	4b11      	ldr	r3, [pc, #68]	; (8005ef8 <xTaskIncrementTick+0x174>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	4a0f      	ldr	r2, [pc, #60]	; (8005ef8 <xTaskIncrementTick+0x174>)
 8005eba:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005ebc:	4b0f      	ldr	r3, [pc, #60]	; (8005efc <xTaskIncrementTick+0x178>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005ec8:	697b      	ldr	r3, [r7, #20]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3718      	adds	r7, #24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	20000c50 	.word	0x20000c50
 8005ed8:	20000c2c 	.word	0x20000c2c
 8005edc:	20000be0 	.word	0x20000be0
 8005ee0:	20000be4 	.word	0x20000be4
 8005ee4:	20000c40 	.word	0x20000c40
 8005ee8:	20000c48 	.word	0x20000c48
 8005eec:	20000c30 	.word	0x20000c30
 8005ef0:	20000758 	.word	0x20000758
 8005ef4:	20000754 	.word	0x20000754
 8005ef8:	20000c38 	.word	0x20000c38
 8005efc:	20000c3c 	.word	0x20000c3c

08005f00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f06:	4b27      	ldr	r3, [pc, #156]	; (8005fa4 <vTaskSwitchContext+0xa4>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f0e:	4b26      	ldr	r3, [pc, #152]	; (8005fa8 <vTaskSwitchContext+0xa8>)
 8005f10:	2201      	movs	r2, #1
 8005f12:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f14:	e040      	b.n	8005f98 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005f16:	4b24      	ldr	r3, [pc, #144]	; (8005fa8 <vTaskSwitchContext+0xa8>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005f1c:	4b23      	ldr	r3, [pc, #140]	; (8005fac <vTaskSwitchContext+0xac>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	e00f      	b.n	8005f44 <vTaskSwitchContext+0x44>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d109      	bne.n	8005f3e <vTaskSwitchContext+0x3e>
 8005f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	607b      	str	r3, [r7, #4]
 8005f3c:	e7fe      	b.n	8005f3c <vTaskSwitchContext+0x3c>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	3b01      	subs	r3, #1
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	491a      	ldr	r1, [pc, #104]	; (8005fb0 <vTaskSwitchContext+0xb0>)
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	440b      	add	r3, r1
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d0e5      	beq.n	8005f24 <vTaskSwitchContext+0x24>
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4a13      	ldr	r2, [pc, #76]	; (8005fb0 <vTaskSwitchContext+0xb0>)
 8005f64:	4413      	add	r3, r2
 8005f66:	60bb      	str	r3, [r7, #8]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	605a      	str	r2, [r3, #4]
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	3308      	adds	r3, #8
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d104      	bne.n	8005f88 <vTaskSwitchContext+0x88>
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	605a      	str	r2, [r3, #4]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	4a09      	ldr	r2, [pc, #36]	; (8005fb4 <vTaskSwitchContext+0xb4>)
 8005f90:	6013      	str	r3, [r2, #0]
 8005f92:	4a06      	ldr	r2, [pc, #24]	; (8005fac <vTaskSwitchContext+0xac>)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6013      	str	r3, [r2, #0]
}
 8005f98:	bf00      	nop
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bc80      	pop	{r7}
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	20000c50 	.word	0x20000c50
 8005fa8:	20000c3c 	.word	0x20000c3c
 8005fac:	20000c30 	.word	0x20000c30
 8005fb0:	20000758 	.word	0x20000758
 8005fb4:	20000754 	.word	0x20000754

08005fb8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d109      	bne.n	8005fdc <vTaskPlaceOnEventList+0x24>
 8005fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	e7fe      	b.n	8005fda <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fdc:	4b07      	ldr	r3, [pc, #28]	; (8005ffc <vTaskPlaceOnEventList+0x44>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3318      	adds	r3, #24
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7fe fb69 	bl	80046bc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005fea:	2101      	movs	r1, #1
 8005fec:	6838      	ldr	r0, [r7, #0]
 8005fee:	f000 fb7b 	bl	80066e8 <prvAddCurrentTaskToDelayedList>
}
 8005ff2:	bf00      	nop
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20000754 	.word	0x20000754

08006000 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d109      	bne.n	8006026 <vTaskPlaceOnEventListRestricted+0x26>
 8006012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	617b      	str	r3, [r7, #20]
 8006024:	e7fe      	b.n	8006024 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006026:	4b0a      	ldr	r3, [pc, #40]	; (8006050 <vTaskPlaceOnEventListRestricted+0x50>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3318      	adds	r3, #24
 800602c:	4619      	mov	r1, r3
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f7fe fb21 	bl	8004676 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d002      	beq.n	8006040 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800603a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800603e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006040:	6879      	ldr	r1, [r7, #4]
 8006042:	68b8      	ldr	r0, [r7, #8]
 8006044:	f000 fb50 	bl	80066e8 <prvAddCurrentTaskToDelayedList>
	}
 8006048:	bf00      	nop
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	20000754 	.word	0x20000754

08006054 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d109      	bne.n	800607e <xTaskRemoveFromEventList+0x2a>
 800606a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606e:	f383 8811 	msr	BASEPRI, r3
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	e7fe      	b.n	800607c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	3318      	adds	r3, #24
 8006082:	4618      	mov	r0, r3
 8006084:	f7fe fb52 	bl	800472c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006088:	4b1d      	ldr	r3, [pc, #116]	; (8006100 <xTaskRemoveFromEventList+0xac>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d11d      	bne.n	80060cc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	3304      	adds	r3, #4
 8006094:	4618      	mov	r0, r3
 8006096:	f7fe fb49 	bl	800472c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609e:	4b19      	ldr	r3, [pc, #100]	; (8006104 <xTaskRemoveFromEventList+0xb0>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d903      	bls.n	80060ae <xTaskRemoveFromEventList+0x5a>
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060aa:	4a16      	ldr	r2, [pc, #88]	; (8006104 <xTaskRemoveFromEventList+0xb0>)
 80060ac:	6013      	str	r3, [r2, #0]
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b2:	4613      	mov	r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4a13      	ldr	r2, [pc, #76]	; (8006108 <xTaskRemoveFromEventList+0xb4>)
 80060bc:	441a      	add	r2, r3
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	3304      	adds	r3, #4
 80060c2:	4619      	mov	r1, r3
 80060c4:	4610      	mov	r0, r2
 80060c6:	f7fe fad6 	bl	8004676 <vListInsertEnd>
 80060ca:	e005      	b.n	80060d8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	3318      	adds	r3, #24
 80060d0:	4619      	mov	r1, r3
 80060d2:	480e      	ldr	r0, [pc, #56]	; (800610c <xTaskRemoveFromEventList+0xb8>)
 80060d4:	f7fe facf 	bl	8004676 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060dc:	4b0c      	ldr	r3, [pc, #48]	; (8006110 <xTaskRemoveFromEventList+0xbc>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d905      	bls.n	80060f2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80060e6:	2301      	movs	r3, #1
 80060e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80060ea:	4b0a      	ldr	r3, [pc, #40]	; (8006114 <xTaskRemoveFromEventList+0xc0>)
 80060ec:	2201      	movs	r2, #1
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	e001      	b.n	80060f6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80060f2:	2300      	movs	r3, #0
 80060f4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80060f6:	697b      	ldr	r3, [r7, #20]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3718      	adds	r7, #24
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	20000c50 	.word	0x20000c50
 8006104:	20000c30 	.word	0x20000c30
 8006108:	20000758 	.word	0x20000758
 800610c:	20000be8 	.word	0x20000be8
 8006110:	20000754 	.word	0x20000754
 8006114:	20000c3c 	.word	0x20000c3c

08006118 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006120:	4b06      	ldr	r3, [pc, #24]	; (800613c <vTaskInternalSetTimeOutState+0x24>)
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006128:	4b05      	ldr	r3, [pc, #20]	; (8006140 <vTaskInternalSetTimeOutState+0x28>)
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	605a      	str	r2, [r3, #4]
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	bc80      	pop	{r7}
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	20000c40 	.word	0x20000c40
 8006140:	20000c2c 	.word	0x20000c2c

08006144 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d109      	bne.n	8006168 <xTaskCheckForTimeOut+0x24>
 8006154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	613b      	str	r3, [r7, #16]
 8006166:	e7fe      	b.n	8006166 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d109      	bne.n	8006182 <xTaskCheckForTimeOut+0x3e>
 800616e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006172:	f383 8811 	msr	BASEPRI, r3
 8006176:	f3bf 8f6f 	isb	sy
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	e7fe      	b.n	8006180 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006182:	f000 fef9 	bl	8006f78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006186:	4b1d      	ldr	r3, [pc, #116]	; (80061fc <xTaskCheckForTimeOut+0xb8>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800619e:	d102      	bne.n	80061a6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80061a0:	2300      	movs	r3, #0
 80061a2:	61fb      	str	r3, [r7, #28]
 80061a4:	e023      	b.n	80061ee <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	4b15      	ldr	r3, [pc, #84]	; (8006200 <xTaskCheckForTimeOut+0xbc>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d007      	beq.n	80061c2 <xTaskCheckForTimeOut+0x7e>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d302      	bcc.n	80061c2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80061bc:	2301      	movs	r3, #1
 80061be:	61fb      	str	r3, [r7, #28]
 80061c0:	e015      	b.n	80061ee <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d20b      	bcs.n	80061e4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	1ad2      	subs	r2, r2, r3
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7ff ff9d 	bl	8006118 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80061de:	2300      	movs	r3, #0
 80061e0:	61fb      	str	r3, [r7, #28]
 80061e2:	e004      	b.n	80061ee <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	2200      	movs	r2, #0
 80061e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80061ea:	2301      	movs	r3, #1
 80061ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80061ee:	f000 fef1 	bl	8006fd4 <vPortExitCritical>

	return xReturn;
 80061f2:	69fb      	ldr	r3, [r7, #28]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3720      	adds	r7, #32
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	20000c2c 	.word	0x20000c2c
 8006200:	20000c40 	.word	0x20000c40

08006204 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006204:	b480      	push	{r7}
 8006206:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006208:	4b03      	ldr	r3, [pc, #12]	; (8006218 <vTaskMissedYield+0x14>)
 800620a:	2201      	movs	r2, #1
 800620c:	601a      	str	r2, [r3, #0]
}
 800620e:	bf00      	nop
 8006210:	46bd      	mov	sp, r7
 8006212:	bc80      	pop	{r7}
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	20000c3c 	.word	0x20000c3c

0800621c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006224:	f000 f852 	bl	80062cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006228:	4b06      	ldr	r3, [pc, #24]	; (8006244 <prvIdleTask+0x28>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d9f9      	bls.n	8006224 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006230:	4b05      	ldr	r3, [pc, #20]	; (8006248 <prvIdleTask+0x2c>)
 8006232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006240:	e7f0      	b.n	8006224 <prvIdleTask+0x8>
 8006242:	bf00      	nop
 8006244:	20000758 	.word	0x20000758
 8006248:	e000ed04 	.word	0xe000ed04

0800624c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006252:	2300      	movs	r3, #0
 8006254:	607b      	str	r3, [r7, #4]
 8006256:	e00c      	b.n	8006272 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	4613      	mov	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4a12      	ldr	r2, [pc, #72]	; (80062ac <prvInitialiseTaskLists+0x60>)
 8006264:	4413      	add	r3, r2
 8006266:	4618      	mov	r0, r3
 8006268:	f7fe f9da 	bl	8004620 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3301      	adds	r3, #1
 8006270:	607b      	str	r3, [r7, #4]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b37      	cmp	r3, #55	; 0x37
 8006276:	d9ef      	bls.n	8006258 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006278:	480d      	ldr	r0, [pc, #52]	; (80062b0 <prvInitialiseTaskLists+0x64>)
 800627a:	f7fe f9d1 	bl	8004620 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800627e:	480d      	ldr	r0, [pc, #52]	; (80062b4 <prvInitialiseTaskLists+0x68>)
 8006280:	f7fe f9ce 	bl	8004620 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006284:	480c      	ldr	r0, [pc, #48]	; (80062b8 <prvInitialiseTaskLists+0x6c>)
 8006286:	f7fe f9cb 	bl	8004620 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800628a:	480c      	ldr	r0, [pc, #48]	; (80062bc <prvInitialiseTaskLists+0x70>)
 800628c:	f7fe f9c8 	bl	8004620 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006290:	480b      	ldr	r0, [pc, #44]	; (80062c0 <prvInitialiseTaskLists+0x74>)
 8006292:	f7fe f9c5 	bl	8004620 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006296:	4b0b      	ldr	r3, [pc, #44]	; (80062c4 <prvInitialiseTaskLists+0x78>)
 8006298:	4a05      	ldr	r2, [pc, #20]	; (80062b0 <prvInitialiseTaskLists+0x64>)
 800629a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800629c:	4b0a      	ldr	r3, [pc, #40]	; (80062c8 <prvInitialiseTaskLists+0x7c>)
 800629e:	4a05      	ldr	r2, [pc, #20]	; (80062b4 <prvInitialiseTaskLists+0x68>)
 80062a0:	601a      	str	r2, [r3, #0]
}
 80062a2:	bf00      	nop
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	20000758 	.word	0x20000758
 80062b0:	20000bb8 	.word	0x20000bb8
 80062b4:	20000bcc 	.word	0x20000bcc
 80062b8:	20000be8 	.word	0x20000be8
 80062bc:	20000bfc 	.word	0x20000bfc
 80062c0:	20000c14 	.word	0x20000c14
 80062c4:	20000be0 	.word	0x20000be0
 80062c8:	20000be4 	.word	0x20000be4

080062cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062d2:	e019      	b.n	8006308 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80062d4:	f000 fe50 	bl	8006f78 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80062d8:	4b0f      	ldr	r3, [pc, #60]	; (8006318 <prvCheckTasksWaitingTermination+0x4c>)
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	3304      	adds	r3, #4
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7fe fa21 	bl	800472c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062ea:	4b0c      	ldr	r3, [pc, #48]	; (800631c <prvCheckTasksWaitingTermination+0x50>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3b01      	subs	r3, #1
 80062f0:	4a0a      	ldr	r2, [pc, #40]	; (800631c <prvCheckTasksWaitingTermination+0x50>)
 80062f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80062f4:	4b0a      	ldr	r3, [pc, #40]	; (8006320 <prvCheckTasksWaitingTermination+0x54>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	4a09      	ldr	r2, [pc, #36]	; (8006320 <prvCheckTasksWaitingTermination+0x54>)
 80062fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80062fe:	f000 fe69 	bl	8006fd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f80e 	bl	8006324 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006308:	4b05      	ldr	r3, [pc, #20]	; (8006320 <prvCheckTasksWaitingTermination+0x54>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1e1      	bne.n	80062d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006310:	bf00      	nop
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	20000bfc 	.word	0x20000bfc
 800631c:	20000c28 	.word	0x20000c28
 8006320:	20000c10 	.word	0x20000c10

08006324 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006332:	2b00      	cmp	r3, #0
 8006334:	d108      	bne.n	8006348 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633a:	4618      	mov	r0, r3
 800633c:	f000 ffd4 	bl	80072e8 <vPortFree>
				vPortFree( pxTCB );
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 ffd1 	bl	80072e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006346:	e017      	b.n	8006378 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800634e:	2b01      	cmp	r3, #1
 8006350:	d103      	bne.n	800635a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 ffc8 	bl	80072e8 <vPortFree>
	}
 8006358:	e00e      	b.n	8006378 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006360:	2b02      	cmp	r3, #2
 8006362:	d009      	beq.n	8006378 <prvDeleteTCB+0x54>
 8006364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	e7fe      	b.n	8006376 <prvDeleteTCB+0x52>
	}
 8006378:	bf00      	nop
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006386:	4b0e      	ldr	r3, [pc, #56]	; (80063c0 <prvResetNextTaskUnblockTime+0x40>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <prvResetNextTaskUnblockTime+0x14>
 8006390:	2301      	movs	r3, #1
 8006392:	e000      	b.n	8006396 <prvResetNextTaskUnblockTime+0x16>
 8006394:	2300      	movs	r3, #0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d004      	beq.n	80063a4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800639a:	4b0a      	ldr	r3, [pc, #40]	; (80063c4 <prvResetNextTaskUnblockTime+0x44>)
 800639c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063a0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063a2:	e008      	b.n	80063b6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80063a4:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <prvResetNextTaskUnblockTime+0x40>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	4a04      	ldr	r2, [pc, #16]	; (80063c4 <prvResetNextTaskUnblockTime+0x44>)
 80063b4:	6013      	str	r3, [r2, #0]
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bc80      	pop	{r7}
 80063be:	4770      	bx	lr
 80063c0:	20000be0 	.word	0x20000be0
 80063c4:	20000c48 	.word	0x20000c48

080063c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80063ce:	4b0b      	ldr	r3, [pc, #44]	; (80063fc <xTaskGetSchedulerState+0x34>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d102      	bne.n	80063dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80063d6:	2301      	movs	r3, #1
 80063d8:	607b      	str	r3, [r7, #4]
 80063da:	e008      	b.n	80063ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063dc:	4b08      	ldr	r3, [pc, #32]	; (8006400 <xTaskGetSchedulerState+0x38>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d102      	bne.n	80063ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80063e4:	2302      	movs	r3, #2
 80063e6:	607b      	str	r3, [r7, #4]
 80063e8:	e001      	b.n	80063ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80063ea:	2300      	movs	r3, #0
 80063ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80063ee:	687b      	ldr	r3, [r7, #4]
	}
 80063f0:	4618      	mov	r0, r3
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bc80      	pop	{r7}
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	20000c34 	.word	0x20000c34
 8006400:	20000c50 	.word	0x20000c50

08006404 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006410:	2300      	movs	r3, #0
 8006412:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d056      	beq.n	80064c8 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800641e:	4b2d      	ldr	r3, [pc, #180]	; (80064d4 <xTaskPriorityInherit+0xd0>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006424:	429a      	cmp	r2, r3
 8006426:	d246      	bcs.n	80064b6 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	2b00      	cmp	r3, #0
 800642e:	db06      	blt.n	800643e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006430:	4b28      	ldr	r3, [pc, #160]	; (80064d4 <xTaskPriorityInherit+0xd0>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006436:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	6959      	ldr	r1, [r3, #20]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006446:	4613      	mov	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4a22      	ldr	r2, [pc, #136]	; (80064d8 <xTaskPriorityInherit+0xd4>)
 8006450:	4413      	add	r3, r2
 8006452:	4299      	cmp	r1, r3
 8006454:	d101      	bne.n	800645a <xTaskPriorityInherit+0x56>
 8006456:	2301      	movs	r3, #1
 8006458:	e000      	b.n	800645c <xTaskPriorityInherit+0x58>
 800645a:	2300      	movs	r3, #0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d022      	beq.n	80064a6 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	3304      	adds	r3, #4
 8006464:	4618      	mov	r0, r3
 8006466:	f7fe f961 	bl	800472c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800646a:	4b1a      	ldr	r3, [pc, #104]	; (80064d4 <xTaskPriorityInherit+0xd0>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006478:	4b18      	ldr	r3, [pc, #96]	; (80064dc <xTaskPriorityInherit+0xd8>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	429a      	cmp	r2, r3
 800647e:	d903      	bls.n	8006488 <xTaskPriorityInherit+0x84>
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006484:	4a15      	ldr	r2, [pc, #84]	; (80064dc <xTaskPriorityInherit+0xd8>)
 8006486:	6013      	str	r3, [r2, #0]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648c:	4613      	mov	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4a10      	ldr	r2, [pc, #64]	; (80064d8 <xTaskPriorityInherit+0xd4>)
 8006496:	441a      	add	r2, r3
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	3304      	adds	r3, #4
 800649c:	4619      	mov	r1, r3
 800649e:	4610      	mov	r0, r2
 80064a0:	f7fe f8e9 	bl	8004676 <vListInsertEnd>
 80064a4:	e004      	b.n	80064b0 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80064a6:	4b0b      	ldr	r3, [pc, #44]	; (80064d4 <xTaskPriorityInherit+0xd0>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80064b0:	2301      	movs	r3, #1
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	e008      	b.n	80064c8 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064ba:	4b06      	ldr	r3, [pc, #24]	; (80064d4 <xTaskPriorityInherit+0xd0>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d201      	bcs.n	80064c8 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80064c4:	2301      	movs	r3, #1
 80064c6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064c8:	68fb      	ldr	r3, [r7, #12]
	}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20000754 	.word	0x20000754
 80064d8:	20000758 	.word	0x20000758
 80064dc:	20000c30 	.word	0x20000c30

080064e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80064ec:	2300      	movs	r3, #0
 80064ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d054      	beq.n	80065a0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80064f6:	4b2d      	ldr	r3, [pc, #180]	; (80065ac <xTaskPriorityDisinherit+0xcc>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d009      	beq.n	8006514 <xTaskPriorityDisinherit+0x34>
 8006500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	60fb      	str	r3, [r7, #12]
 8006512:	e7fe      	b.n	8006512 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006518:	2b00      	cmp	r3, #0
 800651a:	d109      	bne.n	8006530 <xTaskPriorityDisinherit+0x50>
 800651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	60bb      	str	r3, [r7, #8]
 800652e:	e7fe      	b.n	800652e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006534:	1e5a      	subs	r2, r3, #1
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006542:	429a      	cmp	r2, r3
 8006544:	d02c      	beq.n	80065a0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800654a:	2b00      	cmp	r3, #0
 800654c:	d128      	bne.n	80065a0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	3304      	adds	r3, #4
 8006552:	4618      	mov	r0, r3
 8006554:	f7fe f8ea 	bl	800472c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006564:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006570:	4b0f      	ldr	r3, [pc, #60]	; (80065b0 <xTaskPriorityDisinherit+0xd0>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d903      	bls.n	8006580 <xTaskPriorityDisinherit+0xa0>
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657c:	4a0c      	ldr	r2, [pc, #48]	; (80065b0 <xTaskPriorityDisinherit+0xd0>)
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4a09      	ldr	r2, [pc, #36]	; (80065b4 <xTaskPriorityDisinherit+0xd4>)
 800658e:	441a      	add	r2, r3
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	3304      	adds	r3, #4
 8006594:	4619      	mov	r1, r3
 8006596:	4610      	mov	r0, r2
 8006598:	f7fe f86d 	bl	8004676 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800659c:	2301      	movs	r3, #1
 800659e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80065a0:	697b      	ldr	r3, [r7, #20]
	}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3718      	adds	r7, #24
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20000754 	.word	0x20000754
 80065b0:	20000c30 	.word	0x20000c30
 80065b4:	20000758 	.word	0x20000758

080065b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b088      	sub	sp, #32
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80065c6:	2301      	movs	r3, #1
 80065c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d06d      	beq.n	80066ac <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d109      	bne.n	80065ec <vTaskPriorityDisinheritAfterTimeout+0x34>
 80065d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065dc:	f383 8811 	msr	BASEPRI, r3
 80065e0:	f3bf 8f6f 	isb	sy
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	60fb      	str	r3, [r7, #12]
 80065ea:	e7fe      	b.n	80065ea <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d902      	bls.n	80065fc <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	61fb      	str	r3, [r7, #28]
 80065fa:	e002      	b.n	8006602 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006600:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006606:	69fa      	ldr	r2, [r7, #28]
 8006608:	429a      	cmp	r2, r3
 800660a:	d04f      	beq.n	80066ac <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	429a      	cmp	r2, r3
 8006614:	d14a      	bne.n	80066ac <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006616:	4b27      	ldr	r3, [pc, #156]	; (80066b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	429a      	cmp	r2, r3
 800661e:	d109      	bne.n	8006634 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8006620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006624:	f383 8811 	msr	BASEPRI, r3
 8006628:	f3bf 8f6f 	isb	sy
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	60bb      	str	r3, [r7, #8]
 8006632:	e7fe      	b.n	8006632 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	69fa      	ldr	r2, [r7, #28]
 800663e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	2b00      	cmp	r3, #0
 8006646:	db04      	blt.n	8006652 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	6959      	ldr	r1, [r3, #20]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	4613      	mov	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4a15      	ldr	r2, [pc, #84]	; (80066b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006662:	4413      	add	r3, r2
 8006664:	4299      	cmp	r1, r3
 8006666:	d101      	bne.n	800666c <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8006668:	2301      	movs	r3, #1
 800666a:	e000      	b.n	800666e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800666c:	2300      	movs	r3, #0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d01c      	beq.n	80066ac <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	3304      	adds	r3, #4
 8006676:	4618      	mov	r0, r3
 8006678:	f7fe f858 	bl	800472c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006680:	4b0e      	ldr	r3, [pc, #56]	; (80066bc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	429a      	cmp	r2, r3
 8006686:	d903      	bls.n	8006690 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	4a0b      	ldr	r2, [pc, #44]	; (80066bc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006694:	4613      	mov	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4a06      	ldr	r2, [pc, #24]	; (80066b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800669e:	441a      	add	r2, r3
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	3304      	adds	r3, #4
 80066a4:	4619      	mov	r1, r3
 80066a6:	4610      	mov	r0, r2
 80066a8:	f7fd ffe5 	bl	8004676 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066ac:	bf00      	nop
 80066ae:	3720      	adds	r7, #32
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	20000754 	.word	0x20000754
 80066b8:	20000758 	.word	0x20000758
 80066bc:	20000c30 	.word	0x20000c30

080066c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80066c0:	b480      	push	{r7}
 80066c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80066c4:	4b07      	ldr	r3, [pc, #28]	; (80066e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d004      	beq.n	80066d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80066cc:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066d2:	3201      	adds	r2, #1
 80066d4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80066d6:	4b03      	ldr	r3, [pc, #12]	; (80066e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80066d8:	681b      	ldr	r3, [r3, #0]
	}
 80066da:	4618      	mov	r0, r3
 80066dc:	46bd      	mov	sp, r7
 80066de:	bc80      	pop	{r7}
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	20000754 	.word	0x20000754

080066e8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80066f2:	4b21      	ldr	r3, [pc, #132]	; (8006778 <prvAddCurrentTaskToDelayedList+0x90>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066f8:	4b20      	ldr	r3, [pc, #128]	; (800677c <prvAddCurrentTaskToDelayedList+0x94>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3304      	adds	r3, #4
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fe f814 	bl	800472c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800670a:	d10a      	bne.n	8006722 <prvAddCurrentTaskToDelayedList+0x3a>
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d007      	beq.n	8006722 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006712:	4b1a      	ldr	r3, [pc, #104]	; (800677c <prvAddCurrentTaskToDelayedList+0x94>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3304      	adds	r3, #4
 8006718:	4619      	mov	r1, r3
 800671a:	4819      	ldr	r0, [pc, #100]	; (8006780 <prvAddCurrentTaskToDelayedList+0x98>)
 800671c:	f7fd ffab 	bl	8004676 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006720:	e026      	b.n	8006770 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4413      	add	r3, r2
 8006728:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800672a:	4b14      	ldr	r3, [pc, #80]	; (800677c <prvAddCurrentTaskToDelayedList+0x94>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	429a      	cmp	r2, r3
 8006738:	d209      	bcs.n	800674e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800673a:	4b12      	ldr	r3, [pc, #72]	; (8006784 <prvAddCurrentTaskToDelayedList+0x9c>)
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	4b0f      	ldr	r3, [pc, #60]	; (800677c <prvAddCurrentTaskToDelayedList+0x94>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	3304      	adds	r3, #4
 8006744:	4619      	mov	r1, r3
 8006746:	4610      	mov	r0, r2
 8006748:	f7fd ffb8 	bl	80046bc <vListInsert>
}
 800674c:	e010      	b.n	8006770 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800674e:	4b0e      	ldr	r3, [pc, #56]	; (8006788 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	4b0a      	ldr	r3, [pc, #40]	; (800677c <prvAddCurrentTaskToDelayedList+0x94>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3304      	adds	r3, #4
 8006758:	4619      	mov	r1, r3
 800675a:	4610      	mov	r0, r2
 800675c:	f7fd ffae 	bl	80046bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006760:	4b0a      	ldr	r3, [pc, #40]	; (800678c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	429a      	cmp	r2, r3
 8006768:	d202      	bcs.n	8006770 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800676a:	4a08      	ldr	r2, [pc, #32]	; (800678c <prvAddCurrentTaskToDelayedList+0xa4>)
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	6013      	str	r3, [r2, #0]
}
 8006770:	bf00      	nop
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	20000c2c 	.word	0x20000c2c
 800677c:	20000754 	.word	0x20000754
 8006780:	20000c14 	.word	0x20000c14
 8006784:	20000be4 	.word	0x20000be4
 8006788:	20000be0 	.word	0x20000be0
 800678c:	20000c48 	.word	0x20000c48

08006790 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08a      	sub	sp, #40	; 0x28
 8006794:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006796:	2300      	movs	r3, #0
 8006798:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800679a:	f000 fac3 	bl	8006d24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800679e:	4b1c      	ldr	r3, [pc, #112]	; (8006810 <xTimerCreateTimerTask+0x80>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d021      	beq.n	80067ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80067a6:	2300      	movs	r3, #0
 80067a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80067aa:	2300      	movs	r3, #0
 80067ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80067ae:	1d3a      	adds	r2, r7, #4
 80067b0:	f107 0108 	add.w	r1, r7, #8
 80067b4:	f107 030c 	add.w	r3, r7, #12
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7fd ff17 	bl	80045ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80067be:	6879      	ldr	r1, [r7, #4]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	9202      	str	r2, [sp, #8]
 80067c6:	9301      	str	r3, [sp, #4]
 80067c8:	2302      	movs	r3, #2
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	2300      	movs	r3, #0
 80067ce:	460a      	mov	r2, r1
 80067d0:	4910      	ldr	r1, [pc, #64]	; (8006814 <xTimerCreateTimerTask+0x84>)
 80067d2:	4811      	ldr	r0, [pc, #68]	; (8006818 <xTimerCreateTimerTask+0x88>)
 80067d4:	f7fe fff2 	bl	80057bc <xTaskCreateStatic>
 80067d8:	4602      	mov	r2, r0
 80067da:	4b10      	ldr	r3, [pc, #64]	; (800681c <xTimerCreateTimerTask+0x8c>)
 80067dc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80067de:	4b0f      	ldr	r3, [pc, #60]	; (800681c <xTimerCreateTimerTask+0x8c>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80067e6:	2301      	movs	r3, #1
 80067e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d109      	bne.n	8006804 <xTimerCreateTimerTask+0x74>
 80067f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f4:	f383 8811 	msr	BASEPRI, r3
 80067f8:	f3bf 8f6f 	isb	sy
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	613b      	str	r3, [r7, #16]
 8006802:	e7fe      	b.n	8006802 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006804:	697b      	ldr	r3, [r7, #20]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	20000c84 	.word	0x20000c84
 8006814:	080085e4 	.word	0x080085e4
 8006818:	08006939 	.word	0x08006939
 800681c:	20000c88 	.word	0x20000c88

08006820 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b08a      	sub	sp, #40	; 0x28
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800682e:	2300      	movs	r3, #0
 8006830:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d109      	bne.n	800684c <xTimerGenericCommand+0x2c>
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	623b      	str	r3, [r7, #32]
 800684a:	e7fe      	b.n	800684a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800684c:	4b19      	ldr	r3, [pc, #100]	; (80068b4 <xTimerGenericCommand+0x94>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d02a      	beq.n	80068aa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	2b05      	cmp	r3, #5
 8006864:	dc18      	bgt.n	8006898 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006866:	f7ff fdaf 	bl	80063c8 <xTaskGetSchedulerState>
 800686a:	4603      	mov	r3, r0
 800686c:	2b02      	cmp	r3, #2
 800686e:	d109      	bne.n	8006884 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006870:	4b10      	ldr	r3, [pc, #64]	; (80068b4 <xTimerGenericCommand+0x94>)
 8006872:	6818      	ldr	r0, [r3, #0]
 8006874:	f107 0110 	add.w	r1, r7, #16
 8006878:	2300      	movs	r3, #0
 800687a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800687c:	f7fe f920 	bl	8004ac0 <xQueueGenericSend>
 8006880:	6278      	str	r0, [r7, #36]	; 0x24
 8006882:	e012      	b.n	80068aa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006884:	4b0b      	ldr	r3, [pc, #44]	; (80068b4 <xTimerGenericCommand+0x94>)
 8006886:	6818      	ldr	r0, [r3, #0]
 8006888:	f107 0110 	add.w	r1, r7, #16
 800688c:	2300      	movs	r3, #0
 800688e:	2200      	movs	r2, #0
 8006890:	f7fe f916 	bl	8004ac0 <xQueueGenericSend>
 8006894:	6278      	str	r0, [r7, #36]	; 0x24
 8006896:	e008      	b.n	80068aa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006898:	4b06      	ldr	r3, [pc, #24]	; (80068b4 <xTimerGenericCommand+0x94>)
 800689a:	6818      	ldr	r0, [r3, #0]
 800689c:	f107 0110 	add.w	r1, r7, #16
 80068a0:	2300      	movs	r3, #0
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	f7fe fa06 	bl	8004cb4 <xQueueGenericSendFromISR>
 80068a8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3728      	adds	r7, #40	; 0x28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	20000c84 	.word	0x20000c84

080068b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b088      	sub	sp, #32
 80068bc:	af02      	add	r7, sp, #8
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068c2:	4b1c      	ldr	r3, [pc, #112]	; (8006934 <prvProcessExpiredTimer+0x7c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	3304      	adds	r3, #4
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7fd ff2b 	bl	800472c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d121      	bne.n	8006922 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	699a      	ldr	r2, [r3, #24]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	18d1      	adds	r1, r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	6978      	ldr	r0, [r7, #20]
 80068ec:	f000 f8c8 	bl	8006a80 <prvInsertTimerInActiveList>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d015      	beq.n	8006922 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80068f6:	2300      	movs	r3, #0
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	2300      	movs	r3, #0
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	2100      	movs	r1, #0
 8006900:	6978      	ldr	r0, [r7, #20]
 8006902:	f7ff ff8d 	bl	8006820 <xTimerGenericCommand>
 8006906:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d109      	bne.n	8006922 <prvProcessExpiredTimer+0x6a>
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	e7fe      	b.n	8006920 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006926:	6978      	ldr	r0, [r7, #20]
 8006928:	4798      	blx	r3
}
 800692a:	bf00      	nop
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	20000c7c 	.word	0x20000c7c

08006938 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006940:	f107 0308 	add.w	r3, r7, #8
 8006944:	4618      	mov	r0, r3
 8006946:	f000 f857 	bl	80069f8 <prvGetNextExpireTime>
 800694a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	4619      	mov	r1, r3
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f000 f803 	bl	800695c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006956:	f000 f8d5 	bl	8006b04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800695a:	e7f1      	b.n	8006940 <prvTimerTask+0x8>

0800695c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006966:	f7ff f955 	bl	8005c14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800696a:	f107 0308 	add.w	r3, r7, #8
 800696e:	4618      	mov	r0, r3
 8006970:	f000 f866 	bl	8006a40 <prvSampleTimeNow>
 8006974:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d130      	bne.n	80069de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10a      	bne.n	8006998 <prvProcessTimerOrBlockTask+0x3c>
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	429a      	cmp	r2, r3
 8006988:	d806      	bhi.n	8006998 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800698a:	f7ff f951 	bl	8005c30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800698e:	68f9      	ldr	r1, [r7, #12]
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7ff ff91 	bl	80068b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006996:	e024      	b.n	80069e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d008      	beq.n	80069b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800699e:	4b13      	ldr	r3, [pc, #76]	; (80069ec <prvProcessTimerOrBlockTask+0x90>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	bf0c      	ite	eq
 80069a8:	2301      	moveq	r3, #1
 80069aa:	2300      	movne	r3, #0
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80069b0:	4b0f      	ldr	r3, [pc, #60]	; (80069f0 <prvProcessTimerOrBlockTask+0x94>)
 80069b2:	6818      	ldr	r0, [r3, #0]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	4619      	mov	r1, r3
 80069be:	f7fe fec9 	bl	8005754 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80069c2:	f7ff f935 	bl	8005c30 <xTaskResumeAll>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10a      	bne.n	80069e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80069cc:	4b09      	ldr	r3, [pc, #36]	; (80069f4 <prvProcessTimerOrBlockTask+0x98>)
 80069ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	f3bf 8f4f 	dsb	sy
 80069d8:	f3bf 8f6f 	isb	sy
}
 80069dc:	e001      	b.n	80069e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80069de:	f7ff f927 	bl	8005c30 <xTaskResumeAll>
}
 80069e2:	bf00      	nop
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	20000c80 	.word	0x20000c80
 80069f0:	20000c84 	.word	0x20000c84
 80069f4:	e000ed04 	.word	0xe000ed04

080069f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a00:	4b0e      	ldr	r3, [pc, #56]	; (8006a3c <prvGetNextExpireTime+0x44>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	bf0c      	ite	eq
 8006a0a:	2301      	moveq	r3, #1
 8006a0c:	2300      	movne	r3, #0
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	461a      	mov	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d105      	bne.n	8006a2a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a1e:	4b07      	ldr	r3, [pc, #28]	; (8006a3c <prvGetNextExpireTime+0x44>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	e001      	b.n	8006a2e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bc80      	pop	{r7}
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	20000c7c 	.word	0x20000c7c

08006a40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006a48:	f7ff f98e 	bl	8005d68 <xTaskGetTickCount>
 8006a4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006a4e:	4b0b      	ldr	r3, [pc, #44]	; (8006a7c <prvSampleTimeNow+0x3c>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d205      	bcs.n	8006a64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006a58:	f000 f904 	bl	8006c64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	601a      	str	r2, [r3, #0]
 8006a62:	e002      	b.n	8006a6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006a6a:	4a04      	ldr	r2, [pc, #16]	; (8006a7c <prvSampleTimeNow+0x3c>)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006a70:	68fb      	ldr	r3, [r7, #12]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	20000c8c 	.word	0x20000c8c

08006a80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
 8006a8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d812      	bhi.n	8006acc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	1ad2      	subs	r2, r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d302      	bcc.n	8006aba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	617b      	str	r3, [r7, #20]
 8006ab8:	e01b      	b.n	8006af2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006aba:	4b10      	ldr	r3, [pc, #64]	; (8006afc <prvInsertTimerInActiveList+0x7c>)
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4610      	mov	r0, r2
 8006ac6:	f7fd fdf9 	bl	80046bc <vListInsert>
 8006aca:	e012      	b.n	8006af2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d206      	bcs.n	8006ae2 <prvInsertTimerInActiveList+0x62>
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d302      	bcc.n	8006ae2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006adc:	2301      	movs	r3, #1
 8006ade:	617b      	str	r3, [r7, #20]
 8006ae0:	e007      	b.n	8006af2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ae2:	4b07      	ldr	r3, [pc, #28]	; (8006b00 <prvInsertTimerInActiveList+0x80>)
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	3304      	adds	r3, #4
 8006aea:	4619      	mov	r1, r3
 8006aec:	4610      	mov	r0, r2
 8006aee:	f7fd fde5 	bl	80046bc <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006af2:	697b      	ldr	r3, [r7, #20]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3718      	adds	r7, #24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	20000c80 	.word	0x20000c80
 8006b00:	20000c7c 	.word	0x20000c7c

08006b04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b08e      	sub	sp, #56	; 0x38
 8006b08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b0a:	e099      	b.n	8006c40 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	da17      	bge.n	8006b42 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006b12:	1d3b      	adds	r3, r7, #4
 8006b14:	3304      	adds	r3, #4
 8006b16:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d109      	bne.n	8006b32 <prvProcessReceivedCommands+0x2e>
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	61fb      	str	r3, [r7, #28]
 8006b30:	e7fe      	b.n	8006b30 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b38:	6850      	ldr	r0, [r2, #4]
 8006b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b3c:	6892      	ldr	r2, [r2, #8]
 8006b3e:	4611      	mov	r1, r2
 8006b40:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	db7a      	blt.n	8006c3e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d004      	beq.n	8006b5e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b56:	3304      	adds	r3, #4
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7fd fde7 	bl	800472c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b5e:	463b      	mov	r3, r7
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7ff ff6d 	bl	8006a40 <prvSampleTimeNow>
 8006b66:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b09      	cmp	r3, #9
 8006b6c:	d868      	bhi.n	8006c40 <prvProcessReceivedCommands+0x13c>
 8006b6e:	a201      	add	r2, pc, #4	; (adr r2, 8006b74 <prvProcessReceivedCommands+0x70>)
 8006b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b74:	08006b9d 	.word	0x08006b9d
 8006b78:	08006b9d 	.word	0x08006b9d
 8006b7c:	08006b9d 	.word	0x08006b9d
 8006b80:	08006c41 	.word	0x08006c41
 8006b84:	08006bf7 	.word	0x08006bf7
 8006b88:	08006c2d 	.word	0x08006c2d
 8006b8c:	08006b9d 	.word	0x08006b9d
 8006b90:	08006b9d 	.word	0x08006b9d
 8006b94:	08006c41 	.word	0x08006c41
 8006b98:	08006bf7 	.word	0x08006bf7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	18d1      	adds	r1, r2, r3
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006baa:	f7ff ff69 	bl	8006a80 <prvInsertTimerInActiveList>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d045      	beq.n	8006c40 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bba:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d13d      	bne.n	8006c40 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	441a      	add	r2, r3
 8006bcc:	2300      	movs	r3, #0
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bd6:	f7ff fe23 	bl	8006820 <xTimerGenericCommand>
 8006bda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d12e      	bne.n	8006c40 <prvProcessReceivedCommands+0x13c>
 8006be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	61bb      	str	r3, [r7, #24]
 8006bf4:	e7fe      	b.n	8006bf4 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d109      	bne.n	8006c18 <prvProcessReceivedCommands+0x114>
 8006c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	617b      	str	r3, [r7, #20]
 8006c16:	e7fe      	b.n	8006c16 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1a:	699a      	ldr	r2, [r3, #24]
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	18d1      	adds	r1, r2, r3
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c26:	f7ff ff2b 	bl	8006a80 <prvInsertTimerInActiveList>
					break;
 8006c2a:	e009      	b.n	8006c40 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d104      	bne.n	8006c40 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8006c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c38:	f000 fb56 	bl	80072e8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006c3c:	e000      	b.n	8006c40 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006c3e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c40:	4b07      	ldr	r3, [pc, #28]	; (8006c60 <prvProcessReceivedCommands+0x15c>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	1d39      	adds	r1, r7, #4
 8006c46:	2200      	movs	r2, #0
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7fe f951 	bl	8004ef0 <xQueueReceive>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f47f af5b 	bne.w	8006b0c <prvProcessReceivedCommands+0x8>
	}
}
 8006c56:	bf00      	nop
 8006c58:	3730      	adds	r7, #48	; 0x30
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	20000c84 	.word	0x20000c84

08006c64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b088      	sub	sp, #32
 8006c68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c6a:	e044      	b.n	8006cf6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c6c:	4b2b      	ldr	r3, [pc, #172]	; (8006d1c <prvSwitchTimerLists+0xb8>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c76:	4b29      	ldr	r3, [pc, #164]	; (8006d1c <prvSwitchTimerLists+0xb8>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	3304      	adds	r3, #4
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7fd fd51 	bl	800472c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d12d      	bne.n	8006cf6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d90e      	bls.n	8006cca <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006cb8:	4b18      	ldr	r3, [pc, #96]	; (8006d1c <prvSwitchTimerLists+0xb8>)
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	4610      	mov	r0, r2
 8006cc4:	f7fd fcfa 	bl	80046bc <vListInsert>
 8006cc8:	e015      	b.n	8006cf6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006cca:	2300      	movs	r3, #0
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	2300      	movs	r3, #0
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f7ff fda3 	bl	8006820 <xTimerGenericCommand>
 8006cda:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d109      	bne.n	8006cf6 <prvSwitchTimerLists+0x92>
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	603b      	str	r3, [r7, #0]
 8006cf4:	e7fe      	b.n	8006cf4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006cf6:	4b09      	ldr	r3, [pc, #36]	; (8006d1c <prvSwitchTimerLists+0xb8>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1b5      	bne.n	8006c6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006d00:	4b06      	ldr	r3, [pc, #24]	; (8006d1c <prvSwitchTimerLists+0xb8>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006d06:	4b06      	ldr	r3, [pc, #24]	; (8006d20 <prvSwitchTimerLists+0xbc>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a04      	ldr	r2, [pc, #16]	; (8006d1c <prvSwitchTimerLists+0xb8>)
 8006d0c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006d0e:	4a04      	ldr	r2, [pc, #16]	; (8006d20 <prvSwitchTimerLists+0xbc>)
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	6013      	str	r3, [r2, #0]
}
 8006d14:	bf00      	nop
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	20000c7c 	.word	0x20000c7c
 8006d20:	20000c80 	.word	0x20000c80

08006d24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006d2a:	f000 f925 	bl	8006f78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006d2e:	4b15      	ldr	r3, [pc, #84]	; (8006d84 <prvCheckForValidListAndQueue+0x60>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d120      	bne.n	8006d78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006d36:	4814      	ldr	r0, [pc, #80]	; (8006d88 <prvCheckForValidListAndQueue+0x64>)
 8006d38:	f7fd fc72 	bl	8004620 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006d3c:	4813      	ldr	r0, [pc, #76]	; (8006d8c <prvCheckForValidListAndQueue+0x68>)
 8006d3e:	f7fd fc6f 	bl	8004620 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006d42:	4b13      	ldr	r3, [pc, #76]	; (8006d90 <prvCheckForValidListAndQueue+0x6c>)
 8006d44:	4a10      	ldr	r2, [pc, #64]	; (8006d88 <prvCheckForValidListAndQueue+0x64>)
 8006d46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006d48:	4b12      	ldr	r3, [pc, #72]	; (8006d94 <prvCheckForValidListAndQueue+0x70>)
 8006d4a:	4a10      	ldr	r2, [pc, #64]	; (8006d8c <prvCheckForValidListAndQueue+0x68>)
 8006d4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d4e:	2300      	movs	r3, #0
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	4b11      	ldr	r3, [pc, #68]	; (8006d98 <prvCheckForValidListAndQueue+0x74>)
 8006d54:	4a11      	ldr	r2, [pc, #68]	; (8006d9c <prvCheckForValidListAndQueue+0x78>)
 8006d56:	2110      	movs	r1, #16
 8006d58:	200a      	movs	r0, #10
 8006d5a:	f7fd fd79 	bl	8004850 <xQueueGenericCreateStatic>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	4b08      	ldr	r3, [pc, #32]	; (8006d84 <prvCheckForValidListAndQueue+0x60>)
 8006d62:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006d64:	4b07      	ldr	r3, [pc, #28]	; (8006d84 <prvCheckForValidListAndQueue+0x60>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d005      	beq.n	8006d78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d6c:	4b05      	ldr	r3, [pc, #20]	; (8006d84 <prvCheckForValidListAndQueue+0x60>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	490b      	ldr	r1, [pc, #44]	; (8006da0 <prvCheckForValidListAndQueue+0x7c>)
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fe fc9e 	bl	80056b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d78:	f000 f92c 	bl	8006fd4 <vPortExitCritical>
}
 8006d7c:	bf00      	nop
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	20000c84 	.word	0x20000c84
 8006d88:	20000c54 	.word	0x20000c54
 8006d8c:	20000c68 	.word	0x20000c68
 8006d90:	20000c7c 	.word	0x20000c7c
 8006d94:	20000c80 	.word	0x20000c80
 8006d98:	20000d30 	.word	0x20000d30
 8006d9c:	20000c90 	.word	0x20000c90
 8006da0:	080085ec 	.word	0x080085ec

08006da4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	3b04      	subs	r3, #4
 8006db4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006dbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3b04      	subs	r3, #4
 8006dc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	f023 0201 	bic.w	r2, r3, #1
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	3b04      	subs	r3, #4
 8006dd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006dd4:	4a08      	ldr	r2, [pc, #32]	; (8006df8 <pxPortInitialiseStack+0x54>)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	3b14      	subs	r3, #20
 8006dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	3b20      	subs	r3, #32
 8006dea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006dec:	68fb      	ldr	r3, [r7, #12]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bc80      	pop	{r7}
 8006df6:	4770      	bx	lr
 8006df8:	08006dfd 	.word	0x08006dfd

08006dfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006e02:	2300      	movs	r3, #0
 8006e04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e06:	4b10      	ldr	r3, [pc, #64]	; (8006e48 <prvTaskExitError+0x4c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e0e:	d009      	beq.n	8006e24 <prvTaskExitError+0x28>
 8006e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	60fb      	str	r3, [r7, #12]
 8006e22:	e7fe      	b.n	8006e22 <prvTaskExitError+0x26>
 8006e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e36:	bf00      	nop
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d0fc      	beq.n	8006e38 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e3e:	bf00      	nop
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bc80      	pop	{r7}
 8006e46:	4770      	bx	lr
 8006e48:	2000000c 	.word	0x2000000c
 8006e4c:	00000000 	.word	0x00000000

08006e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e50:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <pxCurrentTCBConst2>)
 8006e52:	6819      	ldr	r1, [r3, #0]
 8006e54:	6808      	ldr	r0, [r1, #0]
 8006e56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e5a:	f380 8809 	msr	PSP, r0
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f04f 0000 	mov.w	r0, #0
 8006e66:	f380 8811 	msr	BASEPRI, r0
 8006e6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006e6e:	4770      	bx	lr

08006e70 <pxCurrentTCBConst2>:
 8006e70:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e74:	bf00      	nop
 8006e76:	bf00      	nop

08006e78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006e78:	4806      	ldr	r0, [pc, #24]	; (8006e94 <prvPortStartFirstTask+0x1c>)
 8006e7a:	6800      	ldr	r0, [r0, #0]
 8006e7c:	6800      	ldr	r0, [r0, #0]
 8006e7e:	f380 8808 	msr	MSP, r0
 8006e82:	b662      	cpsie	i
 8006e84:	b661      	cpsie	f
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	df00      	svc	0
 8006e90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e92:	bf00      	nop
 8006e94:	e000ed08 	.word	0xe000ed08

08006e98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e9e:	4b31      	ldr	r3, [pc, #196]	; (8006f64 <xPortStartScheduler+0xcc>)
 8006ea0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	22ff      	movs	r2, #255	; 0xff
 8006eae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006eb8:	78fb      	ldrb	r3, [r7, #3]
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	4b29      	ldr	r3, [pc, #164]	; (8006f68 <xPortStartScheduler+0xd0>)
 8006ec4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ec6:	4b29      	ldr	r3, [pc, #164]	; (8006f6c <xPortStartScheduler+0xd4>)
 8006ec8:	2207      	movs	r2, #7
 8006eca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ecc:	e009      	b.n	8006ee2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006ece:	4b27      	ldr	r3, [pc, #156]	; (8006f6c <xPortStartScheduler+0xd4>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	4a25      	ldr	r2, [pc, #148]	; (8006f6c <xPortStartScheduler+0xd4>)
 8006ed6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ed8:	78fb      	ldrb	r3, [r7, #3]
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	005b      	lsls	r3, r3, #1
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ee2:	78fb      	ldrb	r3, [r7, #3]
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eea:	2b80      	cmp	r3, #128	; 0x80
 8006eec:	d0ef      	beq.n	8006ece <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006eee:	4b1f      	ldr	r3, [pc, #124]	; (8006f6c <xPortStartScheduler+0xd4>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f1c3 0307 	rsb	r3, r3, #7
 8006ef6:	2b04      	cmp	r3, #4
 8006ef8:	d009      	beq.n	8006f0e <xPortStartScheduler+0x76>
 8006efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	60bb      	str	r3, [r7, #8]
 8006f0c:	e7fe      	b.n	8006f0c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f0e:	4b17      	ldr	r3, [pc, #92]	; (8006f6c <xPortStartScheduler+0xd4>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	021b      	lsls	r3, r3, #8
 8006f14:	4a15      	ldr	r2, [pc, #84]	; (8006f6c <xPortStartScheduler+0xd4>)
 8006f16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f18:	4b14      	ldr	r3, [pc, #80]	; (8006f6c <xPortStartScheduler+0xd4>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f20:	4a12      	ldr	r2, [pc, #72]	; (8006f6c <xPortStartScheduler+0xd4>)
 8006f22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	b2da      	uxtb	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f2c:	4b10      	ldr	r3, [pc, #64]	; (8006f70 <xPortStartScheduler+0xd8>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a0f      	ldr	r2, [pc, #60]	; (8006f70 <xPortStartScheduler+0xd8>)
 8006f32:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f38:	4b0d      	ldr	r3, [pc, #52]	; (8006f70 <xPortStartScheduler+0xd8>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a0c      	ldr	r2, [pc, #48]	; (8006f70 <xPortStartScheduler+0xd8>)
 8006f3e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f44:	f000 f8b0 	bl	80070a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f48:	4b0a      	ldr	r3, [pc, #40]	; (8006f74 <xPortStartScheduler+0xdc>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f4e:	f7ff ff93 	bl	8006e78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f52:	f7fe ffd5 	bl	8005f00 <vTaskSwitchContext>
	prvTaskExitError();
 8006f56:	f7ff ff51 	bl	8006dfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	e000e400 	.word	0xe000e400
 8006f68:	20000d80 	.word	0x20000d80
 8006f6c:	20000d84 	.word	0x20000d84
 8006f70:	e000ed20 	.word	0xe000ed20
 8006f74:	2000000c 	.word	0x2000000c

08006f78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f90:	4b0e      	ldr	r3, [pc, #56]	; (8006fcc <vPortEnterCritical+0x54>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3301      	adds	r3, #1
 8006f96:	4a0d      	ldr	r2, [pc, #52]	; (8006fcc <vPortEnterCritical+0x54>)
 8006f98:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f9a:	4b0c      	ldr	r3, [pc, #48]	; (8006fcc <vPortEnterCritical+0x54>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d10e      	bne.n	8006fc0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006fa2:	4b0b      	ldr	r3, [pc, #44]	; (8006fd0 <vPortEnterCritical+0x58>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d009      	beq.n	8006fc0 <vPortEnterCritical+0x48>
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	603b      	str	r3, [r7, #0]
 8006fbe:	e7fe      	b.n	8006fbe <vPortEnterCritical+0x46>
	}
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bc80      	pop	{r7}
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	2000000c 	.word	0x2000000c
 8006fd0:	e000ed04 	.word	0xe000ed04

08006fd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006fda:	4b10      	ldr	r3, [pc, #64]	; (800701c <vPortExitCritical+0x48>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d109      	bne.n	8006ff6 <vPortExitCritical+0x22>
 8006fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	607b      	str	r3, [r7, #4]
 8006ff4:	e7fe      	b.n	8006ff4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006ff6:	4b09      	ldr	r3, [pc, #36]	; (800701c <vPortExitCritical+0x48>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	4a07      	ldr	r2, [pc, #28]	; (800701c <vPortExitCritical+0x48>)
 8006ffe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007000:	4b06      	ldr	r3, [pc, #24]	; (800701c <vPortExitCritical+0x48>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d104      	bne.n	8007012 <vPortExitCritical+0x3e>
 8007008:	2300      	movs	r3, #0
 800700a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007012:	bf00      	nop
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	bc80      	pop	{r7}
 800701a:	4770      	bx	lr
 800701c:	2000000c 	.word	0x2000000c

08007020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007020:	f3ef 8009 	mrs	r0, PSP
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	4b0d      	ldr	r3, [pc, #52]	; (8007060 <pxCurrentTCBConst>)
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007030:	6010      	str	r0, [r2, #0]
 8007032:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007036:	f04f 0050 	mov.w	r0, #80	; 0x50
 800703a:	f380 8811 	msr	BASEPRI, r0
 800703e:	f7fe ff5f 	bl	8005f00 <vTaskSwitchContext>
 8007042:	f04f 0000 	mov.w	r0, #0
 8007046:	f380 8811 	msr	BASEPRI, r0
 800704a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800704e:	6819      	ldr	r1, [r3, #0]
 8007050:	6808      	ldr	r0, [r1, #0]
 8007052:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007056:	f380 8809 	msr	PSP, r0
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	4770      	bx	lr

08007060 <pxCurrentTCBConst>:
 8007060:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007064:	bf00      	nop
 8007066:	bf00      	nop

08007068 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007080:	f7fe fe80 	bl	8005d84 <xTaskIncrementTick>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d003      	beq.n	8007092 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800708a:	4b06      	ldr	r3, [pc, #24]	; (80070a4 <SysTick_Handler+0x3c>)
 800708c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	2300      	movs	r3, #0
 8007094:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800709c:	bf00      	nop
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	e000ed04 	.word	0xe000ed04

080070a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80070a8:	b480      	push	{r7}
 80070aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80070ac:	4b0a      	ldr	r3, [pc, #40]	; (80070d8 <vPortSetupTimerInterrupt+0x30>)
 80070ae:	2200      	movs	r2, #0
 80070b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80070b2:	4b0a      	ldr	r3, [pc, #40]	; (80070dc <vPortSetupTimerInterrupt+0x34>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80070b8:	4b09      	ldr	r3, [pc, #36]	; (80070e0 <vPortSetupTimerInterrupt+0x38>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a09      	ldr	r2, [pc, #36]	; (80070e4 <vPortSetupTimerInterrupt+0x3c>)
 80070be:	fba2 2303 	umull	r2, r3, r2, r3
 80070c2:	099b      	lsrs	r3, r3, #6
 80070c4:	4a08      	ldr	r2, [pc, #32]	; (80070e8 <vPortSetupTimerInterrupt+0x40>)
 80070c6:	3b01      	subs	r3, #1
 80070c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80070ca:	4b03      	ldr	r3, [pc, #12]	; (80070d8 <vPortSetupTimerInterrupt+0x30>)
 80070cc:	2207      	movs	r2, #7
 80070ce:	601a      	str	r2, [r3, #0]
}
 80070d0:	bf00      	nop
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bc80      	pop	{r7}
 80070d6:	4770      	bx	lr
 80070d8:	e000e010 	.word	0xe000e010
 80070dc:	e000e018 	.word	0xe000e018
 80070e0:	20000000 	.word	0x20000000
 80070e4:	10624dd3 	.word	0x10624dd3
 80070e8:	e000e014 	.word	0xe000e014

080070ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80070f2:	f3ef 8305 	mrs	r3, IPSR
 80070f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2b0f      	cmp	r3, #15
 80070fc:	d913      	bls.n	8007126 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80070fe:	4a15      	ldr	r2, [pc, #84]	; (8007154 <vPortValidateInterruptPriority+0x68>)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	4413      	add	r3, r2
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007108:	4b13      	ldr	r3, [pc, #76]	; (8007158 <vPortValidateInterruptPriority+0x6c>)
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	7afa      	ldrb	r2, [r7, #11]
 800710e:	429a      	cmp	r2, r3
 8007110:	d209      	bcs.n	8007126 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	607b      	str	r3, [r7, #4]
 8007124:	e7fe      	b.n	8007124 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007126:	4b0d      	ldr	r3, [pc, #52]	; (800715c <vPortValidateInterruptPriority+0x70>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800712e:	4b0c      	ldr	r3, [pc, #48]	; (8007160 <vPortValidateInterruptPriority+0x74>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d909      	bls.n	800714a <vPortValidateInterruptPriority+0x5e>
 8007136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	603b      	str	r3, [r7, #0]
 8007148:	e7fe      	b.n	8007148 <vPortValidateInterruptPriority+0x5c>
	}
 800714a:	bf00      	nop
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	bc80      	pop	{r7}
 8007152:	4770      	bx	lr
 8007154:	e000e3f0 	.word	0xe000e3f0
 8007158:	20000d80 	.word	0x20000d80
 800715c:	e000ed0c 	.word	0xe000ed0c
 8007160:	20000d84 	.word	0x20000d84

08007164 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b08a      	sub	sp, #40	; 0x28
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800716c:	2300      	movs	r3, #0
 800716e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007170:	f7fe fd50 	bl	8005c14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007174:	4b57      	ldr	r3, [pc, #348]	; (80072d4 <pvPortMalloc+0x170>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800717c:	f000 f90c 	bl	8007398 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007180:	4b55      	ldr	r3, [pc, #340]	; (80072d8 <pvPortMalloc+0x174>)
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4013      	ands	r3, r2
 8007188:	2b00      	cmp	r3, #0
 800718a:	f040 808c 	bne.w	80072a6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d01c      	beq.n	80071ce <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007194:	2208      	movs	r2, #8
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4413      	add	r3, r2
 800719a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f003 0307 	and.w	r3, r3, #7
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d013      	beq.n	80071ce <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f023 0307 	bic.w	r3, r3, #7
 80071ac:	3308      	adds	r3, #8
 80071ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f003 0307 	and.w	r3, r3, #7
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d009      	beq.n	80071ce <pvPortMalloc+0x6a>
 80071ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	617b      	str	r3, [r7, #20]
 80071cc:	e7fe      	b.n	80071cc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d068      	beq.n	80072a6 <pvPortMalloc+0x142>
 80071d4:	4b41      	ldr	r3, [pc, #260]	; (80072dc <pvPortMalloc+0x178>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d863      	bhi.n	80072a6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80071de:	4b40      	ldr	r3, [pc, #256]	; (80072e0 <pvPortMalloc+0x17c>)
 80071e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80071e2:	4b3f      	ldr	r3, [pc, #252]	; (80072e0 <pvPortMalloc+0x17c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071e8:	e004      	b.n	80071f4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80071ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d903      	bls.n	8007206 <pvPortMalloc+0xa2>
 80071fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1f1      	bne.n	80071ea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007206:	4b33      	ldr	r3, [pc, #204]	; (80072d4 <pvPortMalloc+0x170>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800720c:	429a      	cmp	r2, r3
 800720e:	d04a      	beq.n	80072a6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007210:	6a3b      	ldr	r3, [r7, #32]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2208      	movs	r2, #8
 8007216:	4413      	add	r3, r2
 8007218:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	1ad2      	subs	r2, r2, r3
 800722a:	2308      	movs	r3, #8
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	429a      	cmp	r2, r3
 8007230:	d91e      	bls.n	8007270 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4413      	add	r3, r2
 8007238:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	f003 0307 	and.w	r3, r3, #7
 8007240:	2b00      	cmp	r3, #0
 8007242:	d009      	beq.n	8007258 <pvPortMalloc+0xf4>
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	613b      	str	r3, [r7, #16]
 8007256:	e7fe      	b.n	8007256 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	1ad2      	subs	r2, r2, r3
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800726a:	69b8      	ldr	r0, [r7, #24]
 800726c:	f000 f8f6 	bl	800745c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007270:	4b1a      	ldr	r3, [pc, #104]	; (80072dc <pvPortMalloc+0x178>)
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	4a18      	ldr	r2, [pc, #96]	; (80072dc <pvPortMalloc+0x178>)
 800727c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800727e:	4b17      	ldr	r3, [pc, #92]	; (80072dc <pvPortMalloc+0x178>)
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	4b18      	ldr	r3, [pc, #96]	; (80072e4 <pvPortMalloc+0x180>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	429a      	cmp	r2, r3
 8007288:	d203      	bcs.n	8007292 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800728a:	4b14      	ldr	r3, [pc, #80]	; (80072dc <pvPortMalloc+0x178>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a15      	ldr	r2, [pc, #84]	; (80072e4 <pvPortMalloc+0x180>)
 8007290:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	685a      	ldr	r2, [r3, #4]
 8007296:	4b10      	ldr	r3, [pc, #64]	; (80072d8 <pvPortMalloc+0x174>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	431a      	orrs	r2, r3
 800729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80072a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a2:	2200      	movs	r2, #0
 80072a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80072a6:	f7fe fcc3 	bl	8005c30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	f003 0307 	and.w	r3, r3, #7
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d009      	beq.n	80072c8 <pvPortMalloc+0x164>
 80072b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	60fb      	str	r3, [r7, #12]
 80072c6:	e7fe      	b.n	80072c6 <pvPortMalloc+0x162>
	return pvReturn;
 80072c8:	69fb      	ldr	r3, [r7, #28]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3728      	adds	r7, #40	; 0x28
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	20001990 	.word	0x20001990
 80072d8:	2000199c 	.word	0x2000199c
 80072dc:	20001994 	.word	0x20001994
 80072e0:	20001988 	.word	0x20001988
 80072e4:	20001998 	.word	0x20001998

080072e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d046      	beq.n	8007388 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80072fa:	2308      	movs	r3, #8
 80072fc:	425b      	negs	r3, r3
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	4413      	add	r3, r2
 8007302:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	4b20      	ldr	r3, [pc, #128]	; (8007390 <vPortFree+0xa8>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4013      	ands	r3, r2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d109      	bne.n	800732a <vPortFree+0x42>
 8007316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731a:	f383 8811 	msr	BASEPRI, r3
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	e7fe      	b.n	8007328 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d009      	beq.n	8007346 <vPortFree+0x5e>
 8007332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	60bb      	str	r3, [r7, #8]
 8007344:	e7fe      	b.n	8007344 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	4b11      	ldr	r3, [pc, #68]	; (8007390 <vPortFree+0xa8>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4013      	ands	r3, r2
 8007350:	2b00      	cmp	r3, #0
 8007352:	d019      	beq.n	8007388 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d115      	bne.n	8007388 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <vPortFree+0xa8>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	43db      	mvns	r3, r3
 8007366:	401a      	ands	r2, r3
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800736c:	f7fe fc52 	bl	8005c14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	4b07      	ldr	r3, [pc, #28]	; (8007394 <vPortFree+0xac>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4413      	add	r3, r2
 800737a:	4a06      	ldr	r2, [pc, #24]	; (8007394 <vPortFree+0xac>)
 800737c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800737e:	6938      	ldr	r0, [r7, #16]
 8007380:	f000 f86c 	bl	800745c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007384:	f7fe fc54 	bl	8005c30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007388:	bf00      	nop
 800738a:	3718      	adds	r7, #24
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	2000199c 	.word	0x2000199c
 8007394:	20001994 	.word	0x20001994

08007398 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800739e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80073a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80073a4:	4b27      	ldr	r3, [pc, #156]	; (8007444 <prvHeapInit+0xac>)
 80073a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f003 0307 	and.w	r3, r3, #7
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00c      	beq.n	80073cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3307      	adds	r3, #7
 80073b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 0307 	bic.w	r3, r3, #7
 80073be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	4a1f      	ldr	r2, [pc, #124]	; (8007444 <prvHeapInit+0xac>)
 80073c8:	4413      	add	r3, r2
 80073ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80073d0:	4a1d      	ldr	r2, [pc, #116]	; (8007448 <prvHeapInit+0xb0>)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80073d6:	4b1c      	ldr	r3, [pc, #112]	; (8007448 <prvHeapInit+0xb0>)
 80073d8:	2200      	movs	r2, #0
 80073da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	4413      	add	r3, r2
 80073e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80073e4:	2208      	movs	r2, #8
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	1a9b      	subs	r3, r3, r2
 80073ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f023 0307 	bic.w	r3, r3, #7
 80073f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	4a15      	ldr	r2, [pc, #84]	; (800744c <prvHeapInit+0xb4>)
 80073f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80073fa:	4b14      	ldr	r3, [pc, #80]	; (800744c <prvHeapInit+0xb4>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2200      	movs	r2, #0
 8007400:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007402:	4b12      	ldr	r3, [pc, #72]	; (800744c <prvHeapInit+0xb4>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2200      	movs	r2, #0
 8007408:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	1ad2      	subs	r2, r2, r3
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007418:	4b0c      	ldr	r3, [pc, #48]	; (800744c <prvHeapInit+0xb4>)
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	4a0a      	ldr	r2, [pc, #40]	; (8007450 <prvHeapInit+0xb8>)
 8007426:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	4a09      	ldr	r2, [pc, #36]	; (8007454 <prvHeapInit+0xbc>)
 800742e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007430:	4b09      	ldr	r3, [pc, #36]	; (8007458 <prvHeapInit+0xc0>)
 8007432:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007436:	601a      	str	r2, [r3, #0]
}
 8007438:	bf00      	nop
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	bc80      	pop	{r7}
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	20000d88 	.word	0x20000d88
 8007448:	20001988 	.word	0x20001988
 800744c:	20001990 	.word	0x20001990
 8007450:	20001998 	.word	0x20001998
 8007454:	20001994 	.word	0x20001994
 8007458:	2000199c 	.word	0x2000199c

0800745c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007464:	4b27      	ldr	r3, [pc, #156]	; (8007504 <prvInsertBlockIntoFreeList+0xa8>)
 8007466:	60fb      	str	r3, [r7, #12]
 8007468:	e002      	b.n	8007470 <prvInsertBlockIntoFreeList+0x14>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	429a      	cmp	r2, r3
 8007478:	d8f7      	bhi.n	800746a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	4413      	add	r3, r2
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	429a      	cmp	r2, r3
 800748a:	d108      	bne.n	800749e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	441a      	add	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	441a      	add	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d118      	bne.n	80074e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	4b14      	ldr	r3, [pc, #80]	; (8007508 <prvInsertBlockIntoFreeList+0xac>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d00d      	beq.n	80074da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	441a      	add	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	e008      	b.n	80074ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80074da:	4b0b      	ldr	r3, [pc, #44]	; (8007508 <prvInsertBlockIntoFreeList+0xac>)
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	601a      	str	r2, [r3, #0]
 80074e2:	e003      	b.n	80074ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d002      	beq.n	80074fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074fa:	bf00      	nop
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	bc80      	pop	{r7}
 8007502:	4770      	bx	lr
 8007504:	20001988 	.word	0x20001988
 8007508:	20001990 	.word	0x20001990

0800750c <__errno>:
 800750c:	4b01      	ldr	r3, [pc, #4]	; (8007514 <__errno+0x8>)
 800750e:	6818      	ldr	r0, [r3, #0]
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	20000010 	.word	0x20000010

08007518 <__libc_init_array>:
 8007518:	b570      	push	{r4, r5, r6, lr}
 800751a:	2500      	movs	r5, #0
 800751c:	4e0c      	ldr	r6, [pc, #48]	; (8007550 <__libc_init_array+0x38>)
 800751e:	4c0d      	ldr	r4, [pc, #52]	; (8007554 <__libc_init_array+0x3c>)
 8007520:	1ba4      	subs	r4, r4, r6
 8007522:	10a4      	asrs	r4, r4, #2
 8007524:	42a5      	cmp	r5, r4
 8007526:	d109      	bne.n	800753c <__libc_init_array+0x24>
 8007528:	f000 ffca 	bl	80084c0 <_init>
 800752c:	2500      	movs	r5, #0
 800752e:	4e0a      	ldr	r6, [pc, #40]	; (8007558 <__libc_init_array+0x40>)
 8007530:	4c0a      	ldr	r4, [pc, #40]	; (800755c <__libc_init_array+0x44>)
 8007532:	1ba4      	subs	r4, r4, r6
 8007534:	10a4      	asrs	r4, r4, #2
 8007536:	42a5      	cmp	r5, r4
 8007538:	d105      	bne.n	8007546 <__libc_init_array+0x2e>
 800753a:	bd70      	pop	{r4, r5, r6, pc}
 800753c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007540:	4798      	blx	r3
 8007542:	3501      	adds	r5, #1
 8007544:	e7ee      	b.n	8007524 <__libc_init_array+0xc>
 8007546:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800754a:	4798      	blx	r3
 800754c:	3501      	adds	r5, #1
 800754e:	e7f2      	b.n	8007536 <__libc_init_array+0x1e>
 8007550:	080086fc 	.word	0x080086fc
 8007554:	080086fc 	.word	0x080086fc
 8007558:	080086fc 	.word	0x080086fc
 800755c:	08008700 	.word	0x08008700

08007560 <memcpy>:
 8007560:	b510      	push	{r4, lr}
 8007562:	1e43      	subs	r3, r0, #1
 8007564:	440a      	add	r2, r1
 8007566:	4291      	cmp	r1, r2
 8007568:	d100      	bne.n	800756c <memcpy+0xc>
 800756a:	bd10      	pop	{r4, pc}
 800756c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007570:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007574:	e7f7      	b.n	8007566 <memcpy+0x6>

08007576 <memset>:
 8007576:	4603      	mov	r3, r0
 8007578:	4402      	add	r2, r0
 800757a:	4293      	cmp	r3, r2
 800757c:	d100      	bne.n	8007580 <memset+0xa>
 800757e:	4770      	bx	lr
 8007580:	f803 1b01 	strb.w	r1, [r3], #1
 8007584:	e7f9      	b.n	800757a <memset+0x4>
	...

08007588 <iprintf>:
 8007588:	b40f      	push	{r0, r1, r2, r3}
 800758a:	4b0a      	ldr	r3, [pc, #40]	; (80075b4 <iprintf+0x2c>)
 800758c:	b513      	push	{r0, r1, r4, lr}
 800758e:	681c      	ldr	r4, [r3, #0]
 8007590:	b124      	cbz	r4, 800759c <iprintf+0x14>
 8007592:	69a3      	ldr	r3, [r4, #24]
 8007594:	b913      	cbnz	r3, 800759c <iprintf+0x14>
 8007596:	4620      	mov	r0, r4
 8007598:	f000 fa36 	bl	8007a08 <__sinit>
 800759c:	ab05      	add	r3, sp, #20
 800759e:	9a04      	ldr	r2, [sp, #16]
 80075a0:	68a1      	ldr	r1, [r4, #8]
 80075a2:	4620      	mov	r0, r4
 80075a4:	9301      	str	r3, [sp, #4]
 80075a6:	f000 fbeb 	bl	8007d80 <_vfiprintf_r>
 80075aa:	b002      	add	sp, #8
 80075ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075b0:	b004      	add	sp, #16
 80075b2:	4770      	bx	lr
 80075b4:	20000010 	.word	0x20000010

080075b8 <putchar>:
 80075b8:	b538      	push	{r3, r4, r5, lr}
 80075ba:	4b08      	ldr	r3, [pc, #32]	; (80075dc <putchar+0x24>)
 80075bc:	4605      	mov	r5, r0
 80075be:	681c      	ldr	r4, [r3, #0]
 80075c0:	b124      	cbz	r4, 80075cc <putchar+0x14>
 80075c2:	69a3      	ldr	r3, [r4, #24]
 80075c4:	b913      	cbnz	r3, 80075cc <putchar+0x14>
 80075c6:	4620      	mov	r0, r4
 80075c8:	f000 fa1e 	bl	8007a08 <__sinit>
 80075cc:	68a2      	ldr	r2, [r4, #8]
 80075ce:	4629      	mov	r1, r5
 80075d0:	4620      	mov	r0, r4
 80075d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075d6:	f000 be71 	b.w	80082bc <_putc_r>
 80075da:	bf00      	nop
 80075dc:	20000010 	.word	0x20000010

080075e0 <_puts_r>:
 80075e0:	b570      	push	{r4, r5, r6, lr}
 80075e2:	460e      	mov	r6, r1
 80075e4:	4605      	mov	r5, r0
 80075e6:	b118      	cbz	r0, 80075f0 <_puts_r+0x10>
 80075e8:	6983      	ldr	r3, [r0, #24]
 80075ea:	b90b      	cbnz	r3, 80075f0 <_puts_r+0x10>
 80075ec:	f000 fa0c 	bl	8007a08 <__sinit>
 80075f0:	69ab      	ldr	r3, [r5, #24]
 80075f2:	68ac      	ldr	r4, [r5, #8]
 80075f4:	b913      	cbnz	r3, 80075fc <_puts_r+0x1c>
 80075f6:	4628      	mov	r0, r5
 80075f8:	f000 fa06 	bl	8007a08 <__sinit>
 80075fc:	4b23      	ldr	r3, [pc, #140]	; (800768c <_puts_r+0xac>)
 80075fe:	429c      	cmp	r4, r3
 8007600:	d117      	bne.n	8007632 <_puts_r+0x52>
 8007602:	686c      	ldr	r4, [r5, #4]
 8007604:	89a3      	ldrh	r3, [r4, #12]
 8007606:	071b      	lsls	r3, r3, #28
 8007608:	d51d      	bpl.n	8007646 <_puts_r+0x66>
 800760a:	6923      	ldr	r3, [r4, #16]
 800760c:	b1db      	cbz	r3, 8007646 <_puts_r+0x66>
 800760e:	3e01      	subs	r6, #1
 8007610:	68a3      	ldr	r3, [r4, #8]
 8007612:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007616:	3b01      	subs	r3, #1
 8007618:	60a3      	str	r3, [r4, #8]
 800761a:	b9e9      	cbnz	r1, 8007658 <_puts_r+0x78>
 800761c:	2b00      	cmp	r3, #0
 800761e:	da2e      	bge.n	800767e <_puts_r+0x9e>
 8007620:	4622      	mov	r2, r4
 8007622:	210a      	movs	r1, #10
 8007624:	4628      	mov	r0, r5
 8007626:	f000 f83f 	bl	80076a8 <__swbuf_r>
 800762a:	3001      	adds	r0, #1
 800762c:	d011      	beq.n	8007652 <_puts_r+0x72>
 800762e:	200a      	movs	r0, #10
 8007630:	e011      	b.n	8007656 <_puts_r+0x76>
 8007632:	4b17      	ldr	r3, [pc, #92]	; (8007690 <_puts_r+0xb0>)
 8007634:	429c      	cmp	r4, r3
 8007636:	d101      	bne.n	800763c <_puts_r+0x5c>
 8007638:	68ac      	ldr	r4, [r5, #8]
 800763a:	e7e3      	b.n	8007604 <_puts_r+0x24>
 800763c:	4b15      	ldr	r3, [pc, #84]	; (8007694 <_puts_r+0xb4>)
 800763e:	429c      	cmp	r4, r3
 8007640:	bf08      	it	eq
 8007642:	68ec      	ldreq	r4, [r5, #12]
 8007644:	e7de      	b.n	8007604 <_puts_r+0x24>
 8007646:	4621      	mov	r1, r4
 8007648:	4628      	mov	r0, r5
 800764a:	f000 f87f 	bl	800774c <__swsetup_r>
 800764e:	2800      	cmp	r0, #0
 8007650:	d0dd      	beq.n	800760e <_puts_r+0x2e>
 8007652:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007656:	bd70      	pop	{r4, r5, r6, pc}
 8007658:	2b00      	cmp	r3, #0
 800765a:	da04      	bge.n	8007666 <_puts_r+0x86>
 800765c:	69a2      	ldr	r2, [r4, #24]
 800765e:	429a      	cmp	r2, r3
 8007660:	dc06      	bgt.n	8007670 <_puts_r+0x90>
 8007662:	290a      	cmp	r1, #10
 8007664:	d004      	beq.n	8007670 <_puts_r+0x90>
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	1c5a      	adds	r2, r3, #1
 800766a:	6022      	str	r2, [r4, #0]
 800766c:	7019      	strb	r1, [r3, #0]
 800766e:	e7cf      	b.n	8007610 <_puts_r+0x30>
 8007670:	4622      	mov	r2, r4
 8007672:	4628      	mov	r0, r5
 8007674:	f000 f818 	bl	80076a8 <__swbuf_r>
 8007678:	3001      	adds	r0, #1
 800767a:	d1c9      	bne.n	8007610 <_puts_r+0x30>
 800767c:	e7e9      	b.n	8007652 <_puts_r+0x72>
 800767e:	200a      	movs	r0, #10
 8007680:	6823      	ldr	r3, [r4, #0]
 8007682:	1c5a      	adds	r2, r3, #1
 8007684:	6022      	str	r2, [r4, #0]
 8007686:	7018      	strb	r0, [r3, #0]
 8007688:	e7e5      	b.n	8007656 <_puts_r+0x76>
 800768a:	bf00      	nop
 800768c:	08008688 	.word	0x08008688
 8007690:	080086a8 	.word	0x080086a8
 8007694:	08008668 	.word	0x08008668

08007698 <puts>:
 8007698:	4b02      	ldr	r3, [pc, #8]	; (80076a4 <puts+0xc>)
 800769a:	4601      	mov	r1, r0
 800769c:	6818      	ldr	r0, [r3, #0]
 800769e:	f7ff bf9f 	b.w	80075e0 <_puts_r>
 80076a2:	bf00      	nop
 80076a4:	20000010 	.word	0x20000010

080076a8 <__swbuf_r>:
 80076a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076aa:	460e      	mov	r6, r1
 80076ac:	4614      	mov	r4, r2
 80076ae:	4605      	mov	r5, r0
 80076b0:	b118      	cbz	r0, 80076ba <__swbuf_r+0x12>
 80076b2:	6983      	ldr	r3, [r0, #24]
 80076b4:	b90b      	cbnz	r3, 80076ba <__swbuf_r+0x12>
 80076b6:	f000 f9a7 	bl	8007a08 <__sinit>
 80076ba:	4b21      	ldr	r3, [pc, #132]	; (8007740 <__swbuf_r+0x98>)
 80076bc:	429c      	cmp	r4, r3
 80076be:	d12a      	bne.n	8007716 <__swbuf_r+0x6e>
 80076c0:	686c      	ldr	r4, [r5, #4]
 80076c2:	69a3      	ldr	r3, [r4, #24]
 80076c4:	60a3      	str	r3, [r4, #8]
 80076c6:	89a3      	ldrh	r3, [r4, #12]
 80076c8:	071a      	lsls	r2, r3, #28
 80076ca:	d52e      	bpl.n	800772a <__swbuf_r+0x82>
 80076cc:	6923      	ldr	r3, [r4, #16]
 80076ce:	b363      	cbz	r3, 800772a <__swbuf_r+0x82>
 80076d0:	6923      	ldr	r3, [r4, #16]
 80076d2:	6820      	ldr	r0, [r4, #0]
 80076d4:	b2f6      	uxtb	r6, r6
 80076d6:	1ac0      	subs	r0, r0, r3
 80076d8:	6963      	ldr	r3, [r4, #20]
 80076da:	4637      	mov	r7, r6
 80076dc:	4283      	cmp	r3, r0
 80076de:	dc04      	bgt.n	80076ea <__swbuf_r+0x42>
 80076e0:	4621      	mov	r1, r4
 80076e2:	4628      	mov	r0, r5
 80076e4:	f000 f926 	bl	8007934 <_fflush_r>
 80076e8:	bb28      	cbnz	r0, 8007736 <__swbuf_r+0x8e>
 80076ea:	68a3      	ldr	r3, [r4, #8]
 80076ec:	3001      	adds	r0, #1
 80076ee:	3b01      	subs	r3, #1
 80076f0:	60a3      	str	r3, [r4, #8]
 80076f2:	6823      	ldr	r3, [r4, #0]
 80076f4:	1c5a      	adds	r2, r3, #1
 80076f6:	6022      	str	r2, [r4, #0]
 80076f8:	701e      	strb	r6, [r3, #0]
 80076fa:	6963      	ldr	r3, [r4, #20]
 80076fc:	4283      	cmp	r3, r0
 80076fe:	d004      	beq.n	800770a <__swbuf_r+0x62>
 8007700:	89a3      	ldrh	r3, [r4, #12]
 8007702:	07db      	lsls	r3, r3, #31
 8007704:	d519      	bpl.n	800773a <__swbuf_r+0x92>
 8007706:	2e0a      	cmp	r6, #10
 8007708:	d117      	bne.n	800773a <__swbuf_r+0x92>
 800770a:	4621      	mov	r1, r4
 800770c:	4628      	mov	r0, r5
 800770e:	f000 f911 	bl	8007934 <_fflush_r>
 8007712:	b190      	cbz	r0, 800773a <__swbuf_r+0x92>
 8007714:	e00f      	b.n	8007736 <__swbuf_r+0x8e>
 8007716:	4b0b      	ldr	r3, [pc, #44]	; (8007744 <__swbuf_r+0x9c>)
 8007718:	429c      	cmp	r4, r3
 800771a:	d101      	bne.n	8007720 <__swbuf_r+0x78>
 800771c:	68ac      	ldr	r4, [r5, #8]
 800771e:	e7d0      	b.n	80076c2 <__swbuf_r+0x1a>
 8007720:	4b09      	ldr	r3, [pc, #36]	; (8007748 <__swbuf_r+0xa0>)
 8007722:	429c      	cmp	r4, r3
 8007724:	bf08      	it	eq
 8007726:	68ec      	ldreq	r4, [r5, #12]
 8007728:	e7cb      	b.n	80076c2 <__swbuf_r+0x1a>
 800772a:	4621      	mov	r1, r4
 800772c:	4628      	mov	r0, r5
 800772e:	f000 f80d 	bl	800774c <__swsetup_r>
 8007732:	2800      	cmp	r0, #0
 8007734:	d0cc      	beq.n	80076d0 <__swbuf_r+0x28>
 8007736:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800773a:	4638      	mov	r0, r7
 800773c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800773e:	bf00      	nop
 8007740:	08008688 	.word	0x08008688
 8007744:	080086a8 	.word	0x080086a8
 8007748:	08008668 	.word	0x08008668

0800774c <__swsetup_r>:
 800774c:	4b32      	ldr	r3, [pc, #200]	; (8007818 <__swsetup_r+0xcc>)
 800774e:	b570      	push	{r4, r5, r6, lr}
 8007750:	681d      	ldr	r5, [r3, #0]
 8007752:	4606      	mov	r6, r0
 8007754:	460c      	mov	r4, r1
 8007756:	b125      	cbz	r5, 8007762 <__swsetup_r+0x16>
 8007758:	69ab      	ldr	r3, [r5, #24]
 800775a:	b913      	cbnz	r3, 8007762 <__swsetup_r+0x16>
 800775c:	4628      	mov	r0, r5
 800775e:	f000 f953 	bl	8007a08 <__sinit>
 8007762:	4b2e      	ldr	r3, [pc, #184]	; (800781c <__swsetup_r+0xd0>)
 8007764:	429c      	cmp	r4, r3
 8007766:	d10f      	bne.n	8007788 <__swsetup_r+0x3c>
 8007768:	686c      	ldr	r4, [r5, #4]
 800776a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800776e:	b29a      	uxth	r2, r3
 8007770:	0715      	lsls	r5, r2, #28
 8007772:	d42c      	bmi.n	80077ce <__swsetup_r+0x82>
 8007774:	06d0      	lsls	r0, r2, #27
 8007776:	d411      	bmi.n	800779c <__swsetup_r+0x50>
 8007778:	2209      	movs	r2, #9
 800777a:	6032      	str	r2, [r6, #0]
 800777c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007780:	81a3      	strh	r3, [r4, #12]
 8007782:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007786:	e03e      	b.n	8007806 <__swsetup_r+0xba>
 8007788:	4b25      	ldr	r3, [pc, #148]	; (8007820 <__swsetup_r+0xd4>)
 800778a:	429c      	cmp	r4, r3
 800778c:	d101      	bne.n	8007792 <__swsetup_r+0x46>
 800778e:	68ac      	ldr	r4, [r5, #8]
 8007790:	e7eb      	b.n	800776a <__swsetup_r+0x1e>
 8007792:	4b24      	ldr	r3, [pc, #144]	; (8007824 <__swsetup_r+0xd8>)
 8007794:	429c      	cmp	r4, r3
 8007796:	bf08      	it	eq
 8007798:	68ec      	ldreq	r4, [r5, #12]
 800779a:	e7e6      	b.n	800776a <__swsetup_r+0x1e>
 800779c:	0751      	lsls	r1, r2, #29
 800779e:	d512      	bpl.n	80077c6 <__swsetup_r+0x7a>
 80077a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077a2:	b141      	cbz	r1, 80077b6 <__swsetup_r+0x6a>
 80077a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077a8:	4299      	cmp	r1, r3
 80077aa:	d002      	beq.n	80077b2 <__swsetup_r+0x66>
 80077ac:	4630      	mov	r0, r6
 80077ae:	f000 fa19 	bl	8007be4 <_free_r>
 80077b2:	2300      	movs	r3, #0
 80077b4:	6363      	str	r3, [r4, #52]	; 0x34
 80077b6:	89a3      	ldrh	r3, [r4, #12]
 80077b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80077bc:	81a3      	strh	r3, [r4, #12]
 80077be:	2300      	movs	r3, #0
 80077c0:	6063      	str	r3, [r4, #4]
 80077c2:	6923      	ldr	r3, [r4, #16]
 80077c4:	6023      	str	r3, [r4, #0]
 80077c6:	89a3      	ldrh	r3, [r4, #12]
 80077c8:	f043 0308 	orr.w	r3, r3, #8
 80077cc:	81a3      	strh	r3, [r4, #12]
 80077ce:	6923      	ldr	r3, [r4, #16]
 80077d0:	b94b      	cbnz	r3, 80077e6 <__swsetup_r+0x9a>
 80077d2:	89a3      	ldrh	r3, [r4, #12]
 80077d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80077d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077dc:	d003      	beq.n	80077e6 <__swsetup_r+0x9a>
 80077de:	4621      	mov	r1, r4
 80077e0:	4630      	mov	r0, r6
 80077e2:	f000 f9bf 	bl	8007b64 <__smakebuf_r>
 80077e6:	89a2      	ldrh	r2, [r4, #12]
 80077e8:	f012 0301 	ands.w	r3, r2, #1
 80077ec:	d00c      	beq.n	8007808 <__swsetup_r+0xbc>
 80077ee:	2300      	movs	r3, #0
 80077f0:	60a3      	str	r3, [r4, #8]
 80077f2:	6963      	ldr	r3, [r4, #20]
 80077f4:	425b      	negs	r3, r3
 80077f6:	61a3      	str	r3, [r4, #24]
 80077f8:	6923      	ldr	r3, [r4, #16]
 80077fa:	b953      	cbnz	r3, 8007812 <__swsetup_r+0xc6>
 80077fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007800:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007804:	d1ba      	bne.n	800777c <__swsetup_r+0x30>
 8007806:	bd70      	pop	{r4, r5, r6, pc}
 8007808:	0792      	lsls	r2, r2, #30
 800780a:	bf58      	it	pl
 800780c:	6963      	ldrpl	r3, [r4, #20]
 800780e:	60a3      	str	r3, [r4, #8]
 8007810:	e7f2      	b.n	80077f8 <__swsetup_r+0xac>
 8007812:	2000      	movs	r0, #0
 8007814:	e7f7      	b.n	8007806 <__swsetup_r+0xba>
 8007816:	bf00      	nop
 8007818:	20000010 	.word	0x20000010
 800781c:	08008688 	.word	0x08008688
 8007820:	080086a8 	.word	0x080086a8
 8007824:	08008668 	.word	0x08008668

08007828 <__sflush_r>:
 8007828:	898a      	ldrh	r2, [r1, #12]
 800782a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800782e:	4605      	mov	r5, r0
 8007830:	0710      	lsls	r0, r2, #28
 8007832:	460c      	mov	r4, r1
 8007834:	d458      	bmi.n	80078e8 <__sflush_r+0xc0>
 8007836:	684b      	ldr	r3, [r1, #4]
 8007838:	2b00      	cmp	r3, #0
 800783a:	dc05      	bgt.n	8007848 <__sflush_r+0x20>
 800783c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800783e:	2b00      	cmp	r3, #0
 8007840:	dc02      	bgt.n	8007848 <__sflush_r+0x20>
 8007842:	2000      	movs	r0, #0
 8007844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800784a:	2e00      	cmp	r6, #0
 800784c:	d0f9      	beq.n	8007842 <__sflush_r+0x1a>
 800784e:	2300      	movs	r3, #0
 8007850:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007854:	682f      	ldr	r7, [r5, #0]
 8007856:	6a21      	ldr	r1, [r4, #32]
 8007858:	602b      	str	r3, [r5, #0]
 800785a:	d032      	beq.n	80078c2 <__sflush_r+0x9a>
 800785c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800785e:	89a3      	ldrh	r3, [r4, #12]
 8007860:	075a      	lsls	r2, r3, #29
 8007862:	d505      	bpl.n	8007870 <__sflush_r+0x48>
 8007864:	6863      	ldr	r3, [r4, #4]
 8007866:	1ac0      	subs	r0, r0, r3
 8007868:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800786a:	b10b      	cbz	r3, 8007870 <__sflush_r+0x48>
 800786c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800786e:	1ac0      	subs	r0, r0, r3
 8007870:	2300      	movs	r3, #0
 8007872:	4602      	mov	r2, r0
 8007874:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007876:	6a21      	ldr	r1, [r4, #32]
 8007878:	4628      	mov	r0, r5
 800787a:	47b0      	blx	r6
 800787c:	1c43      	adds	r3, r0, #1
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	d106      	bne.n	8007890 <__sflush_r+0x68>
 8007882:	6829      	ldr	r1, [r5, #0]
 8007884:	291d      	cmp	r1, #29
 8007886:	d848      	bhi.n	800791a <__sflush_r+0xf2>
 8007888:	4a29      	ldr	r2, [pc, #164]	; (8007930 <__sflush_r+0x108>)
 800788a:	40ca      	lsrs	r2, r1
 800788c:	07d6      	lsls	r6, r2, #31
 800788e:	d544      	bpl.n	800791a <__sflush_r+0xf2>
 8007890:	2200      	movs	r2, #0
 8007892:	6062      	str	r2, [r4, #4]
 8007894:	6922      	ldr	r2, [r4, #16]
 8007896:	04d9      	lsls	r1, r3, #19
 8007898:	6022      	str	r2, [r4, #0]
 800789a:	d504      	bpl.n	80078a6 <__sflush_r+0x7e>
 800789c:	1c42      	adds	r2, r0, #1
 800789e:	d101      	bne.n	80078a4 <__sflush_r+0x7c>
 80078a0:	682b      	ldr	r3, [r5, #0]
 80078a2:	b903      	cbnz	r3, 80078a6 <__sflush_r+0x7e>
 80078a4:	6560      	str	r0, [r4, #84]	; 0x54
 80078a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078a8:	602f      	str	r7, [r5, #0]
 80078aa:	2900      	cmp	r1, #0
 80078ac:	d0c9      	beq.n	8007842 <__sflush_r+0x1a>
 80078ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078b2:	4299      	cmp	r1, r3
 80078b4:	d002      	beq.n	80078bc <__sflush_r+0x94>
 80078b6:	4628      	mov	r0, r5
 80078b8:	f000 f994 	bl	8007be4 <_free_r>
 80078bc:	2000      	movs	r0, #0
 80078be:	6360      	str	r0, [r4, #52]	; 0x34
 80078c0:	e7c0      	b.n	8007844 <__sflush_r+0x1c>
 80078c2:	2301      	movs	r3, #1
 80078c4:	4628      	mov	r0, r5
 80078c6:	47b0      	blx	r6
 80078c8:	1c41      	adds	r1, r0, #1
 80078ca:	d1c8      	bne.n	800785e <__sflush_r+0x36>
 80078cc:	682b      	ldr	r3, [r5, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d0c5      	beq.n	800785e <__sflush_r+0x36>
 80078d2:	2b1d      	cmp	r3, #29
 80078d4:	d001      	beq.n	80078da <__sflush_r+0xb2>
 80078d6:	2b16      	cmp	r3, #22
 80078d8:	d101      	bne.n	80078de <__sflush_r+0xb6>
 80078da:	602f      	str	r7, [r5, #0]
 80078dc:	e7b1      	b.n	8007842 <__sflush_r+0x1a>
 80078de:	89a3      	ldrh	r3, [r4, #12]
 80078e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078e4:	81a3      	strh	r3, [r4, #12]
 80078e6:	e7ad      	b.n	8007844 <__sflush_r+0x1c>
 80078e8:	690f      	ldr	r7, [r1, #16]
 80078ea:	2f00      	cmp	r7, #0
 80078ec:	d0a9      	beq.n	8007842 <__sflush_r+0x1a>
 80078ee:	0793      	lsls	r3, r2, #30
 80078f0:	bf18      	it	ne
 80078f2:	2300      	movne	r3, #0
 80078f4:	680e      	ldr	r6, [r1, #0]
 80078f6:	bf08      	it	eq
 80078f8:	694b      	ldreq	r3, [r1, #20]
 80078fa:	eba6 0807 	sub.w	r8, r6, r7
 80078fe:	600f      	str	r7, [r1, #0]
 8007900:	608b      	str	r3, [r1, #8]
 8007902:	f1b8 0f00 	cmp.w	r8, #0
 8007906:	dd9c      	ble.n	8007842 <__sflush_r+0x1a>
 8007908:	4643      	mov	r3, r8
 800790a:	463a      	mov	r2, r7
 800790c:	6a21      	ldr	r1, [r4, #32]
 800790e:	4628      	mov	r0, r5
 8007910:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007912:	47b0      	blx	r6
 8007914:	2800      	cmp	r0, #0
 8007916:	dc06      	bgt.n	8007926 <__sflush_r+0xfe>
 8007918:	89a3      	ldrh	r3, [r4, #12]
 800791a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800791e:	81a3      	strh	r3, [r4, #12]
 8007920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007924:	e78e      	b.n	8007844 <__sflush_r+0x1c>
 8007926:	4407      	add	r7, r0
 8007928:	eba8 0800 	sub.w	r8, r8, r0
 800792c:	e7e9      	b.n	8007902 <__sflush_r+0xda>
 800792e:	bf00      	nop
 8007930:	20400001 	.word	0x20400001

08007934 <_fflush_r>:
 8007934:	b538      	push	{r3, r4, r5, lr}
 8007936:	690b      	ldr	r3, [r1, #16]
 8007938:	4605      	mov	r5, r0
 800793a:	460c      	mov	r4, r1
 800793c:	b1db      	cbz	r3, 8007976 <_fflush_r+0x42>
 800793e:	b118      	cbz	r0, 8007948 <_fflush_r+0x14>
 8007940:	6983      	ldr	r3, [r0, #24]
 8007942:	b90b      	cbnz	r3, 8007948 <_fflush_r+0x14>
 8007944:	f000 f860 	bl	8007a08 <__sinit>
 8007948:	4b0c      	ldr	r3, [pc, #48]	; (800797c <_fflush_r+0x48>)
 800794a:	429c      	cmp	r4, r3
 800794c:	d109      	bne.n	8007962 <_fflush_r+0x2e>
 800794e:	686c      	ldr	r4, [r5, #4]
 8007950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007954:	b17b      	cbz	r3, 8007976 <_fflush_r+0x42>
 8007956:	4621      	mov	r1, r4
 8007958:	4628      	mov	r0, r5
 800795a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800795e:	f7ff bf63 	b.w	8007828 <__sflush_r>
 8007962:	4b07      	ldr	r3, [pc, #28]	; (8007980 <_fflush_r+0x4c>)
 8007964:	429c      	cmp	r4, r3
 8007966:	d101      	bne.n	800796c <_fflush_r+0x38>
 8007968:	68ac      	ldr	r4, [r5, #8]
 800796a:	e7f1      	b.n	8007950 <_fflush_r+0x1c>
 800796c:	4b05      	ldr	r3, [pc, #20]	; (8007984 <_fflush_r+0x50>)
 800796e:	429c      	cmp	r4, r3
 8007970:	bf08      	it	eq
 8007972:	68ec      	ldreq	r4, [r5, #12]
 8007974:	e7ec      	b.n	8007950 <_fflush_r+0x1c>
 8007976:	2000      	movs	r0, #0
 8007978:	bd38      	pop	{r3, r4, r5, pc}
 800797a:	bf00      	nop
 800797c:	08008688 	.word	0x08008688
 8007980:	080086a8 	.word	0x080086a8
 8007984:	08008668 	.word	0x08008668

08007988 <std>:
 8007988:	2300      	movs	r3, #0
 800798a:	b510      	push	{r4, lr}
 800798c:	4604      	mov	r4, r0
 800798e:	e9c0 3300 	strd	r3, r3, [r0]
 8007992:	6083      	str	r3, [r0, #8]
 8007994:	8181      	strh	r1, [r0, #12]
 8007996:	6643      	str	r3, [r0, #100]	; 0x64
 8007998:	81c2      	strh	r2, [r0, #14]
 800799a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800799e:	6183      	str	r3, [r0, #24]
 80079a0:	4619      	mov	r1, r3
 80079a2:	2208      	movs	r2, #8
 80079a4:	305c      	adds	r0, #92	; 0x5c
 80079a6:	f7ff fde6 	bl	8007576 <memset>
 80079aa:	4b05      	ldr	r3, [pc, #20]	; (80079c0 <std+0x38>)
 80079ac:	6224      	str	r4, [r4, #32]
 80079ae:	6263      	str	r3, [r4, #36]	; 0x24
 80079b0:	4b04      	ldr	r3, [pc, #16]	; (80079c4 <std+0x3c>)
 80079b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80079b4:	4b04      	ldr	r3, [pc, #16]	; (80079c8 <std+0x40>)
 80079b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079b8:	4b04      	ldr	r3, [pc, #16]	; (80079cc <std+0x44>)
 80079ba:	6323      	str	r3, [r4, #48]	; 0x30
 80079bc:	bd10      	pop	{r4, pc}
 80079be:	bf00      	nop
 80079c0:	08008349 	.word	0x08008349
 80079c4:	0800836b 	.word	0x0800836b
 80079c8:	080083a3 	.word	0x080083a3
 80079cc:	080083c7 	.word	0x080083c7

080079d0 <_cleanup_r>:
 80079d0:	4901      	ldr	r1, [pc, #4]	; (80079d8 <_cleanup_r+0x8>)
 80079d2:	f000 b885 	b.w	8007ae0 <_fwalk_reent>
 80079d6:	bf00      	nop
 80079d8:	08007935 	.word	0x08007935

080079dc <__sfmoreglue>:
 80079dc:	b570      	push	{r4, r5, r6, lr}
 80079de:	2568      	movs	r5, #104	; 0x68
 80079e0:	1e4a      	subs	r2, r1, #1
 80079e2:	4355      	muls	r5, r2
 80079e4:	460e      	mov	r6, r1
 80079e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80079ea:	f000 f947 	bl	8007c7c <_malloc_r>
 80079ee:	4604      	mov	r4, r0
 80079f0:	b140      	cbz	r0, 8007a04 <__sfmoreglue+0x28>
 80079f2:	2100      	movs	r1, #0
 80079f4:	e9c0 1600 	strd	r1, r6, [r0]
 80079f8:	300c      	adds	r0, #12
 80079fa:	60a0      	str	r0, [r4, #8]
 80079fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a00:	f7ff fdb9 	bl	8007576 <memset>
 8007a04:	4620      	mov	r0, r4
 8007a06:	bd70      	pop	{r4, r5, r6, pc}

08007a08 <__sinit>:
 8007a08:	6983      	ldr	r3, [r0, #24]
 8007a0a:	b510      	push	{r4, lr}
 8007a0c:	4604      	mov	r4, r0
 8007a0e:	bb33      	cbnz	r3, 8007a5e <__sinit+0x56>
 8007a10:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007a14:	6503      	str	r3, [r0, #80]	; 0x50
 8007a16:	4b12      	ldr	r3, [pc, #72]	; (8007a60 <__sinit+0x58>)
 8007a18:	4a12      	ldr	r2, [pc, #72]	; (8007a64 <__sinit+0x5c>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6282      	str	r2, [r0, #40]	; 0x28
 8007a1e:	4298      	cmp	r0, r3
 8007a20:	bf04      	itt	eq
 8007a22:	2301      	moveq	r3, #1
 8007a24:	6183      	streq	r3, [r0, #24]
 8007a26:	f000 f81f 	bl	8007a68 <__sfp>
 8007a2a:	6060      	str	r0, [r4, #4]
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f000 f81b 	bl	8007a68 <__sfp>
 8007a32:	60a0      	str	r0, [r4, #8]
 8007a34:	4620      	mov	r0, r4
 8007a36:	f000 f817 	bl	8007a68 <__sfp>
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	60e0      	str	r0, [r4, #12]
 8007a3e:	2104      	movs	r1, #4
 8007a40:	6860      	ldr	r0, [r4, #4]
 8007a42:	f7ff ffa1 	bl	8007988 <std>
 8007a46:	2201      	movs	r2, #1
 8007a48:	2109      	movs	r1, #9
 8007a4a:	68a0      	ldr	r0, [r4, #8]
 8007a4c:	f7ff ff9c 	bl	8007988 <std>
 8007a50:	2202      	movs	r2, #2
 8007a52:	2112      	movs	r1, #18
 8007a54:	68e0      	ldr	r0, [r4, #12]
 8007a56:	f7ff ff97 	bl	8007988 <std>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	61a3      	str	r3, [r4, #24]
 8007a5e:	bd10      	pop	{r4, pc}
 8007a60:	08008664 	.word	0x08008664
 8007a64:	080079d1 	.word	0x080079d1

08007a68 <__sfp>:
 8007a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6a:	4b1b      	ldr	r3, [pc, #108]	; (8007ad8 <__sfp+0x70>)
 8007a6c:	4607      	mov	r7, r0
 8007a6e:	681e      	ldr	r6, [r3, #0]
 8007a70:	69b3      	ldr	r3, [r6, #24]
 8007a72:	b913      	cbnz	r3, 8007a7a <__sfp+0x12>
 8007a74:	4630      	mov	r0, r6
 8007a76:	f7ff ffc7 	bl	8007a08 <__sinit>
 8007a7a:	3648      	adds	r6, #72	; 0x48
 8007a7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a80:	3b01      	subs	r3, #1
 8007a82:	d503      	bpl.n	8007a8c <__sfp+0x24>
 8007a84:	6833      	ldr	r3, [r6, #0]
 8007a86:	b133      	cbz	r3, 8007a96 <__sfp+0x2e>
 8007a88:	6836      	ldr	r6, [r6, #0]
 8007a8a:	e7f7      	b.n	8007a7c <__sfp+0x14>
 8007a8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a90:	b16d      	cbz	r5, 8007aae <__sfp+0x46>
 8007a92:	3468      	adds	r4, #104	; 0x68
 8007a94:	e7f4      	b.n	8007a80 <__sfp+0x18>
 8007a96:	2104      	movs	r1, #4
 8007a98:	4638      	mov	r0, r7
 8007a9a:	f7ff ff9f 	bl	80079dc <__sfmoreglue>
 8007a9e:	6030      	str	r0, [r6, #0]
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	d1f1      	bne.n	8007a88 <__sfp+0x20>
 8007aa4:	230c      	movs	r3, #12
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	603b      	str	r3, [r7, #0]
 8007aaa:	4620      	mov	r0, r4
 8007aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007aae:	4b0b      	ldr	r3, [pc, #44]	; (8007adc <__sfp+0x74>)
 8007ab0:	6665      	str	r5, [r4, #100]	; 0x64
 8007ab2:	e9c4 5500 	strd	r5, r5, [r4]
 8007ab6:	60a5      	str	r5, [r4, #8]
 8007ab8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007abc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007ac0:	2208      	movs	r2, #8
 8007ac2:	4629      	mov	r1, r5
 8007ac4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ac8:	f7ff fd55 	bl	8007576 <memset>
 8007acc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ad0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ad4:	e7e9      	b.n	8007aaa <__sfp+0x42>
 8007ad6:	bf00      	nop
 8007ad8:	08008664 	.word	0x08008664
 8007adc:	ffff0001 	.word	0xffff0001

08007ae0 <_fwalk_reent>:
 8007ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ae4:	4680      	mov	r8, r0
 8007ae6:	4689      	mov	r9, r1
 8007ae8:	2600      	movs	r6, #0
 8007aea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007aee:	b914      	cbnz	r4, 8007af6 <_fwalk_reent+0x16>
 8007af0:	4630      	mov	r0, r6
 8007af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007af6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007afa:	3f01      	subs	r7, #1
 8007afc:	d501      	bpl.n	8007b02 <_fwalk_reent+0x22>
 8007afe:	6824      	ldr	r4, [r4, #0]
 8007b00:	e7f5      	b.n	8007aee <_fwalk_reent+0xe>
 8007b02:	89ab      	ldrh	r3, [r5, #12]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d907      	bls.n	8007b18 <_fwalk_reent+0x38>
 8007b08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	d003      	beq.n	8007b18 <_fwalk_reent+0x38>
 8007b10:	4629      	mov	r1, r5
 8007b12:	4640      	mov	r0, r8
 8007b14:	47c8      	blx	r9
 8007b16:	4306      	orrs	r6, r0
 8007b18:	3568      	adds	r5, #104	; 0x68
 8007b1a:	e7ee      	b.n	8007afa <_fwalk_reent+0x1a>

08007b1c <__swhatbuf_r>:
 8007b1c:	b570      	push	{r4, r5, r6, lr}
 8007b1e:	460e      	mov	r6, r1
 8007b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b24:	b096      	sub	sp, #88	; 0x58
 8007b26:	2900      	cmp	r1, #0
 8007b28:	4614      	mov	r4, r2
 8007b2a:	461d      	mov	r5, r3
 8007b2c:	da07      	bge.n	8007b3e <__swhatbuf_r+0x22>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	602b      	str	r3, [r5, #0]
 8007b32:	89b3      	ldrh	r3, [r6, #12]
 8007b34:	061a      	lsls	r2, r3, #24
 8007b36:	d410      	bmi.n	8007b5a <__swhatbuf_r+0x3e>
 8007b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b3c:	e00e      	b.n	8007b5c <__swhatbuf_r+0x40>
 8007b3e:	466a      	mov	r2, sp
 8007b40:	f000 fc68 	bl	8008414 <_fstat_r>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	dbf2      	blt.n	8007b2e <__swhatbuf_r+0x12>
 8007b48:	9a01      	ldr	r2, [sp, #4]
 8007b4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b52:	425a      	negs	r2, r3
 8007b54:	415a      	adcs	r2, r3
 8007b56:	602a      	str	r2, [r5, #0]
 8007b58:	e7ee      	b.n	8007b38 <__swhatbuf_r+0x1c>
 8007b5a:	2340      	movs	r3, #64	; 0x40
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	6023      	str	r3, [r4, #0]
 8007b60:	b016      	add	sp, #88	; 0x58
 8007b62:	bd70      	pop	{r4, r5, r6, pc}

08007b64 <__smakebuf_r>:
 8007b64:	898b      	ldrh	r3, [r1, #12]
 8007b66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b68:	079d      	lsls	r5, r3, #30
 8007b6a:	4606      	mov	r6, r0
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	d507      	bpl.n	8007b80 <__smakebuf_r+0x1c>
 8007b70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b74:	6023      	str	r3, [r4, #0]
 8007b76:	6123      	str	r3, [r4, #16]
 8007b78:	2301      	movs	r3, #1
 8007b7a:	6163      	str	r3, [r4, #20]
 8007b7c:	b002      	add	sp, #8
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}
 8007b80:	ab01      	add	r3, sp, #4
 8007b82:	466a      	mov	r2, sp
 8007b84:	f7ff ffca 	bl	8007b1c <__swhatbuf_r>
 8007b88:	9900      	ldr	r1, [sp, #0]
 8007b8a:	4605      	mov	r5, r0
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	f000 f875 	bl	8007c7c <_malloc_r>
 8007b92:	b948      	cbnz	r0, 8007ba8 <__smakebuf_r+0x44>
 8007b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b98:	059a      	lsls	r2, r3, #22
 8007b9a:	d4ef      	bmi.n	8007b7c <__smakebuf_r+0x18>
 8007b9c:	f023 0303 	bic.w	r3, r3, #3
 8007ba0:	f043 0302 	orr.w	r3, r3, #2
 8007ba4:	81a3      	strh	r3, [r4, #12]
 8007ba6:	e7e3      	b.n	8007b70 <__smakebuf_r+0xc>
 8007ba8:	4b0d      	ldr	r3, [pc, #52]	; (8007be0 <__smakebuf_r+0x7c>)
 8007baa:	62b3      	str	r3, [r6, #40]	; 0x28
 8007bac:	89a3      	ldrh	r3, [r4, #12]
 8007bae:	6020      	str	r0, [r4, #0]
 8007bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bb4:	81a3      	strh	r3, [r4, #12]
 8007bb6:	9b00      	ldr	r3, [sp, #0]
 8007bb8:	6120      	str	r0, [r4, #16]
 8007bba:	6163      	str	r3, [r4, #20]
 8007bbc:	9b01      	ldr	r3, [sp, #4]
 8007bbe:	b15b      	cbz	r3, 8007bd8 <__smakebuf_r+0x74>
 8007bc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	f000 fc37 	bl	8008438 <_isatty_r>
 8007bca:	b128      	cbz	r0, 8007bd8 <__smakebuf_r+0x74>
 8007bcc:	89a3      	ldrh	r3, [r4, #12]
 8007bce:	f023 0303 	bic.w	r3, r3, #3
 8007bd2:	f043 0301 	orr.w	r3, r3, #1
 8007bd6:	81a3      	strh	r3, [r4, #12]
 8007bd8:	89a3      	ldrh	r3, [r4, #12]
 8007bda:	431d      	orrs	r5, r3
 8007bdc:	81a5      	strh	r5, [r4, #12]
 8007bde:	e7cd      	b.n	8007b7c <__smakebuf_r+0x18>
 8007be0:	080079d1 	.word	0x080079d1

08007be4 <_free_r>:
 8007be4:	b538      	push	{r3, r4, r5, lr}
 8007be6:	4605      	mov	r5, r0
 8007be8:	2900      	cmp	r1, #0
 8007bea:	d043      	beq.n	8007c74 <_free_r+0x90>
 8007bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bf0:	1f0c      	subs	r4, r1, #4
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	bfb8      	it	lt
 8007bf6:	18e4      	addlt	r4, r4, r3
 8007bf8:	f000 fc4e 	bl	8008498 <__malloc_lock>
 8007bfc:	4a1e      	ldr	r2, [pc, #120]	; (8007c78 <_free_r+0x94>)
 8007bfe:	6813      	ldr	r3, [r2, #0]
 8007c00:	4610      	mov	r0, r2
 8007c02:	b933      	cbnz	r3, 8007c12 <_free_r+0x2e>
 8007c04:	6063      	str	r3, [r4, #4]
 8007c06:	6014      	str	r4, [r2, #0]
 8007c08:	4628      	mov	r0, r5
 8007c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c0e:	f000 bc44 	b.w	800849a <__malloc_unlock>
 8007c12:	42a3      	cmp	r3, r4
 8007c14:	d90b      	bls.n	8007c2e <_free_r+0x4a>
 8007c16:	6821      	ldr	r1, [r4, #0]
 8007c18:	1862      	adds	r2, r4, r1
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	bf01      	itttt	eq
 8007c1e:	681a      	ldreq	r2, [r3, #0]
 8007c20:	685b      	ldreq	r3, [r3, #4]
 8007c22:	1852      	addeq	r2, r2, r1
 8007c24:	6022      	streq	r2, [r4, #0]
 8007c26:	6063      	str	r3, [r4, #4]
 8007c28:	6004      	str	r4, [r0, #0]
 8007c2a:	e7ed      	b.n	8007c08 <_free_r+0x24>
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	b10a      	cbz	r2, 8007c36 <_free_r+0x52>
 8007c32:	42a2      	cmp	r2, r4
 8007c34:	d9fa      	bls.n	8007c2c <_free_r+0x48>
 8007c36:	6819      	ldr	r1, [r3, #0]
 8007c38:	1858      	adds	r0, r3, r1
 8007c3a:	42a0      	cmp	r0, r4
 8007c3c:	d10b      	bne.n	8007c56 <_free_r+0x72>
 8007c3e:	6820      	ldr	r0, [r4, #0]
 8007c40:	4401      	add	r1, r0
 8007c42:	1858      	adds	r0, r3, r1
 8007c44:	4282      	cmp	r2, r0
 8007c46:	6019      	str	r1, [r3, #0]
 8007c48:	d1de      	bne.n	8007c08 <_free_r+0x24>
 8007c4a:	6810      	ldr	r0, [r2, #0]
 8007c4c:	6852      	ldr	r2, [r2, #4]
 8007c4e:	4401      	add	r1, r0
 8007c50:	6019      	str	r1, [r3, #0]
 8007c52:	605a      	str	r2, [r3, #4]
 8007c54:	e7d8      	b.n	8007c08 <_free_r+0x24>
 8007c56:	d902      	bls.n	8007c5e <_free_r+0x7a>
 8007c58:	230c      	movs	r3, #12
 8007c5a:	602b      	str	r3, [r5, #0]
 8007c5c:	e7d4      	b.n	8007c08 <_free_r+0x24>
 8007c5e:	6820      	ldr	r0, [r4, #0]
 8007c60:	1821      	adds	r1, r4, r0
 8007c62:	428a      	cmp	r2, r1
 8007c64:	bf01      	itttt	eq
 8007c66:	6811      	ldreq	r1, [r2, #0]
 8007c68:	6852      	ldreq	r2, [r2, #4]
 8007c6a:	1809      	addeq	r1, r1, r0
 8007c6c:	6021      	streq	r1, [r4, #0]
 8007c6e:	6062      	str	r2, [r4, #4]
 8007c70:	605c      	str	r4, [r3, #4]
 8007c72:	e7c9      	b.n	8007c08 <_free_r+0x24>
 8007c74:	bd38      	pop	{r3, r4, r5, pc}
 8007c76:	bf00      	nop
 8007c78:	200019a0 	.word	0x200019a0

08007c7c <_malloc_r>:
 8007c7c:	b570      	push	{r4, r5, r6, lr}
 8007c7e:	1ccd      	adds	r5, r1, #3
 8007c80:	f025 0503 	bic.w	r5, r5, #3
 8007c84:	3508      	adds	r5, #8
 8007c86:	2d0c      	cmp	r5, #12
 8007c88:	bf38      	it	cc
 8007c8a:	250c      	movcc	r5, #12
 8007c8c:	2d00      	cmp	r5, #0
 8007c8e:	4606      	mov	r6, r0
 8007c90:	db01      	blt.n	8007c96 <_malloc_r+0x1a>
 8007c92:	42a9      	cmp	r1, r5
 8007c94:	d903      	bls.n	8007c9e <_malloc_r+0x22>
 8007c96:	230c      	movs	r3, #12
 8007c98:	6033      	str	r3, [r6, #0]
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	bd70      	pop	{r4, r5, r6, pc}
 8007c9e:	f000 fbfb 	bl	8008498 <__malloc_lock>
 8007ca2:	4a21      	ldr	r2, [pc, #132]	; (8007d28 <_malloc_r+0xac>)
 8007ca4:	6814      	ldr	r4, [r2, #0]
 8007ca6:	4621      	mov	r1, r4
 8007ca8:	b991      	cbnz	r1, 8007cd0 <_malloc_r+0x54>
 8007caa:	4c20      	ldr	r4, [pc, #128]	; (8007d2c <_malloc_r+0xb0>)
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	b91b      	cbnz	r3, 8007cb8 <_malloc_r+0x3c>
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	f000 fb39 	bl	8008328 <_sbrk_r>
 8007cb6:	6020      	str	r0, [r4, #0]
 8007cb8:	4629      	mov	r1, r5
 8007cba:	4630      	mov	r0, r6
 8007cbc:	f000 fb34 	bl	8008328 <_sbrk_r>
 8007cc0:	1c43      	adds	r3, r0, #1
 8007cc2:	d124      	bne.n	8007d0e <_malloc_r+0x92>
 8007cc4:	230c      	movs	r3, #12
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	6033      	str	r3, [r6, #0]
 8007cca:	f000 fbe6 	bl	800849a <__malloc_unlock>
 8007cce:	e7e4      	b.n	8007c9a <_malloc_r+0x1e>
 8007cd0:	680b      	ldr	r3, [r1, #0]
 8007cd2:	1b5b      	subs	r3, r3, r5
 8007cd4:	d418      	bmi.n	8007d08 <_malloc_r+0x8c>
 8007cd6:	2b0b      	cmp	r3, #11
 8007cd8:	d90f      	bls.n	8007cfa <_malloc_r+0x7e>
 8007cda:	600b      	str	r3, [r1, #0]
 8007cdc:	18cc      	adds	r4, r1, r3
 8007cde:	50cd      	str	r5, [r1, r3]
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	f000 fbda 	bl	800849a <__malloc_unlock>
 8007ce6:	f104 000b 	add.w	r0, r4, #11
 8007cea:	1d23      	adds	r3, r4, #4
 8007cec:	f020 0007 	bic.w	r0, r0, #7
 8007cf0:	1ac3      	subs	r3, r0, r3
 8007cf2:	d0d3      	beq.n	8007c9c <_malloc_r+0x20>
 8007cf4:	425a      	negs	r2, r3
 8007cf6:	50e2      	str	r2, [r4, r3]
 8007cf8:	e7d0      	b.n	8007c9c <_malloc_r+0x20>
 8007cfa:	684b      	ldr	r3, [r1, #4]
 8007cfc:	428c      	cmp	r4, r1
 8007cfe:	bf16      	itet	ne
 8007d00:	6063      	strne	r3, [r4, #4]
 8007d02:	6013      	streq	r3, [r2, #0]
 8007d04:	460c      	movne	r4, r1
 8007d06:	e7eb      	b.n	8007ce0 <_malloc_r+0x64>
 8007d08:	460c      	mov	r4, r1
 8007d0a:	6849      	ldr	r1, [r1, #4]
 8007d0c:	e7cc      	b.n	8007ca8 <_malloc_r+0x2c>
 8007d0e:	1cc4      	adds	r4, r0, #3
 8007d10:	f024 0403 	bic.w	r4, r4, #3
 8007d14:	42a0      	cmp	r0, r4
 8007d16:	d005      	beq.n	8007d24 <_malloc_r+0xa8>
 8007d18:	1a21      	subs	r1, r4, r0
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	f000 fb04 	bl	8008328 <_sbrk_r>
 8007d20:	3001      	adds	r0, #1
 8007d22:	d0cf      	beq.n	8007cc4 <_malloc_r+0x48>
 8007d24:	6025      	str	r5, [r4, #0]
 8007d26:	e7db      	b.n	8007ce0 <_malloc_r+0x64>
 8007d28:	200019a0 	.word	0x200019a0
 8007d2c:	200019a4 	.word	0x200019a4

08007d30 <__sfputc_r>:
 8007d30:	6893      	ldr	r3, [r2, #8]
 8007d32:	b410      	push	{r4}
 8007d34:	3b01      	subs	r3, #1
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	6093      	str	r3, [r2, #8]
 8007d3a:	da07      	bge.n	8007d4c <__sfputc_r+0x1c>
 8007d3c:	6994      	ldr	r4, [r2, #24]
 8007d3e:	42a3      	cmp	r3, r4
 8007d40:	db01      	blt.n	8007d46 <__sfputc_r+0x16>
 8007d42:	290a      	cmp	r1, #10
 8007d44:	d102      	bne.n	8007d4c <__sfputc_r+0x1c>
 8007d46:	bc10      	pop	{r4}
 8007d48:	f7ff bcae 	b.w	80076a8 <__swbuf_r>
 8007d4c:	6813      	ldr	r3, [r2, #0]
 8007d4e:	1c58      	adds	r0, r3, #1
 8007d50:	6010      	str	r0, [r2, #0]
 8007d52:	7019      	strb	r1, [r3, #0]
 8007d54:	4608      	mov	r0, r1
 8007d56:	bc10      	pop	{r4}
 8007d58:	4770      	bx	lr

08007d5a <__sfputs_r>:
 8007d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5c:	4606      	mov	r6, r0
 8007d5e:	460f      	mov	r7, r1
 8007d60:	4614      	mov	r4, r2
 8007d62:	18d5      	adds	r5, r2, r3
 8007d64:	42ac      	cmp	r4, r5
 8007d66:	d101      	bne.n	8007d6c <__sfputs_r+0x12>
 8007d68:	2000      	movs	r0, #0
 8007d6a:	e007      	b.n	8007d7c <__sfputs_r+0x22>
 8007d6c:	463a      	mov	r2, r7
 8007d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d72:	4630      	mov	r0, r6
 8007d74:	f7ff ffdc 	bl	8007d30 <__sfputc_r>
 8007d78:	1c43      	adds	r3, r0, #1
 8007d7a:	d1f3      	bne.n	8007d64 <__sfputs_r+0xa>
 8007d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d80 <_vfiprintf_r>:
 8007d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d84:	460c      	mov	r4, r1
 8007d86:	b09d      	sub	sp, #116	; 0x74
 8007d88:	4617      	mov	r7, r2
 8007d8a:	461d      	mov	r5, r3
 8007d8c:	4606      	mov	r6, r0
 8007d8e:	b118      	cbz	r0, 8007d98 <_vfiprintf_r+0x18>
 8007d90:	6983      	ldr	r3, [r0, #24]
 8007d92:	b90b      	cbnz	r3, 8007d98 <_vfiprintf_r+0x18>
 8007d94:	f7ff fe38 	bl	8007a08 <__sinit>
 8007d98:	4b7c      	ldr	r3, [pc, #496]	; (8007f8c <_vfiprintf_r+0x20c>)
 8007d9a:	429c      	cmp	r4, r3
 8007d9c:	d158      	bne.n	8007e50 <_vfiprintf_r+0xd0>
 8007d9e:	6874      	ldr	r4, [r6, #4]
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	0718      	lsls	r0, r3, #28
 8007da4:	d55e      	bpl.n	8007e64 <_vfiprintf_r+0xe4>
 8007da6:	6923      	ldr	r3, [r4, #16]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d05b      	beq.n	8007e64 <_vfiprintf_r+0xe4>
 8007dac:	2300      	movs	r3, #0
 8007dae:	9309      	str	r3, [sp, #36]	; 0x24
 8007db0:	2320      	movs	r3, #32
 8007db2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007db6:	2330      	movs	r3, #48	; 0x30
 8007db8:	f04f 0b01 	mov.w	fp, #1
 8007dbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dc0:	9503      	str	r5, [sp, #12]
 8007dc2:	46b8      	mov	r8, r7
 8007dc4:	4645      	mov	r5, r8
 8007dc6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007dca:	b10b      	cbz	r3, 8007dd0 <_vfiprintf_r+0x50>
 8007dcc:	2b25      	cmp	r3, #37	; 0x25
 8007dce:	d154      	bne.n	8007e7a <_vfiprintf_r+0xfa>
 8007dd0:	ebb8 0a07 	subs.w	sl, r8, r7
 8007dd4:	d00b      	beq.n	8007dee <_vfiprintf_r+0x6e>
 8007dd6:	4653      	mov	r3, sl
 8007dd8:	463a      	mov	r2, r7
 8007dda:	4621      	mov	r1, r4
 8007ddc:	4630      	mov	r0, r6
 8007dde:	f7ff ffbc 	bl	8007d5a <__sfputs_r>
 8007de2:	3001      	adds	r0, #1
 8007de4:	f000 80c2 	beq.w	8007f6c <_vfiprintf_r+0x1ec>
 8007de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dea:	4453      	add	r3, sl
 8007dec:	9309      	str	r3, [sp, #36]	; 0x24
 8007dee:	f898 3000 	ldrb.w	r3, [r8]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 80ba 	beq.w	8007f6c <_vfiprintf_r+0x1ec>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e02:	9304      	str	r3, [sp, #16]
 8007e04:	9307      	str	r3, [sp, #28]
 8007e06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e0a:	931a      	str	r3, [sp, #104]	; 0x68
 8007e0c:	46a8      	mov	r8, r5
 8007e0e:	2205      	movs	r2, #5
 8007e10:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007e14:	485e      	ldr	r0, [pc, #376]	; (8007f90 <_vfiprintf_r+0x210>)
 8007e16:	f000 fb31 	bl	800847c <memchr>
 8007e1a:	9b04      	ldr	r3, [sp, #16]
 8007e1c:	bb78      	cbnz	r0, 8007e7e <_vfiprintf_r+0xfe>
 8007e1e:	06d9      	lsls	r1, r3, #27
 8007e20:	bf44      	itt	mi
 8007e22:	2220      	movmi	r2, #32
 8007e24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007e28:	071a      	lsls	r2, r3, #28
 8007e2a:	bf44      	itt	mi
 8007e2c:	222b      	movmi	r2, #43	; 0x2b
 8007e2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007e32:	782a      	ldrb	r2, [r5, #0]
 8007e34:	2a2a      	cmp	r2, #42	; 0x2a
 8007e36:	d02a      	beq.n	8007e8e <_vfiprintf_r+0x10e>
 8007e38:	46a8      	mov	r8, r5
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	250a      	movs	r5, #10
 8007e3e:	9a07      	ldr	r2, [sp, #28]
 8007e40:	4641      	mov	r1, r8
 8007e42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e46:	3b30      	subs	r3, #48	; 0x30
 8007e48:	2b09      	cmp	r3, #9
 8007e4a:	d969      	bls.n	8007f20 <_vfiprintf_r+0x1a0>
 8007e4c:	b360      	cbz	r0, 8007ea8 <_vfiprintf_r+0x128>
 8007e4e:	e024      	b.n	8007e9a <_vfiprintf_r+0x11a>
 8007e50:	4b50      	ldr	r3, [pc, #320]	; (8007f94 <_vfiprintf_r+0x214>)
 8007e52:	429c      	cmp	r4, r3
 8007e54:	d101      	bne.n	8007e5a <_vfiprintf_r+0xda>
 8007e56:	68b4      	ldr	r4, [r6, #8]
 8007e58:	e7a2      	b.n	8007da0 <_vfiprintf_r+0x20>
 8007e5a:	4b4f      	ldr	r3, [pc, #316]	; (8007f98 <_vfiprintf_r+0x218>)
 8007e5c:	429c      	cmp	r4, r3
 8007e5e:	bf08      	it	eq
 8007e60:	68f4      	ldreq	r4, [r6, #12]
 8007e62:	e79d      	b.n	8007da0 <_vfiprintf_r+0x20>
 8007e64:	4621      	mov	r1, r4
 8007e66:	4630      	mov	r0, r6
 8007e68:	f7ff fc70 	bl	800774c <__swsetup_r>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	d09d      	beq.n	8007dac <_vfiprintf_r+0x2c>
 8007e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e74:	b01d      	add	sp, #116	; 0x74
 8007e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7a:	46a8      	mov	r8, r5
 8007e7c:	e7a2      	b.n	8007dc4 <_vfiprintf_r+0x44>
 8007e7e:	4a44      	ldr	r2, [pc, #272]	; (8007f90 <_vfiprintf_r+0x210>)
 8007e80:	4645      	mov	r5, r8
 8007e82:	1a80      	subs	r0, r0, r2
 8007e84:	fa0b f000 	lsl.w	r0, fp, r0
 8007e88:	4318      	orrs	r0, r3
 8007e8a:	9004      	str	r0, [sp, #16]
 8007e8c:	e7be      	b.n	8007e0c <_vfiprintf_r+0x8c>
 8007e8e:	9a03      	ldr	r2, [sp, #12]
 8007e90:	1d11      	adds	r1, r2, #4
 8007e92:	6812      	ldr	r2, [r2, #0]
 8007e94:	9103      	str	r1, [sp, #12]
 8007e96:	2a00      	cmp	r2, #0
 8007e98:	db01      	blt.n	8007e9e <_vfiprintf_r+0x11e>
 8007e9a:	9207      	str	r2, [sp, #28]
 8007e9c:	e004      	b.n	8007ea8 <_vfiprintf_r+0x128>
 8007e9e:	4252      	negs	r2, r2
 8007ea0:	f043 0302 	orr.w	r3, r3, #2
 8007ea4:	9207      	str	r2, [sp, #28]
 8007ea6:	9304      	str	r3, [sp, #16]
 8007ea8:	f898 3000 	ldrb.w	r3, [r8]
 8007eac:	2b2e      	cmp	r3, #46	; 0x2e
 8007eae:	d10e      	bne.n	8007ece <_vfiprintf_r+0x14e>
 8007eb0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007eb4:	2b2a      	cmp	r3, #42	; 0x2a
 8007eb6:	d138      	bne.n	8007f2a <_vfiprintf_r+0x1aa>
 8007eb8:	9b03      	ldr	r3, [sp, #12]
 8007eba:	f108 0802 	add.w	r8, r8, #2
 8007ebe:	1d1a      	adds	r2, r3, #4
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	9203      	str	r2, [sp, #12]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	bfb8      	it	lt
 8007ec8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007ecc:	9305      	str	r3, [sp, #20]
 8007ece:	4d33      	ldr	r5, [pc, #204]	; (8007f9c <_vfiprintf_r+0x21c>)
 8007ed0:	2203      	movs	r2, #3
 8007ed2:	f898 1000 	ldrb.w	r1, [r8]
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f000 fad0 	bl	800847c <memchr>
 8007edc:	b140      	cbz	r0, 8007ef0 <_vfiprintf_r+0x170>
 8007ede:	2340      	movs	r3, #64	; 0x40
 8007ee0:	1b40      	subs	r0, r0, r5
 8007ee2:	fa03 f000 	lsl.w	r0, r3, r0
 8007ee6:	9b04      	ldr	r3, [sp, #16]
 8007ee8:	f108 0801 	add.w	r8, r8, #1
 8007eec:	4303      	orrs	r3, r0
 8007eee:	9304      	str	r3, [sp, #16]
 8007ef0:	f898 1000 	ldrb.w	r1, [r8]
 8007ef4:	2206      	movs	r2, #6
 8007ef6:	482a      	ldr	r0, [pc, #168]	; (8007fa0 <_vfiprintf_r+0x220>)
 8007ef8:	f108 0701 	add.w	r7, r8, #1
 8007efc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f00:	f000 fabc 	bl	800847c <memchr>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	d037      	beq.n	8007f78 <_vfiprintf_r+0x1f8>
 8007f08:	4b26      	ldr	r3, [pc, #152]	; (8007fa4 <_vfiprintf_r+0x224>)
 8007f0a:	bb1b      	cbnz	r3, 8007f54 <_vfiprintf_r+0x1d4>
 8007f0c:	9b03      	ldr	r3, [sp, #12]
 8007f0e:	3307      	adds	r3, #7
 8007f10:	f023 0307 	bic.w	r3, r3, #7
 8007f14:	3308      	adds	r3, #8
 8007f16:	9303      	str	r3, [sp, #12]
 8007f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f1a:	444b      	add	r3, r9
 8007f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f1e:	e750      	b.n	8007dc2 <_vfiprintf_r+0x42>
 8007f20:	fb05 3202 	mla	r2, r5, r2, r3
 8007f24:	2001      	movs	r0, #1
 8007f26:	4688      	mov	r8, r1
 8007f28:	e78a      	b.n	8007e40 <_vfiprintf_r+0xc0>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	250a      	movs	r5, #10
 8007f2e:	4619      	mov	r1, r3
 8007f30:	f108 0801 	add.w	r8, r8, #1
 8007f34:	9305      	str	r3, [sp, #20]
 8007f36:	4640      	mov	r0, r8
 8007f38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f3c:	3a30      	subs	r2, #48	; 0x30
 8007f3e:	2a09      	cmp	r2, #9
 8007f40:	d903      	bls.n	8007f4a <_vfiprintf_r+0x1ca>
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d0c3      	beq.n	8007ece <_vfiprintf_r+0x14e>
 8007f46:	9105      	str	r1, [sp, #20]
 8007f48:	e7c1      	b.n	8007ece <_vfiprintf_r+0x14e>
 8007f4a:	fb05 2101 	mla	r1, r5, r1, r2
 8007f4e:	2301      	movs	r3, #1
 8007f50:	4680      	mov	r8, r0
 8007f52:	e7f0      	b.n	8007f36 <_vfiprintf_r+0x1b6>
 8007f54:	ab03      	add	r3, sp, #12
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	4622      	mov	r2, r4
 8007f5a:	4b13      	ldr	r3, [pc, #76]	; (8007fa8 <_vfiprintf_r+0x228>)
 8007f5c:	a904      	add	r1, sp, #16
 8007f5e:	4630      	mov	r0, r6
 8007f60:	f3af 8000 	nop.w
 8007f64:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007f68:	4681      	mov	r9, r0
 8007f6a:	d1d5      	bne.n	8007f18 <_vfiprintf_r+0x198>
 8007f6c:	89a3      	ldrh	r3, [r4, #12]
 8007f6e:	065b      	lsls	r3, r3, #25
 8007f70:	f53f af7e 	bmi.w	8007e70 <_vfiprintf_r+0xf0>
 8007f74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f76:	e77d      	b.n	8007e74 <_vfiprintf_r+0xf4>
 8007f78:	ab03      	add	r3, sp, #12
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	4622      	mov	r2, r4
 8007f7e:	4b0a      	ldr	r3, [pc, #40]	; (8007fa8 <_vfiprintf_r+0x228>)
 8007f80:	a904      	add	r1, sp, #16
 8007f82:	4630      	mov	r0, r6
 8007f84:	f000 f888 	bl	8008098 <_printf_i>
 8007f88:	e7ec      	b.n	8007f64 <_vfiprintf_r+0x1e4>
 8007f8a:	bf00      	nop
 8007f8c:	08008688 	.word	0x08008688
 8007f90:	080086c8 	.word	0x080086c8
 8007f94:	080086a8 	.word	0x080086a8
 8007f98:	08008668 	.word	0x08008668
 8007f9c:	080086ce 	.word	0x080086ce
 8007fa0:	080086d2 	.word	0x080086d2
 8007fa4:	00000000 	.word	0x00000000
 8007fa8:	08007d5b 	.word	0x08007d5b

08007fac <_printf_common>:
 8007fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb0:	4691      	mov	r9, r2
 8007fb2:	461f      	mov	r7, r3
 8007fb4:	688a      	ldr	r2, [r1, #8]
 8007fb6:	690b      	ldr	r3, [r1, #16]
 8007fb8:	4606      	mov	r6, r0
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	bfb8      	it	lt
 8007fbe:	4613      	movlt	r3, r2
 8007fc0:	f8c9 3000 	str.w	r3, [r9]
 8007fc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fc8:	460c      	mov	r4, r1
 8007fca:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007fce:	b112      	cbz	r2, 8007fd6 <_printf_common+0x2a>
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	f8c9 3000 	str.w	r3, [r9]
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	0699      	lsls	r1, r3, #26
 8007fda:	bf42      	ittt	mi
 8007fdc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007fe0:	3302      	addmi	r3, #2
 8007fe2:	f8c9 3000 	strmi.w	r3, [r9]
 8007fe6:	6825      	ldr	r5, [r4, #0]
 8007fe8:	f015 0506 	ands.w	r5, r5, #6
 8007fec:	d107      	bne.n	8007ffe <_printf_common+0x52>
 8007fee:	f104 0a19 	add.w	sl, r4, #25
 8007ff2:	68e3      	ldr	r3, [r4, #12]
 8007ff4:	f8d9 2000 	ldr.w	r2, [r9]
 8007ff8:	1a9b      	subs	r3, r3, r2
 8007ffa:	42ab      	cmp	r3, r5
 8007ffc:	dc29      	bgt.n	8008052 <_printf_common+0xa6>
 8007ffe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008002:	6822      	ldr	r2, [r4, #0]
 8008004:	3300      	adds	r3, #0
 8008006:	bf18      	it	ne
 8008008:	2301      	movne	r3, #1
 800800a:	0692      	lsls	r2, r2, #26
 800800c:	d42e      	bmi.n	800806c <_printf_common+0xc0>
 800800e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008012:	4639      	mov	r1, r7
 8008014:	4630      	mov	r0, r6
 8008016:	47c0      	blx	r8
 8008018:	3001      	adds	r0, #1
 800801a:	d021      	beq.n	8008060 <_printf_common+0xb4>
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	68e5      	ldr	r5, [r4, #12]
 8008020:	f003 0306 	and.w	r3, r3, #6
 8008024:	2b04      	cmp	r3, #4
 8008026:	bf18      	it	ne
 8008028:	2500      	movne	r5, #0
 800802a:	f8d9 2000 	ldr.w	r2, [r9]
 800802e:	f04f 0900 	mov.w	r9, #0
 8008032:	bf08      	it	eq
 8008034:	1aad      	subeq	r5, r5, r2
 8008036:	68a3      	ldr	r3, [r4, #8]
 8008038:	6922      	ldr	r2, [r4, #16]
 800803a:	bf08      	it	eq
 800803c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008040:	4293      	cmp	r3, r2
 8008042:	bfc4      	itt	gt
 8008044:	1a9b      	subgt	r3, r3, r2
 8008046:	18ed      	addgt	r5, r5, r3
 8008048:	341a      	adds	r4, #26
 800804a:	454d      	cmp	r5, r9
 800804c:	d11a      	bne.n	8008084 <_printf_common+0xd8>
 800804e:	2000      	movs	r0, #0
 8008050:	e008      	b.n	8008064 <_printf_common+0xb8>
 8008052:	2301      	movs	r3, #1
 8008054:	4652      	mov	r2, sl
 8008056:	4639      	mov	r1, r7
 8008058:	4630      	mov	r0, r6
 800805a:	47c0      	blx	r8
 800805c:	3001      	adds	r0, #1
 800805e:	d103      	bne.n	8008068 <_printf_common+0xbc>
 8008060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008068:	3501      	adds	r5, #1
 800806a:	e7c2      	b.n	8007ff2 <_printf_common+0x46>
 800806c:	2030      	movs	r0, #48	; 0x30
 800806e:	18e1      	adds	r1, r4, r3
 8008070:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008074:	1c5a      	adds	r2, r3, #1
 8008076:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800807a:	4422      	add	r2, r4
 800807c:	3302      	adds	r3, #2
 800807e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008082:	e7c4      	b.n	800800e <_printf_common+0x62>
 8008084:	2301      	movs	r3, #1
 8008086:	4622      	mov	r2, r4
 8008088:	4639      	mov	r1, r7
 800808a:	4630      	mov	r0, r6
 800808c:	47c0      	blx	r8
 800808e:	3001      	adds	r0, #1
 8008090:	d0e6      	beq.n	8008060 <_printf_common+0xb4>
 8008092:	f109 0901 	add.w	r9, r9, #1
 8008096:	e7d8      	b.n	800804a <_printf_common+0x9e>

08008098 <_printf_i>:
 8008098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800809c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80080a0:	460c      	mov	r4, r1
 80080a2:	7e09      	ldrb	r1, [r1, #24]
 80080a4:	b085      	sub	sp, #20
 80080a6:	296e      	cmp	r1, #110	; 0x6e
 80080a8:	4617      	mov	r7, r2
 80080aa:	4606      	mov	r6, r0
 80080ac:	4698      	mov	r8, r3
 80080ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080b0:	f000 80b3 	beq.w	800821a <_printf_i+0x182>
 80080b4:	d822      	bhi.n	80080fc <_printf_i+0x64>
 80080b6:	2963      	cmp	r1, #99	; 0x63
 80080b8:	d036      	beq.n	8008128 <_printf_i+0x90>
 80080ba:	d80a      	bhi.n	80080d2 <_printf_i+0x3a>
 80080bc:	2900      	cmp	r1, #0
 80080be:	f000 80b9 	beq.w	8008234 <_printf_i+0x19c>
 80080c2:	2958      	cmp	r1, #88	; 0x58
 80080c4:	f000 8083 	beq.w	80081ce <_printf_i+0x136>
 80080c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80080d0:	e032      	b.n	8008138 <_printf_i+0xa0>
 80080d2:	2964      	cmp	r1, #100	; 0x64
 80080d4:	d001      	beq.n	80080da <_printf_i+0x42>
 80080d6:	2969      	cmp	r1, #105	; 0x69
 80080d8:	d1f6      	bne.n	80080c8 <_printf_i+0x30>
 80080da:	6820      	ldr	r0, [r4, #0]
 80080dc:	6813      	ldr	r3, [r2, #0]
 80080de:	0605      	lsls	r5, r0, #24
 80080e0:	f103 0104 	add.w	r1, r3, #4
 80080e4:	d52a      	bpl.n	800813c <_printf_i+0xa4>
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	6011      	str	r1, [r2, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	da03      	bge.n	80080f6 <_printf_i+0x5e>
 80080ee:	222d      	movs	r2, #45	; 0x2d
 80080f0:	425b      	negs	r3, r3
 80080f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80080f6:	486f      	ldr	r0, [pc, #444]	; (80082b4 <_printf_i+0x21c>)
 80080f8:	220a      	movs	r2, #10
 80080fa:	e039      	b.n	8008170 <_printf_i+0xd8>
 80080fc:	2973      	cmp	r1, #115	; 0x73
 80080fe:	f000 809d 	beq.w	800823c <_printf_i+0x1a4>
 8008102:	d808      	bhi.n	8008116 <_printf_i+0x7e>
 8008104:	296f      	cmp	r1, #111	; 0x6f
 8008106:	d020      	beq.n	800814a <_printf_i+0xb2>
 8008108:	2970      	cmp	r1, #112	; 0x70
 800810a:	d1dd      	bne.n	80080c8 <_printf_i+0x30>
 800810c:	6823      	ldr	r3, [r4, #0]
 800810e:	f043 0320 	orr.w	r3, r3, #32
 8008112:	6023      	str	r3, [r4, #0]
 8008114:	e003      	b.n	800811e <_printf_i+0x86>
 8008116:	2975      	cmp	r1, #117	; 0x75
 8008118:	d017      	beq.n	800814a <_printf_i+0xb2>
 800811a:	2978      	cmp	r1, #120	; 0x78
 800811c:	d1d4      	bne.n	80080c8 <_printf_i+0x30>
 800811e:	2378      	movs	r3, #120	; 0x78
 8008120:	4865      	ldr	r0, [pc, #404]	; (80082b8 <_printf_i+0x220>)
 8008122:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008126:	e055      	b.n	80081d4 <_printf_i+0x13c>
 8008128:	6813      	ldr	r3, [r2, #0]
 800812a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800812e:	1d19      	adds	r1, r3, #4
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	6011      	str	r1, [r2, #0]
 8008134:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008138:	2301      	movs	r3, #1
 800813a:	e08c      	b.n	8008256 <_printf_i+0x1be>
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008142:	6011      	str	r1, [r2, #0]
 8008144:	bf18      	it	ne
 8008146:	b21b      	sxthne	r3, r3
 8008148:	e7cf      	b.n	80080ea <_printf_i+0x52>
 800814a:	6813      	ldr	r3, [r2, #0]
 800814c:	6825      	ldr	r5, [r4, #0]
 800814e:	1d18      	adds	r0, r3, #4
 8008150:	6010      	str	r0, [r2, #0]
 8008152:	0628      	lsls	r0, r5, #24
 8008154:	d501      	bpl.n	800815a <_printf_i+0xc2>
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	e002      	b.n	8008160 <_printf_i+0xc8>
 800815a:	0668      	lsls	r0, r5, #25
 800815c:	d5fb      	bpl.n	8008156 <_printf_i+0xbe>
 800815e:	881b      	ldrh	r3, [r3, #0]
 8008160:	296f      	cmp	r1, #111	; 0x6f
 8008162:	bf14      	ite	ne
 8008164:	220a      	movne	r2, #10
 8008166:	2208      	moveq	r2, #8
 8008168:	4852      	ldr	r0, [pc, #328]	; (80082b4 <_printf_i+0x21c>)
 800816a:	2100      	movs	r1, #0
 800816c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008170:	6865      	ldr	r5, [r4, #4]
 8008172:	2d00      	cmp	r5, #0
 8008174:	60a5      	str	r5, [r4, #8]
 8008176:	f2c0 8095 	blt.w	80082a4 <_printf_i+0x20c>
 800817a:	6821      	ldr	r1, [r4, #0]
 800817c:	f021 0104 	bic.w	r1, r1, #4
 8008180:	6021      	str	r1, [r4, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d13d      	bne.n	8008202 <_printf_i+0x16a>
 8008186:	2d00      	cmp	r5, #0
 8008188:	f040 808e 	bne.w	80082a8 <_printf_i+0x210>
 800818c:	4665      	mov	r5, ip
 800818e:	2a08      	cmp	r2, #8
 8008190:	d10b      	bne.n	80081aa <_printf_i+0x112>
 8008192:	6823      	ldr	r3, [r4, #0]
 8008194:	07db      	lsls	r3, r3, #31
 8008196:	d508      	bpl.n	80081aa <_printf_i+0x112>
 8008198:	6923      	ldr	r3, [r4, #16]
 800819a:	6862      	ldr	r2, [r4, #4]
 800819c:	429a      	cmp	r2, r3
 800819e:	bfde      	ittt	le
 80081a0:	2330      	movle	r3, #48	; 0x30
 80081a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081a6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80081aa:	ebac 0305 	sub.w	r3, ip, r5
 80081ae:	6123      	str	r3, [r4, #16]
 80081b0:	f8cd 8000 	str.w	r8, [sp]
 80081b4:	463b      	mov	r3, r7
 80081b6:	aa03      	add	r2, sp, #12
 80081b8:	4621      	mov	r1, r4
 80081ba:	4630      	mov	r0, r6
 80081bc:	f7ff fef6 	bl	8007fac <_printf_common>
 80081c0:	3001      	adds	r0, #1
 80081c2:	d14d      	bne.n	8008260 <_printf_i+0x1c8>
 80081c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081c8:	b005      	add	sp, #20
 80081ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081ce:	4839      	ldr	r0, [pc, #228]	; (80082b4 <_printf_i+0x21c>)
 80081d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80081d4:	6813      	ldr	r3, [r2, #0]
 80081d6:	6821      	ldr	r1, [r4, #0]
 80081d8:	1d1d      	adds	r5, r3, #4
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6015      	str	r5, [r2, #0]
 80081de:	060a      	lsls	r2, r1, #24
 80081e0:	d50b      	bpl.n	80081fa <_printf_i+0x162>
 80081e2:	07ca      	lsls	r2, r1, #31
 80081e4:	bf44      	itt	mi
 80081e6:	f041 0120 	orrmi.w	r1, r1, #32
 80081ea:	6021      	strmi	r1, [r4, #0]
 80081ec:	b91b      	cbnz	r3, 80081f6 <_printf_i+0x15e>
 80081ee:	6822      	ldr	r2, [r4, #0]
 80081f0:	f022 0220 	bic.w	r2, r2, #32
 80081f4:	6022      	str	r2, [r4, #0]
 80081f6:	2210      	movs	r2, #16
 80081f8:	e7b7      	b.n	800816a <_printf_i+0xd2>
 80081fa:	064d      	lsls	r5, r1, #25
 80081fc:	bf48      	it	mi
 80081fe:	b29b      	uxthmi	r3, r3
 8008200:	e7ef      	b.n	80081e2 <_printf_i+0x14a>
 8008202:	4665      	mov	r5, ip
 8008204:	fbb3 f1f2 	udiv	r1, r3, r2
 8008208:	fb02 3311 	mls	r3, r2, r1, r3
 800820c:	5cc3      	ldrb	r3, [r0, r3]
 800820e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008212:	460b      	mov	r3, r1
 8008214:	2900      	cmp	r1, #0
 8008216:	d1f5      	bne.n	8008204 <_printf_i+0x16c>
 8008218:	e7b9      	b.n	800818e <_printf_i+0xf6>
 800821a:	6813      	ldr	r3, [r2, #0]
 800821c:	6825      	ldr	r5, [r4, #0]
 800821e:	1d18      	adds	r0, r3, #4
 8008220:	6961      	ldr	r1, [r4, #20]
 8008222:	6010      	str	r0, [r2, #0]
 8008224:	0628      	lsls	r0, r5, #24
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	d501      	bpl.n	800822e <_printf_i+0x196>
 800822a:	6019      	str	r1, [r3, #0]
 800822c:	e002      	b.n	8008234 <_printf_i+0x19c>
 800822e:	066a      	lsls	r2, r5, #25
 8008230:	d5fb      	bpl.n	800822a <_printf_i+0x192>
 8008232:	8019      	strh	r1, [r3, #0]
 8008234:	2300      	movs	r3, #0
 8008236:	4665      	mov	r5, ip
 8008238:	6123      	str	r3, [r4, #16]
 800823a:	e7b9      	b.n	80081b0 <_printf_i+0x118>
 800823c:	6813      	ldr	r3, [r2, #0]
 800823e:	1d19      	adds	r1, r3, #4
 8008240:	6011      	str	r1, [r2, #0]
 8008242:	681d      	ldr	r5, [r3, #0]
 8008244:	6862      	ldr	r2, [r4, #4]
 8008246:	2100      	movs	r1, #0
 8008248:	4628      	mov	r0, r5
 800824a:	f000 f917 	bl	800847c <memchr>
 800824e:	b108      	cbz	r0, 8008254 <_printf_i+0x1bc>
 8008250:	1b40      	subs	r0, r0, r5
 8008252:	6060      	str	r0, [r4, #4]
 8008254:	6863      	ldr	r3, [r4, #4]
 8008256:	6123      	str	r3, [r4, #16]
 8008258:	2300      	movs	r3, #0
 800825a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800825e:	e7a7      	b.n	80081b0 <_printf_i+0x118>
 8008260:	6923      	ldr	r3, [r4, #16]
 8008262:	462a      	mov	r2, r5
 8008264:	4639      	mov	r1, r7
 8008266:	4630      	mov	r0, r6
 8008268:	47c0      	blx	r8
 800826a:	3001      	adds	r0, #1
 800826c:	d0aa      	beq.n	80081c4 <_printf_i+0x12c>
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	079b      	lsls	r3, r3, #30
 8008272:	d413      	bmi.n	800829c <_printf_i+0x204>
 8008274:	68e0      	ldr	r0, [r4, #12]
 8008276:	9b03      	ldr	r3, [sp, #12]
 8008278:	4298      	cmp	r0, r3
 800827a:	bfb8      	it	lt
 800827c:	4618      	movlt	r0, r3
 800827e:	e7a3      	b.n	80081c8 <_printf_i+0x130>
 8008280:	2301      	movs	r3, #1
 8008282:	464a      	mov	r2, r9
 8008284:	4639      	mov	r1, r7
 8008286:	4630      	mov	r0, r6
 8008288:	47c0      	blx	r8
 800828a:	3001      	adds	r0, #1
 800828c:	d09a      	beq.n	80081c4 <_printf_i+0x12c>
 800828e:	3501      	adds	r5, #1
 8008290:	68e3      	ldr	r3, [r4, #12]
 8008292:	9a03      	ldr	r2, [sp, #12]
 8008294:	1a9b      	subs	r3, r3, r2
 8008296:	42ab      	cmp	r3, r5
 8008298:	dcf2      	bgt.n	8008280 <_printf_i+0x1e8>
 800829a:	e7eb      	b.n	8008274 <_printf_i+0x1dc>
 800829c:	2500      	movs	r5, #0
 800829e:	f104 0919 	add.w	r9, r4, #25
 80082a2:	e7f5      	b.n	8008290 <_printf_i+0x1f8>
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1ac      	bne.n	8008202 <_printf_i+0x16a>
 80082a8:	7803      	ldrb	r3, [r0, #0]
 80082aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082b2:	e76c      	b.n	800818e <_printf_i+0xf6>
 80082b4:	080086d9 	.word	0x080086d9
 80082b8:	080086ea 	.word	0x080086ea

080082bc <_putc_r>:
 80082bc:	b570      	push	{r4, r5, r6, lr}
 80082be:	460d      	mov	r5, r1
 80082c0:	4614      	mov	r4, r2
 80082c2:	4606      	mov	r6, r0
 80082c4:	b118      	cbz	r0, 80082ce <_putc_r+0x12>
 80082c6:	6983      	ldr	r3, [r0, #24]
 80082c8:	b90b      	cbnz	r3, 80082ce <_putc_r+0x12>
 80082ca:	f7ff fb9d 	bl	8007a08 <__sinit>
 80082ce:	4b13      	ldr	r3, [pc, #76]	; (800831c <_putc_r+0x60>)
 80082d0:	429c      	cmp	r4, r3
 80082d2:	d112      	bne.n	80082fa <_putc_r+0x3e>
 80082d4:	6874      	ldr	r4, [r6, #4]
 80082d6:	68a3      	ldr	r3, [r4, #8]
 80082d8:	3b01      	subs	r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	60a3      	str	r3, [r4, #8]
 80082de:	da16      	bge.n	800830e <_putc_r+0x52>
 80082e0:	69a2      	ldr	r2, [r4, #24]
 80082e2:	4293      	cmp	r3, r2
 80082e4:	db02      	blt.n	80082ec <_putc_r+0x30>
 80082e6:	b2eb      	uxtb	r3, r5
 80082e8:	2b0a      	cmp	r3, #10
 80082ea:	d110      	bne.n	800830e <_putc_r+0x52>
 80082ec:	4622      	mov	r2, r4
 80082ee:	4629      	mov	r1, r5
 80082f0:	4630      	mov	r0, r6
 80082f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80082f6:	f7ff b9d7 	b.w	80076a8 <__swbuf_r>
 80082fa:	4b09      	ldr	r3, [pc, #36]	; (8008320 <_putc_r+0x64>)
 80082fc:	429c      	cmp	r4, r3
 80082fe:	d101      	bne.n	8008304 <_putc_r+0x48>
 8008300:	68b4      	ldr	r4, [r6, #8]
 8008302:	e7e8      	b.n	80082d6 <_putc_r+0x1a>
 8008304:	4b07      	ldr	r3, [pc, #28]	; (8008324 <_putc_r+0x68>)
 8008306:	429c      	cmp	r4, r3
 8008308:	bf08      	it	eq
 800830a:	68f4      	ldreq	r4, [r6, #12]
 800830c:	e7e3      	b.n	80082d6 <_putc_r+0x1a>
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	b2e8      	uxtb	r0, r5
 8008312:	1c5a      	adds	r2, r3, #1
 8008314:	6022      	str	r2, [r4, #0]
 8008316:	701d      	strb	r5, [r3, #0]
 8008318:	bd70      	pop	{r4, r5, r6, pc}
 800831a:	bf00      	nop
 800831c:	08008688 	.word	0x08008688
 8008320:	080086a8 	.word	0x080086a8
 8008324:	08008668 	.word	0x08008668

08008328 <_sbrk_r>:
 8008328:	b538      	push	{r3, r4, r5, lr}
 800832a:	2300      	movs	r3, #0
 800832c:	4c05      	ldr	r4, [pc, #20]	; (8008344 <_sbrk_r+0x1c>)
 800832e:	4605      	mov	r5, r0
 8008330:	4608      	mov	r0, r1
 8008332:	6023      	str	r3, [r4, #0]
 8008334:	f7f9 f934 	bl	80015a0 <_sbrk>
 8008338:	1c43      	adds	r3, r0, #1
 800833a:	d102      	bne.n	8008342 <_sbrk_r+0x1a>
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	b103      	cbz	r3, 8008342 <_sbrk_r+0x1a>
 8008340:	602b      	str	r3, [r5, #0]
 8008342:	bd38      	pop	{r3, r4, r5, pc}
 8008344:	20001cac 	.word	0x20001cac

08008348 <__sread>:
 8008348:	b510      	push	{r4, lr}
 800834a:	460c      	mov	r4, r1
 800834c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008350:	f000 f8a4 	bl	800849c <_read_r>
 8008354:	2800      	cmp	r0, #0
 8008356:	bfab      	itete	ge
 8008358:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800835a:	89a3      	ldrhlt	r3, [r4, #12]
 800835c:	181b      	addge	r3, r3, r0
 800835e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008362:	bfac      	ite	ge
 8008364:	6563      	strge	r3, [r4, #84]	; 0x54
 8008366:	81a3      	strhlt	r3, [r4, #12]
 8008368:	bd10      	pop	{r4, pc}

0800836a <__swrite>:
 800836a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800836e:	461f      	mov	r7, r3
 8008370:	898b      	ldrh	r3, [r1, #12]
 8008372:	4605      	mov	r5, r0
 8008374:	05db      	lsls	r3, r3, #23
 8008376:	460c      	mov	r4, r1
 8008378:	4616      	mov	r6, r2
 800837a:	d505      	bpl.n	8008388 <__swrite+0x1e>
 800837c:	2302      	movs	r3, #2
 800837e:	2200      	movs	r2, #0
 8008380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008384:	f000 f868 	bl	8008458 <_lseek_r>
 8008388:	89a3      	ldrh	r3, [r4, #12]
 800838a:	4632      	mov	r2, r6
 800838c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008390:	81a3      	strh	r3, [r4, #12]
 8008392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008396:	463b      	mov	r3, r7
 8008398:	4628      	mov	r0, r5
 800839a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800839e:	f000 b817 	b.w	80083d0 <_write_r>

080083a2 <__sseek>:
 80083a2:	b510      	push	{r4, lr}
 80083a4:	460c      	mov	r4, r1
 80083a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083aa:	f000 f855 	bl	8008458 <_lseek_r>
 80083ae:	1c43      	adds	r3, r0, #1
 80083b0:	89a3      	ldrh	r3, [r4, #12]
 80083b2:	bf15      	itete	ne
 80083b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80083b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083be:	81a3      	strheq	r3, [r4, #12]
 80083c0:	bf18      	it	ne
 80083c2:	81a3      	strhne	r3, [r4, #12]
 80083c4:	bd10      	pop	{r4, pc}

080083c6 <__sclose>:
 80083c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ca:	f000 b813 	b.w	80083f4 <_close_r>
	...

080083d0 <_write_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	4605      	mov	r5, r0
 80083d4:	4608      	mov	r0, r1
 80083d6:	4611      	mov	r1, r2
 80083d8:	2200      	movs	r2, #0
 80083da:	4c05      	ldr	r4, [pc, #20]	; (80083f0 <_write_r+0x20>)
 80083dc:	6022      	str	r2, [r4, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	f7f7 ff7e 	bl	80002e0 <_write>
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	d102      	bne.n	80083ee <_write_r+0x1e>
 80083e8:	6823      	ldr	r3, [r4, #0]
 80083ea:	b103      	cbz	r3, 80083ee <_write_r+0x1e>
 80083ec:	602b      	str	r3, [r5, #0]
 80083ee:	bd38      	pop	{r3, r4, r5, pc}
 80083f0:	20001cac 	.word	0x20001cac

080083f4 <_close_r>:
 80083f4:	b538      	push	{r3, r4, r5, lr}
 80083f6:	2300      	movs	r3, #0
 80083f8:	4c05      	ldr	r4, [pc, #20]	; (8008410 <_close_r+0x1c>)
 80083fa:	4605      	mov	r5, r0
 80083fc:	4608      	mov	r0, r1
 80083fe:	6023      	str	r3, [r4, #0]
 8008400:	f7f9 f89d 	bl	800153e <_close>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d102      	bne.n	800840e <_close_r+0x1a>
 8008408:	6823      	ldr	r3, [r4, #0]
 800840a:	b103      	cbz	r3, 800840e <_close_r+0x1a>
 800840c:	602b      	str	r3, [r5, #0]
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	20001cac 	.word	0x20001cac

08008414 <_fstat_r>:
 8008414:	b538      	push	{r3, r4, r5, lr}
 8008416:	2300      	movs	r3, #0
 8008418:	4c06      	ldr	r4, [pc, #24]	; (8008434 <_fstat_r+0x20>)
 800841a:	4605      	mov	r5, r0
 800841c:	4608      	mov	r0, r1
 800841e:	4611      	mov	r1, r2
 8008420:	6023      	str	r3, [r4, #0]
 8008422:	f7f9 f897 	bl	8001554 <_fstat>
 8008426:	1c43      	adds	r3, r0, #1
 8008428:	d102      	bne.n	8008430 <_fstat_r+0x1c>
 800842a:	6823      	ldr	r3, [r4, #0]
 800842c:	b103      	cbz	r3, 8008430 <_fstat_r+0x1c>
 800842e:	602b      	str	r3, [r5, #0]
 8008430:	bd38      	pop	{r3, r4, r5, pc}
 8008432:	bf00      	nop
 8008434:	20001cac 	.word	0x20001cac

08008438 <_isatty_r>:
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	2300      	movs	r3, #0
 800843c:	4c05      	ldr	r4, [pc, #20]	; (8008454 <_isatty_r+0x1c>)
 800843e:	4605      	mov	r5, r0
 8008440:	4608      	mov	r0, r1
 8008442:	6023      	str	r3, [r4, #0]
 8008444:	f7f9 f895 	bl	8001572 <_isatty>
 8008448:	1c43      	adds	r3, r0, #1
 800844a:	d102      	bne.n	8008452 <_isatty_r+0x1a>
 800844c:	6823      	ldr	r3, [r4, #0]
 800844e:	b103      	cbz	r3, 8008452 <_isatty_r+0x1a>
 8008450:	602b      	str	r3, [r5, #0]
 8008452:	bd38      	pop	{r3, r4, r5, pc}
 8008454:	20001cac 	.word	0x20001cac

08008458 <_lseek_r>:
 8008458:	b538      	push	{r3, r4, r5, lr}
 800845a:	4605      	mov	r5, r0
 800845c:	4608      	mov	r0, r1
 800845e:	4611      	mov	r1, r2
 8008460:	2200      	movs	r2, #0
 8008462:	4c05      	ldr	r4, [pc, #20]	; (8008478 <_lseek_r+0x20>)
 8008464:	6022      	str	r2, [r4, #0]
 8008466:	461a      	mov	r2, r3
 8008468:	f7f9 f88d 	bl	8001586 <_lseek>
 800846c:	1c43      	adds	r3, r0, #1
 800846e:	d102      	bne.n	8008476 <_lseek_r+0x1e>
 8008470:	6823      	ldr	r3, [r4, #0]
 8008472:	b103      	cbz	r3, 8008476 <_lseek_r+0x1e>
 8008474:	602b      	str	r3, [r5, #0]
 8008476:	bd38      	pop	{r3, r4, r5, pc}
 8008478:	20001cac 	.word	0x20001cac

0800847c <memchr>:
 800847c:	b510      	push	{r4, lr}
 800847e:	b2c9      	uxtb	r1, r1
 8008480:	4402      	add	r2, r0
 8008482:	4290      	cmp	r0, r2
 8008484:	4603      	mov	r3, r0
 8008486:	d101      	bne.n	800848c <memchr+0x10>
 8008488:	2300      	movs	r3, #0
 800848a:	e003      	b.n	8008494 <memchr+0x18>
 800848c:	781c      	ldrb	r4, [r3, #0]
 800848e:	3001      	adds	r0, #1
 8008490:	428c      	cmp	r4, r1
 8008492:	d1f6      	bne.n	8008482 <memchr+0x6>
 8008494:	4618      	mov	r0, r3
 8008496:	bd10      	pop	{r4, pc}

08008498 <__malloc_lock>:
 8008498:	4770      	bx	lr

0800849a <__malloc_unlock>:
 800849a:	4770      	bx	lr

0800849c <_read_r>:
 800849c:	b538      	push	{r3, r4, r5, lr}
 800849e:	4605      	mov	r5, r0
 80084a0:	4608      	mov	r0, r1
 80084a2:	4611      	mov	r1, r2
 80084a4:	2200      	movs	r2, #0
 80084a6:	4c05      	ldr	r4, [pc, #20]	; (80084bc <_read_r+0x20>)
 80084a8:	6022      	str	r2, [r4, #0]
 80084aa:	461a      	mov	r2, r3
 80084ac:	f7f9 f82a 	bl	8001504 <_read>
 80084b0:	1c43      	adds	r3, r0, #1
 80084b2:	d102      	bne.n	80084ba <_read_r+0x1e>
 80084b4:	6823      	ldr	r3, [r4, #0]
 80084b6:	b103      	cbz	r3, 80084ba <_read_r+0x1e>
 80084b8:	602b      	str	r3, [r5, #0]
 80084ba:	bd38      	pop	{r3, r4, r5, pc}
 80084bc:	20001cac 	.word	0x20001cac

080084c0 <_init>:
 80084c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c2:	bf00      	nop
 80084c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084c6:	bc08      	pop	{r3}
 80084c8:	469e      	mov	lr, r3
 80084ca:	4770      	bx	lr

080084cc <_fini>:
 80084cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ce:	bf00      	nop
 80084d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d2:	bc08      	pop	{r3}
 80084d4:	469e      	mov	lr, r3
 80084d6:	4770      	bx	lr
