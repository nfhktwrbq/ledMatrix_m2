
ledMatrix_m2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007218  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08007328  08007328  00017328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074ec  080074ec  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080074ec  080074ec  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074ec  080074ec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074ec  080074ec  000174ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074f0  080074f0  000174f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080074f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bec  20000074  08007568  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c60  08007568  00021c60  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020201  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e04  00000000  00000000  0004029e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a58  00000000  00000000  000440a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018b8  00000000  00000000  00045b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c078  00000000  00000000  000473b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000160bd  00000000  00000000  00063430  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a0aae  00000000  00000000  000794ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00119f9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076ac  00000000  00000000  0011a018  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08007310 	.word	0x08007310

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08007310 	.word	0x08007310

08000150 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000158:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800015c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000160:	f003 0301 	and.w	r3, r3, #1
 8000164:	2b00      	cmp	r3, #0
 8000166:	d013      	beq.n	8000190 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000168:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800016c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000170:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000174:	2b00      	cmp	r3, #0
 8000176:	d00b      	beq.n	8000190 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	e000      	b.n	800017c <ITM_SendChar+0x2c>
    {
      __NOP();
 800017a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800017c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	2b00      	cmp	r3, #0
 8000184:	d0f9      	beq.n	800017a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000186:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800018a:	687a      	ldr	r2, [r7, #4]
 800018c:	b2d2      	uxtb	r2, r2
 800018e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000190:	687b      	ldr	r3, [r7, #4]
}
 8000192:	4618      	mov	r0, r3
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr

0800019c <_write>:


#if DEBUG_SVO

int _write ( int file, char *ptr, int len )
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b086      	sub	sp, #24
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	60f8      	str	r0, [r7, #12]
 80001a4:	60b9      	str	r1, [r7, #8]
 80001a6:	607a      	str	r2, [r7, #4]
  int i = 0;
 80001a8:	2300      	movs	r3, #0
 80001aa:	617b      	str	r3, [r7, #20]
  for ( i = 0; i < len; i++ )
 80001ac:	2300      	movs	r3, #0
 80001ae:	617b      	str	r3, [r7, #20]
 80001b0:	e009      	b.n	80001c6 <_write+0x2a>
    ITM_SendChar ( *ptr++ );
 80001b2:	68bb      	ldr	r3, [r7, #8]
 80001b4:	1c5a      	adds	r2, r3, #1
 80001b6:	60ba      	str	r2, [r7, #8]
 80001b8:	781b      	ldrb	r3, [r3, #0]
 80001ba:	4618      	mov	r0, r3
 80001bc:	f7ff ffc8 	bl	8000150 <ITM_SendChar>
  for ( i = 0; i < len; i++ )
 80001c0:	697b      	ldr	r3, [r7, #20]
 80001c2:	3301      	adds	r3, #1
 80001c4:	617b      	str	r3, [r7, #20]
 80001c6:	697a      	ldr	r2, [r7, #20]
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	429a      	cmp	r2, r3
 80001cc:	dbf1      	blt.n	80001b2 <_write+0x16>
  return len;
 80001ce:	687b      	ldr	r3, [r7, #4]
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	3718      	adds	r7, #24
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bd80      	pop	{r7, pc}

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001dc:	f001 f89e 	bl	800131c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e0:	f000 f854 	bl	800028c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  _DEBUG_PRINT_MAIN("hi!\n");
 80001e4:	481d      	ldr	r0, [pc, #116]	; (800025c <main+0x84>)
 80001e6:	f006 f97f 	bl	80064e8 <puts>
  _DEBUG_PRINT_MAIN("te\n");
 80001ea:	481d      	ldr	r0, [pc, #116]	; (8000260 <main+0x88>)
 80001ec:	f006 f97c 	bl	80064e8 <puts>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f0:	f000 fa08 	bl	8000604 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001f4:	f000 f8aa 	bl	800034c <MX_ADC1_Init>
  MX_I2C1_Init();
 80001f8:	f000 f8e6 	bl	80003c8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80001fc:	f000 f912 	bl	8000424 <MX_I2C2_Init>
  //MX_RTC_Init();
  MX_SPI1_Init();
 8000200:	f000 f93e 	bl	8000480 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000204:	f000 f972 	bl	80004ec <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000208:	f000 f9a8 	bl	800055c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800020c:	f000 f9d0 	bl	80005b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RTC_Init();
 8000210:	f000 fae6 	bl	80007e0 <RTC_Init>
  si4432_reset();
 8000214:	f000 fbe8 	bl	80009e8 <si4432_reset>
  si4432_init_RX_AN415();
 8000218:	f000 fc9a 	bl	8000b50 <si4432_init_RX_AN415>
  _DEBUG_PRINT_MAIN("time22\n");
 800021c:	4811      	ldr	r0, [pc, #68]	; (8000264 <main+0x8c>)
 800021e:	f006 f963 	bl	80064e8 <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000222:	f003 fc05 	bl	8003a30 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000226:	4a10      	ldr	r2, [pc, #64]	; (8000268 <main+0x90>)
 8000228:	2100      	movs	r1, #0
 800022a:	4810      	ldr	r0, [pc, #64]	; (800026c <main+0x94>)
 800022c:	f003 fc66 	bl	8003afc <osThreadNew>
 8000230:	4602      	mov	r2, r0
 8000232:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <main+0x98>)
 8000234:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  testThreadHandle = osThreadNew(StartTestTask, NULL, &testThread_attributes);
 8000236:	4a0f      	ldr	r2, [pc, #60]	; (8000274 <main+0x9c>)
 8000238:	2100      	movs	r1, #0
 800023a:	480f      	ldr	r0, [pc, #60]	; (8000278 <main+0xa0>)
 800023c:	f003 fc5e 	bl	8003afc <osThreadNew>
 8000240:	4602      	mov	r2, r0
 8000242:	4b0e      	ldr	r3, [pc, #56]	; (800027c <main+0xa4>)
 8000244:	601a      	str	r2, [r3, #0]
  radioThreadHandle = osThreadNew(StartRadioTask, NULL, &radioThread_attributes);
 8000246:	4a0e      	ldr	r2, [pc, #56]	; (8000280 <main+0xa8>)
 8000248:	2100      	movs	r1, #0
 800024a:	480e      	ldr	r0, [pc, #56]	; (8000284 <main+0xac>)
 800024c:	f003 fc56 	bl	8003afc <osThreadNew>
 8000250:	4602      	mov	r2, r0
 8000252:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <main+0xb0>)
 8000254:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000256:	f003 fc1d 	bl	8003a94 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800025a:	e7fe      	b.n	800025a <main+0x82>
 800025c:	0800734c 	.word	0x0800734c
 8000260:	08007350 	.word	0x08007350
 8000264:	08007354 	.word	0x08007354
 8000268:	080073d0 	.word	0x080073d0
 800026c:	0800079d 	.word	0x0800079d
 8000270:	200019a8 	.word	0x200019a8
 8000274:	080073f4 	.word	0x080073f4
 8000278:	08000715 	.word	0x08000715
 800027c:	20001aac 	.word	0x20001aac
 8000280:	08007418 	.word	0x08007418
 8000284:	08000735 	.word	0x08000735
 8000288:	20001b34 	.word	0x20001b34

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b094      	sub	sp, #80	; 0x50
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000296:	2228      	movs	r2, #40	; 0x28
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f006 f893 	bl	80063c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a0:	f107 0314 	add.w	r3, r7, #20
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	605a      	str	r2, [r3, #4]
 80002aa:	609a      	str	r2, [r3, #8]
 80002ac:	60da      	str	r2, [r3, #12]
 80002ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80002bc:	2305      	movs	r3, #5
 80002be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002ca:	2301      	movs	r3, #1
 80002cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ce:	2301      	movs	r3, #1
 80002d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d2:	2302      	movs	r3, #2
 80002d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80002dc:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80002e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 fe0e 	bl	8001f08 <HAL_RCC_OscConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002f2:	f000 fa6f 	bl	80007d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f6:	230f      	movs	r3, #15
 80002f8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fa:	2302      	movs	r3, #2
 80002fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000306:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800030c:	f107 0314 	add.w	r3, r7, #20
 8000310:	2102      	movs	r1, #2
 8000312:	4618      	mov	r0, r3
 8000314:	f002 f878 	bl	8002408 <HAL_RCC_ClockConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800031e:	f000 fa59 	bl	80007d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000322:	2303      	movs	r3, #3
 8000324:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000326:	f44f 7380 	mov.w	r3, #256	; 0x100
 800032a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800032c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000330:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4618      	mov	r0, r3
 8000336:	f002 fa33 	bl	80027a0 <HAL_RCCEx_PeriphCLKConfig>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000340:	f000 fa48 	bl	80007d4 <Error_Handler>
  }
}
 8000344:	bf00      	nop
 8000346:	3750      	adds	r7, #80	; 0x50
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	605a      	str	r2, [r3, #4]
 800035a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800035c:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <MX_ADC1_Init+0x74>)
 800035e:	4a19      	ldr	r2, [pc, #100]	; (80003c4 <MX_ADC1_Init+0x78>)
 8000360:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000362:	4b17      	ldr	r3, [pc, #92]	; (80003c0 <MX_ADC1_Init+0x74>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000368:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <MX_ADC1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800036e:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <MX_ADC1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000374:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <MX_ADC1_Init+0x74>)
 8000376:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800037a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800037c:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <MX_ADC1_Init+0x74>)
 800037e:	2200      	movs	r2, #0
 8000380:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000382:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <MX_ADC1_Init+0x74>)
 8000384:	2201      	movs	r2, #1
 8000386:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000388:	480d      	ldr	r0, [pc, #52]	; (80003c0 <MX_ADC1_Init+0x74>)
 800038a:	f000 fff9 	bl	8001380 <HAL_ADC_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000394:	f000 fa1e 	bl	80007d4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000398:	2300      	movs	r3, #0
 800039a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800039c:	2301      	movs	r3, #1
 800039e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	4619      	mov	r1, r3
 80003a8:	4805      	ldr	r0, [pc, #20]	; (80003c0 <MX_ADC1_Init+0x74>)
 80003aa:	f001 f8c1 	bl	8001530 <HAL_ADC_ConfigChannel>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003b4:	f000 fa0e 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003b8:	bf00      	nop
 80003ba:	3710      	adds	r7, #16
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20001ab0 	.word	0x20001ab0
 80003c4:	40012400 	.word	0x40012400

080003c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003cc:	4b12      	ldr	r3, [pc, #72]	; (8000418 <MX_I2C1_Init+0x50>)
 80003ce:	4a13      	ldr	r2, [pc, #76]	; (800041c <MX_I2C1_Init+0x54>)
 80003d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003d2:	4b11      	ldr	r3, [pc, #68]	; (8000418 <MX_I2C1_Init+0x50>)
 80003d4:	4a12      	ldr	r2, [pc, #72]	; (8000420 <MX_I2C1_Init+0x58>)
 80003d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <MX_I2C1_Init+0x50>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003de:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <MX_I2C1_Init+0x50>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_I2C1_Init+0x50>)
 80003e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003ec:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <MX_I2C1_Init+0x50>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003f2:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_I2C1_Init+0x50>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003f8:	4b07      	ldr	r3, [pc, #28]	; (8000418 <MX_I2C1_Init+0x50>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003fe:	4b06      	ldr	r3, [pc, #24]	; (8000418 <MX_I2C1_Init+0x50>)
 8000400:	2200      	movs	r2, #0
 8000402:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000404:	4804      	ldr	r0, [pc, #16]	; (8000418 <MX_I2C1_Init+0x50>)
 8000406:	f001 fc47 	bl	8001c98 <HAL_I2C_Init>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000410:	f000 f9e0 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20001a04 	.word	0x20001a04
 800041c:	40005400 	.word	0x40005400
 8000420:	000186a0 	.word	0x000186a0

08000424 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000428:	4b12      	ldr	r3, [pc, #72]	; (8000474 <MX_I2C2_Init+0x50>)
 800042a:	4a13      	ldr	r2, [pc, #76]	; (8000478 <MX_I2C2_Init+0x54>)
 800042c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800042e:	4b11      	ldr	r3, [pc, #68]	; (8000474 <MX_I2C2_Init+0x50>)
 8000430:	4a12      	ldr	r2, [pc, #72]	; (800047c <MX_I2C2_Init+0x58>)
 8000432:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000434:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <MX_I2C2_Init+0x50>)
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <MX_I2C2_Init+0x50>)
 800043c:	2200      	movs	r2, #0
 800043e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <MX_I2C2_Init+0x50>)
 8000442:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000446:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <MX_I2C2_Init+0x50>)
 800044a:	2200      	movs	r2, #0
 800044c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <MX_I2C2_Init+0x50>)
 8000450:	2200      	movs	r2, #0
 8000452:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000454:	4b07      	ldr	r3, [pc, #28]	; (8000474 <MX_I2C2_Init+0x50>)
 8000456:	2200      	movs	r2, #0
 8000458:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800045a:	4b06      	ldr	r3, [pc, #24]	; (8000474 <MX_I2C2_Init+0x50>)
 800045c:	2200      	movs	r2, #0
 800045e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000460:	4804      	ldr	r0, [pc, #16]	; (8000474 <MX_I2C2_Init+0x50>)
 8000462:	f001 fc19 	bl	8001c98 <HAL_I2C_Init>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800046c:	f000 f9b2 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20001a58 	.word	0x20001a58
 8000478:	40005800 	.word	0x40005800
 800047c:	000186a0 	.word	0x000186a0

08000480 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000484:	4b17      	ldr	r3, [pc, #92]	; (80004e4 <MX_SPI1_Init+0x64>)
 8000486:	4a18      	ldr	r2, [pc, #96]	; (80004e8 <MX_SPI1_Init+0x68>)
 8000488:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800048a:	4b16      	ldr	r3, [pc, #88]	; (80004e4 <MX_SPI1_Init+0x64>)
 800048c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000490:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000492:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <MX_SPI1_Init+0x64>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000498:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <MX_SPI1_Init+0x64>)
 800049a:	2200      	movs	r2, #0
 800049c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800049e:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <MX_SPI1_Init+0x64>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004a4:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <MX_SPI1_Init+0x64>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80004aa:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <MX_SPI1_Init+0x64>)
 80004ac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80004b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80004b2:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <MX_SPI1_Init+0x64>)
 80004b4:	2228      	movs	r2, #40	; 0x28
 80004b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004b8:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <MX_SPI1_Init+0x64>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <MX_SPI1_Init+0x64>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004c4:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <MX_SPI1_Init+0x64>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80004ca:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <MX_SPI1_Init+0x64>)
 80004cc:	220a      	movs	r2, #10
 80004ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004d0:	4804      	ldr	r0, [pc, #16]	; (80004e4 <MX_SPI1_Init+0x64>)
 80004d2:	f002 fa1b 	bl	800290c <HAL_SPI_Init>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80004dc:	f000 f97a 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20001b38 	.word	0x20001b38
 80004e8:	40013000 	.word	0x40013000

080004ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80004f0:	4b18      	ldr	r3, [pc, #96]	; (8000554 <MX_SPI2_Init+0x68>)
 80004f2:	4a19      	ldr	r2, [pc, #100]	; (8000558 <MX_SPI2_Init+0x6c>)
 80004f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80004f6:	4b17      	ldr	r3, [pc, #92]	; (8000554 <MX_SPI2_Init+0x68>)
 80004f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80004fe:	4b15      	ldr	r3, [pc, #84]	; (8000554 <MX_SPI2_Init+0x68>)
 8000500:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000504:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000506:	4b13      	ldr	r3, [pc, #76]	; (8000554 <MX_SPI2_Init+0x68>)
 8000508:	2200      	movs	r2, #0
 800050a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800050c:	4b11      	ldr	r3, [pc, #68]	; (8000554 <MX_SPI2_Init+0x68>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <MX_SPI2_Init+0x68>)
 8000514:	2200      	movs	r2, #0
 8000516:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <MX_SPI2_Init+0x68>)
 800051a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800051e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <MX_SPI2_Init+0x68>)
 8000522:	2200      	movs	r2, #0
 8000524:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <MX_SPI2_Init+0x68>)
 8000528:	2200      	movs	r2, #0
 800052a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <MX_SPI2_Init+0x68>)
 800052e:	2200      	movs	r2, #0
 8000530:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <MX_SPI2_Init+0x68>)
 8000534:	2200      	movs	r2, #0
 8000536:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <MX_SPI2_Init+0x68>)
 800053a:	220a      	movs	r2, #10
 800053c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <MX_SPI2_Init+0x68>)
 8000540:	f002 f9e4 	bl	800290c <HAL_SPI_Init>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800054a:	f000 f943 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	200019ac 	.word	0x200019ac
 8000558:	40003800 	.word	0x40003800

0800055c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000562:	4a12      	ldr	r2, [pc, #72]	; (80005ac <MX_USART1_UART_Init+0x50>)
 8000564:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000568:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800056c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000582:	220c      	movs	r2, #12
 8000584:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000588:	2200      	movs	r2, #0
 800058a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 800058e:	2200      	movs	r2, #0
 8000590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000592:	4805      	ldr	r0, [pc, #20]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000594:	f003 f970 	bl	8003878 <HAL_UART_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800059e:	f000 f919 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20001ae0 	.word	0x20001ae0
 80005ac:	40013800 	.word	0x40013800

080005b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <MX_USART2_UART_Init+0x4c>)
 80005b6:	4a12      	ldr	r2, [pc, #72]	; (8000600 <MX_USART2_UART_Init+0x50>)
 80005b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <MX_USART2_UART_Init+0x4c>)
 80005bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <MX_USART2_UART_Init+0x4c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <MX_USART2_UART_Init+0x4c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ce:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <MX_USART2_UART_Init+0x4c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <MX_USART2_UART_Init+0x4c>)
 80005d6:	220c      	movs	r2, #12
 80005d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <MX_USART2_UART_Init+0x4c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <MX_USART2_UART_Init+0x4c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005e6:	4805      	ldr	r0, [pc, #20]	; (80005fc <MX_USART2_UART_Init+0x4c>)
 80005e8:	f003 f946 	bl	8003878 <HAL_UART_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005f2:	f000 f8ef 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20001b90 	.word	0x20001b90
 8000600:	40004400 	.word	0x40004400

08000604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	f107 0310 	add.w	r3, r7, #16
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000618:	4b3a      	ldr	r3, [pc, #232]	; (8000704 <MX_GPIO_Init+0x100>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a39      	ldr	r2, [pc, #228]	; (8000704 <MX_GPIO_Init+0x100>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b37      	ldr	r3, [pc, #220]	; (8000704 <MX_GPIO_Init+0x100>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f003 0310 	and.w	r3, r3, #16
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000630:	4b34      	ldr	r3, [pc, #208]	; (8000704 <MX_GPIO_Init+0x100>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a33      	ldr	r2, [pc, #204]	; (8000704 <MX_GPIO_Init+0x100>)
 8000636:	f043 0320 	orr.w	r3, r3, #32
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b31      	ldr	r3, [pc, #196]	; (8000704 <MX_GPIO_Init+0x100>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0320 	and.w	r3, r3, #32
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000648:	4b2e      	ldr	r3, [pc, #184]	; (8000704 <MX_GPIO_Init+0x100>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a2d      	ldr	r2, [pc, #180]	; (8000704 <MX_GPIO_Init+0x100>)
 800064e:	f043 0304 	orr.w	r3, r3, #4
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b2b      	ldr	r3, [pc, #172]	; (8000704 <MX_GPIO_Init+0x100>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f003 0304 	and.w	r3, r3, #4
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <MX_GPIO_Init+0x100>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a27      	ldr	r2, [pc, #156]	; (8000704 <MX_GPIO_Init+0x100>)
 8000666:	f043 0308 	orr.w	r3, r3, #8
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <MX_GPIO_Init+0x100>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0308 	and.w	r3, r3, #8
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_PIN_GPIO_Port, TEST_PIN_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067e:	4822      	ldr	r0, [pc, #136]	; (8000708 <MX_GPIO_Init+0x104>)
 8000680:	f001 fad9 	bl	8001c36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2101      	movs	r1, #1
 8000688:	4820      	ldr	r0, [pc, #128]	; (800070c <MX_GPIO_Init+0x108>)
 800068a:	f001 fad4 	bl	8001c36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_PIN_Pin */
  GPIO_InitStruct.Pin = TEST_PIN_Pin;
 800068e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2302      	movs	r3, #2
 800069e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_PIN_GPIO_Port, &GPIO_InitStruct);
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	4619      	mov	r1, r3
 80006a6:	4818      	ldr	r0, [pc, #96]	; (8000708 <MX_GPIO_Init+0x104>)
 80006a8:	f001 f954 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80006ac:	2301      	movs	r3, #1
 80006ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2302      	movs	r3, #2
 80006ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	4619      	mov	r1, r3
 80006c2:	4812      	ldr	r0, [pc, #72]	; (800070c <MX_GPIO_Init+0x108>)
 80006c4:	f001 f946 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pins : BME_POWER_KEY_Pin PB14 BUTTON_DOWN_Pin BUTTON_UP_Pin 
                           BUTTON_LEFT_Pin BUTTON_RIGHT_Pin */
  GPIO_InitStruct.Pin = BME_POWER_KEY_Pin|GPIO_PIN_14|BUTTON_DOWN_Pin|BUTTON_UP_Pin 
 80006c8:	f244 3332 	movw	r3, #17202	; 0x4332
 80006cc:	613b      	str	r3, [r7, #16]
                          |BUTTON_LEFT_Pin|BUTTON_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d6:	f107 0310 	add.w	r3, r7, #16
 80006da:	4619      	mov	r1, r3
 80006dc:	480b      	ldr	r0, [pc, #44]	; (800070c <MX_GPIO_Init+0x108>)
 80006de:	f001 f939 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_ENTER_Pin */
  GPIO_InitStruct.Pin = BUTTON_ENTER_Pin;
 80006e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_ENTER_GPIO_Port, &GPIO_InitStruct);
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	4619      	mov	r1, r3
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <MX_GPIO_Init+0x10c>)
 80006f8:	f001 f92c 	bl	8001954 <HAL_GPIO_Init>

}
 80006fc:	bf00      	nop
 80006fe:	3720      	adds	r7, #32
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40021000 	.word	0x40021000
 8000708:	40011000 	.word	0x40011000
 800070c:	40010c00 	.word	0x40010c00
 8000710:	40010800 	.word	0x40010800

08000714 <StartTestTask>:

/* USER CODE BEGIN 4 */
void StartTestTask(void *argument)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1000);
 800071c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000720:	f003 fa96 	bl	8003c50 <osDelay>
    HAL_GPIO_TogglePin(TEST_PIN_GPIO_Port, TEST_PIN_Pin);
 8000724:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000728:	4801      	ldr	r0, [pc, #4]	; (8000730 <StartTestTask+0x1c>)
 800072a:	f001 fa9c 	bl	8001c66 <HAL_GPIO_TogglePin>
    osDelay(1000);
 800072e:	e7f5      	b.n	800071c <StartTestTask+0x8>
 8000730:	40011000 	.word	0x40011000

08000734 <StartRadioTask>:

  }
}

void StartRadioTask(void *argument)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	uint8_t buf[16];
	uint8_t len = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	72fb      	strb	r3, [r7, #11]
	for(;;)
	{
		if(si4432_receive_AN415(buf, &len))
 8000740:	f107 020b 	add.w	r2, r7, #11
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	4611      	mov	r1, r2
 800074a:	4618      	mov	r0, r3
 800074c:	f000 fa56 	bl	8000bfc <si4432_receive_AN415>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d019      	beq.n	800078a <StartRadioTask+0x56>
		{
			_DEBUG_PRINT_MAIN("PL = %u\n", len);
 8000756:	7afb      	ldrb	r3, [r7, #11]
 8000758:	4619      	mov	r1, r3
 800075a:	480e      	ldr	r0, [pc, #56]	; (8000794 <StartRadioTask+0x60>)
 800075c:	f005 fe3c 	bl	80063d8 <iprintf>
			for(int i = 0; i < sizeof(buf); i++)
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
 8000764:	e00b      	b.n	800077e <StartRadioTask+0x4a>
			{
				_DEBUG_PRINT_MAIN("%u\n", buf[i]);
 8000766:	f107 020c 	add.w	r2, r7, #12
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	4413      	add	r3, r2
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4619      	mov	r1, r3
 8000772:	4809      	ldr	r0, [pc, #36]	; (8000798 <StartRadioTask+0x64>)
 8000774:	f005 fe30 	bl	80063d8 <iprintf>
			for(int i = 0; i < sizeof(buf); i++)
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	3301      	adds	r3, #1
 800077c:	61fb      	str	r3, [r7, #28]
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	2b0f      	cmp	r3, #15
 8000782:	d9f0      	bls.n	8000766 <StartRadioTask+0x32>
			}
			_DEBUG_PRINT_MAIN("\n");
 8000784:	200a      	movs	r0, #10
 8000786:	f005 fe3f 	bl	8006408 <putchar>
		}
		osDelay(1);
 800078a:	2001      	movs	r0, #1
 800078c:	f003 fa60 	bl	8003c50 <osDelay>
		if(si4432_receive_AN415(buf, &len))
 8000790:	e7d6      	b.n	8000740 <StartRadioTask+0xc>
 8000792:	bf00      	nop
 8000794:	0800735c 	.word	0x0800735c
 8000798:	08007368 	.word	0x08007368

0800079c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80007a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a8:	f003 fa52 	bl	8003c50 <osDelay>
 80007ac:	e7fa      	b.n	80007a4 <StartDefaultTask+0x8>
	...

080007b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d101      	bne.n	80007c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007c2:	f000 fdc1 	bl	8001348 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40012c00 	.word	0x40012c00

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <RTC_Init>:

#define RTC_TIMEOUT 1000u
#define LSE_FREQ 	32768

uint32_t RTC_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
    uint32_t prescaler = 0U;
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]

    RCC->APB1ENR |= RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN;
 80007ea:	4b45      	ldr	r3, [pc, #276]	; (8000900 <RTC_Init+0x120>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	4a44      	ldr	r2, [pc, #272]	; (8000900 <RTC_Init+0x120>)
 80007f0:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 80007f4:	61d3      	str	r3, [r2, #28]
    PWR->CR |=  PWR_CR_DBP;
 80007f6:	4b43      	ldr	r3, [pc, #268]	; (8000904 <RTC_Init+0x124>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a42      	ldr	r2, [pc, #264]	; (8000904 <RTC_Init+0x124>)
 80007fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000800:	6013      	str	r3, [r2, #0]

    /* Waiting for synchro */
    RTC->CRL &= ~RTC_CRL_RSF;
 8000802:	4b41      	ldr	r3, [pc, #260]	; (8000908 <RTC_Init+0x128>)
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	4a40      	ldr	r2, [pc, #256]	; (8000908 <RTC_Init+0x128>)
 8000808:	f023 0308 	bic.w	r3, r3, #8
 800080c:	6053      	str	r3, [r2, #4]


    uint32_t tickstart = 0U;
 800080e:	2300      	movs	r3, #0
 8000810:	603b      	str	r3, [r7, #0]


    tickstart = HAL_GetTick();
 8000812:	f000 fdab 	bl	800136c <HAL_GetTick>
 8000816:	6038      	str	r0, [r7, #0]

    /* Wait the registers to be synchronised */
    while ((RTC->CRL & RTC_CRL_RSF) == 0u)
 8000818:	e009      	b.n	800082e <RTC_Init+0x4e>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT)
 800081a:	f000 fda7 	bl	800136c <HAL_GetTick>
 800081e:	4602      	mov	r2, r0
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	1ad3      	subs	r3, r2, r3
 8000824:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000828:	d901      	bls.n	800082e <RTC_Init+0x4e>
      {
        return 2;
 800082a:	2302      	movs	r3, #2
 800082c:	e063      	b.n	80008f6 <RTC_Init+0x116>
    while ((RTC->CRL & RTC_CRL_RSF) == 0u)
 800082e:	4b36      	ldr	r3, [pc, #216]	; (8000908 <RTC_Init+0x128>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	f003 0308 	and.w	r3, r3, #8
 8000836:	2b00      	cmp	r3, #0
 8000838:	d0ef      	beq.n	800081a <RTC_Init+0x3a>
      }
    }


    if(BKP->DR1 == RCT_MAGIC_WORD)
 800083a:	4b34      	ldr	r3, [pc, #208]	; (800090c <RTC_Init+0x12c>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	f64d 62ad 	movw	r2, #57005	; 0xdead
 8000842:	4293      	cmp	r3, r2
 8000844:	d101      	bne.n	800084a <RTC_Init+0x6a>
    {
      return 0;
 8000846:	2300      	movs	r3, #0
 8000848:	e055      	b.n	80008f6 <RTC_Init+0x116>
    }


    tickstart = HAL_GetTick();
 800084a:	f000 fd8f 	bl	800136c <HAL_GetTick>
 800084e:	6038      	str	r0, [r7, #0]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((RTC->CRL & RTC_CRL_RTOFF) == 0u)
 8000850:	e009      	b.n	8000866 <RTC_Init+0x86>
    {
        if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT)
 8000852:	f000 fd8b 	bl	800136c <HAL_GetTick>
 8000856:	4602      	mov	r2, r0
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000860:	d901      	bls.n	8000866 <RTC_Init+0x86>
        {
            return 2;
 8000862:	2302      	movs	r3, #2
 8000864:	e047      	b.n	80008f6 <RTC_Init+0x116>
    while ((RTC->CRL & RTC_CRL_RTOFF) == 0u)
 8000866:	4b28      	ldr	r3, [pc, #160]	; (8000908 <RTC_Init+0x128>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	f003 0320 	and.w	r3, r3, #32
 800086e:	2b00      	cmp	r3, #0
 8000870:	d0ef      	beq.n	8000852 <RTC_Init+0x72>
        }
    }


    /* Disable the write protection for RTC registers */
    RTC->CRL |= RTC_CRL_CNF;
 8000872:	4b25      	ldr	r3, [pc, #148]	; (8000908 <RTC_Init+0x128>)
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	4a24      	ldr	r2, [pc, #144]	; (8000908 <RTC_Init+0x128>)
 8000878:	f043 0310 	orr.w	r3, r3, #16
 800087c:	6053      	str	r3, [r2, #4]

    /* Set Initialization mode */


    /* Clear Flags Bits */
    RTC->CRL &= ~(RTC_CRL_OWF | RTC_CRL_ALRF | RTC_CRL_SECF);
 800087e:	4b22      	ldr	r3, [pc, #136]	; (8000908 <RTC_Init+0x128>)
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	4a21      	ldr	r2, [pc, #132]	; (8000908 <RTC_Init+0x128>)
 8000884:	f023 0307 	bic.w	r3, r3, #7
 8000888:	6053      	str	r3, [r2, #4]

    prescaler = LSE_FREQ - 1U;
 800088a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800088e:	607b      	str	r3, [r7, #4]

    /* Configure the RTC_PRLH / RTC_PRLL */
    RTC->PRLH |= (prescaler >> 16U);
 8000890:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <RTC_Init+0x128>)
 8000892:	689a      	ldr	r2, [r3, #8]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	0c1b      	lsrs	r3, r3, #16
 8000898:	491b      	ldr	r1, [pc, #108]	; (8000908 <RTC_Init+0x128>)
 800089a:	4313      	orrs	r3, r2
 800089c:	608b      	str	r3, [r1, #8]
    RTC->PRLL |= (prescaler & 0x0000ffff);
 800089e:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <RTC_Init+0x128>)
 80008a0:	68da      	ldr	r2, [r3, #12]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	4918      	ldr	r1, [pc, #96]	; (8000908 <RTC_Init+0x128>)
 80008a8:	4313      	orrs	r3, r2
 80008aa:	60cb      	str	r3, [r1, #12]

    RTC->CNTH = 0;
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <RTC_Init+0x128>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
    RTC->CNTL = 0;
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <RTC_Init+0x128>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]

    BKP->DR1 = RCT_MAGIC_WORD;
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <RTC_Init+0x12c>)
 80008ba:	f64d 62ad 	movw	r2, #57005	; 0xdead
 80008be:	605a      	str	r2, [r3, #4]

    /* Wait for synchro */
    RTC->CRL &= ~(1 << RTC_CRL_CNF);
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <RTC_Init+0x128>)
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	4a10      	ldr	r2, [pc, #64]	; (8000908 <RTC_Init+0x128>)
 80008c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008ca:	6053      	str	r3, [r2, #4]
    tickstart = HAL_GetTick();
 80008cc:	f000 fd4e 	bl	800136c <HAL_GetTick>
 80008d0:	6038      	str	r0, [r7, #0]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((RTC->CRL & RTC_CRL_RTOFF) == 0u)
 80008d2:	e009      	b.n	80008e8 <RTC_Init+0x108>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT)
 80008d4:	f000 fd4a 	bl	800136c <HAL_GetTick>
 80008d8:	4602      	mov	r2, r0
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008e2:	d901      	bls.n	80008e8 <RTC_Init+0x108>
      {
         return 2;
 80008e4:	2302      	movs	r3, #2
 80008e6:	e006      	b.n	80008f6 <RTC_Init+0x116>
    while ((RTC->CRL & RTC_CRL_RTOFF) == 0u)
 80008e8:	4b07      	ldr	r3, [pc, #28]	; (8000908 <RTC_Init+0x128>)
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	f003 0320 	and.w	r3, r3, #32
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d0ef      	beq.n	80008d4 <RTC_Init+0xf4>
    }




    return 0;
 80008f4:	2300      	movs	r3, #0

}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000
 8000904:	40007000 	.word	0x40007000
 8000908:	40002800 	.word	0x40002800
 800090c:	40006c00 	.word	0x40006c00

08000910 <si4432_select_spi>:
volatile uint8_t Status1 = 0;
volatile uint8_t Status2 = 0;
uint8_t PL_Length = 0;

void si4432_select_spi(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SELPORT, SELPIN, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	2101      	movs	r1, #1
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <si4432_select_spi+0x14>)
 800091a:	f001 f98c 	bl	8001c36 <HAL_GPIO_WritePin>
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40010c00 	.word	0x40010c00

08000928 <si4432_release_spi>:

void si4432_release_spi(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SELPORT, SELPIN, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	2101      	movs	r1, #1
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <si4432_release_spi+0x14>)
 8000932:	f001 f980 	bl	8001c36 <HAL_GPIO_WritePin>
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40010c00 	.word	0x40010c00

08000940 <si4432_get_irq_pin>:

GPIO_PinState si4432_get_irq_pin(void){
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(IRQPORT, IRQPIN);
 8000944:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000948:	4802      	ldr	r0, [pc, #8]	; (8000954 <si4432_get_irq_pin+0x14>)
 800094a:	f001 f95d 	bl	8001c08 <HAL_GPIO_ReadPin>
 800094e:	4603      	mov	r3, r0
}
 8000950:	4618      	mov	r0, r3
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40010c00 	.word	0x40010c00

08000958 <si4432_write_register>:

void si4432_write_register(uint8_t reg, uint8_t value)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	460a      	mov	r2, r1
 8000962:	71fb      	strb	r3, [r7, #7]
 8000964:	4613      	mov	r3, r2
 8000966:	71bb      	strb	r3, [r7, #6]
	si4432_select_spi();
 8000968:	f7ff ffd2 	bl	8000910 <si4432_select_spi>

    uint8_t data[2];

    data[0] = (reg|0x80);
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000972:	b2db      	uxtb	r3, r3
 8000974:	733b      	strb	r3, [r7, #12]
    data[1] = value;
 8000976:	79bb      	ldrb	r3, [r7, #6]
 8000978:	737b      	strb	r3, [r7, #13]

    HAL_SPI_Transmit(&hspi1, data, sizeof(data), SI4432_SPI_DEFAULT_TIMEOUT);
 800097a:	f107 010c 	add.w	r1, r7, #12
 800097e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000982:	2202      	movs	r2, #2
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <si4432_write_register+0x40>)
 8000986:	f002 f845 	bl	8002a14 <HAL_SPI_Transmit>

    si4432_release_spi();
 800098a:	f7ff ffcd 	bl	8000928 <si4432_release_spi>
}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20001b38 	.word	0x20001b38

0800099c <si4432_read_register>:

uint8_t si4432_read_register (uint8_t reg)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
    uint8_t result;
    si4432_select_spi();
 80009a6:	f7ff ffb3 	bl	8000910 <si4432_select_spi>

    HAL_SPI_Transmit(&hspi1, &reg, sizeof(reg), SI4432_SPI_DEFAULT_TIMEOUT);
 80009aa:	1df9      	adds	r1, r7, #7
 80009ac:	f242 7310 	movw	r3, #10000	; 0x2710
 80009b0:	2201      	movs	r2, #1
 80009b2:	4809      	ldr	r0, [pc, #36]	; (80009d8 <si4432_read_register+0x3c>)
 80009b4:	f002 f82e 	bl	8002a14 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &result, sizeof(result), SI4432_SPI_DEFAULT_TIMEOUT);
 80009b8:	f107 010f 	add.w	r1, r7, #15
 80009bc:	f242 7310 	movw	r3, #10000	; 0x2710
 80009c0:	2201      	movs	r2, #1
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <si4432_read_register+0x3c>)
 80009c4:	f002 f962 	bl	8002c8c <HAL_SPI_Receive>

    si4432_release_spi();
 80009c8:	f7ff ffae 	bl	8000928 <si4432_release_spi>

	return result;
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20001b38 	.word	0x20001b38

080009dc <si4432_power_on>:

void si4432_power_on(void){
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <si4432_reset>:
void si4432_power_off(void){

}

void si4432_reset(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
	uint32_t timer;
    si4432_power_on();
 80009ee:	f7ff fff5 	bl	80009dc <si4432_power_on>

	//Software reset
	si4432_write_register(Operating_Function_Control1, 0x80);
 80009f2:	2180      	movs	r1, #128	; 0x80
 80009f4:	2007      	movs	r0, #7
 80009f6:	f7ff ffaf 	bl	8000958 <si4432_write_register>

	timer = HAL_GetTick();
 80009fa:	f000 fcb7 	bl	800136c <HAL_GetTick>
 80009fe:	6078      	str	r0, [r7, #4]
	while(si4432_get_irq_pin() == GPIO_PIN_SET && HAL_GetTick() - timer < SI4432_IRQ_DEFAULT_TIMEOUT );
 8000a00:	bf00      	nop
 8000a02:	f7ff ff9d 	bl	8000940 <si4432_get_irq_pin>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d107      	bne.n	8000a1c <si4432_reset+0x34>
 8000a0c:	f000 fcae 	bl	800136c <HAL_GetTick>
 8000a10:	4602      	mov	r2, r0
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a1a:	d3f2      	bcc.n	8000a02 <si4432_reset+0x1a>

	//read statuses
	Status1 = si4432_read_register(Interrupt_Status1);
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f7ff ffbd 	bl	800099c <si4432_read_register>
 8000a22:	4603      	mov	r3, r0
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <si4432_reset+0x58>)
 8000a28:	701a      	strb	r2, [r3, #0]
	Status2 = si4432_read_register(Interrupt_Status2);
 8000a2a:	2004      	movs	r0, #4
 8000a2c:	f7ff ffb6 	bl	800099c <si4432_read_register>
 8000a30:	4603      	mov	r3, r0
 8000a32:	461a      	mov	r2, r3
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <si4432_reset+0x5c>)
 8000a36:	701a      	strb	r2, [r3, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000090 	.word	0x20000090
 8000a44:	20000091 	.word	0x20000091

08000a48 <si4432_init_AN415>:


void si4432_init_AN415(void){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	//Set the Center Frequency to 915 MHz
	si4432_write_register(Frequency_Band_Select, 0x75);
 8000a4c:	2175      	movs	r1, #117	; 0x75
 8000a4e:	2075      	movs	r0, #117	; 0x75
 8000a50:	f7ff ff82 	bl	8000958 <si4432_write_register>
	si4432_write_register(Nominal_Carrier_Frequency1, 0xbb);
 8000a54:	21bb      	movs	r1, #187	; 0xbb
 8000a56:	2076      	movs	r0, #118	; 0x76
 8000a58:	f7ff ff7e 	bl	8000958 <si4432_write_register>
	si4432_write_register(Nominal_Carrier_Frequency0, 0x80);
 8000a5c:	2180      	movs	r1, #128	; 0x80
 8000a5e:	2077      	movs	r0, #119	; 0x77
 8000a60:	f7ff ff7a 	bl	8000958 <si4432_write_register>

	//Set the Desired TX data rate (9.6 kbps)
	si4432_write_register(TX_Data_Rate1, 0x4e);
 8000a64:	214e      	movs	r1, #78	; 0x4e
 8000a66:	206e      	movs	r0, #110	; 0x6e
 8000a68:	f7ff ff76 	bl	8000958 <si4432_write_register>
	si4432_write_register(TX_Data_Rate0, 0xa5);
 8000a6c:	21a5      	movs	r1, #165	; 0xa5
 8000a6e:	206f      	movs	r0, #111	; 0x6f
 8000a70:	f7ff ff72 	bl	8000958 <si4432_write_register>
	si4432_write_register(Modulation_Mode_Control1, 0x2c);
 8000a74:	212c      	movs	r1, #44	; 0x2c
 8000a76:	2070      	movs	r0, #112	; 0x70
 8000a78:	f7ff ff6e 	bl	8000958 <si4432_write_register>

	//set the TX power
	si4432_write_register(TX_Power, 0x1f);
 8000a7c:	211f      	movs	r1, #31
 8000a7e:	206d      	movs	r0, #109	; 0x6d
 8000a80:	f7ff ff6a 	bl	8000958 <si4432_write_register>

	//Set desired TX deviation (+-45 kHz)
	si4432_write_register(Frequency_Deviation, 0x48);
 8000a84:	2148      	movs	r1, #72	; 0x48
 8000a86:	2072      	movs	r0, #114	; 0x72
 8000a88:	f7ff ff66 	bl	8000958 <si4432_write_register>

	//set the modem parameters according to the exel calculator(parameters: 9.6 kbps, deviation: 45 kHz, channel filter BW: 102.1 kHz
	si4432_write_register(IF_Filter_Bandwidth, 0x1e);
 8000a8c:	211e      	movs	r1, #30
 8000a8e:	201c      	movs	r0, #28
 8000a90:	f7ff ff62 	bl	8000958 <si4432_write_register>
	si4432_write_register(Clock_Recovery_Oversampling_Ratio, 0xD0);  //write 0xD0 to the Clock Recovery Oversampling Ratio register
 8000a94:	21d0      	movs	r1, #208	; 0xd0
 8000a96:	2020      	movs	r0, #32
 8000a98:	f7ff ff5e 	bl	8000958 <si4432_write_register>
	si4432_write_register(Clock_Recovery_Offset2, 0x00);    //write 0x00 to the Clock Recovery Offset 2 register
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2021      	movs	r0, #33	; 0x21
 8000aa0:	f7ff ff5a 	bl	8000958 <si4432_write_register>
	si4432_write_register(Clock_Recovery_Offset1, 0x9D);        //write 0x9D to the Clock Recovery Offset 1 register
 8000aa4:	219d      	movs	r1, #157	; 0x9d
 8000aa6:	2022      	movs	r0, #34	; 0x22
 8000aa8:	f7ff ff56 	bl	8000958 <si4432_write_register>
	si4432_write_register(Clock_Recovery_Offset0, 0x49);                                                           //write 0x49 to the Clock Recovery Offset 0 register
 8000aac:	2149      	movs	r1, #73	; 0x49
 8000aae:	2023      	movs	r0, #35	; 0x23
 8000ab0:	f7ff ff52 	bl	8000958 <si4432_write_register>
	si4432_write_register(Clock_Recovery_Timing_Loop_Gain1, 0x00);                                                           //write 0x00 to the Clock Recovery Timing Loop Gain 1 register
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2024      	movs	r0, #36	; 0x24
 8000ab8:	f7ff ff4e 	bl	8000958 <si4432_write_register>
	si4432_write_register(Clock_Recovery_Timing_Loop_Gain0, 0x24);                                                           //write 0x24 to the Clock Recovery Timing Loop Gain 0 register
 8000abc:	2124      	movs	r1, #36	; 0x24
 8000abe:	2025      	movs	r0, #37	; 0x25
 8000ac0:	f7ff ff4a 	bl	8000958 <si4432_write_register>
	si4432_write_register(AFC_Loop_Gearshift_Override, 0x40);                                                           //write 0x40 to the AFC Loop Gearshift Override register
 8000ac4:	2140      	movs	r1, #64	; 0x40
 8000ac6:	201d      	movs	r0, #29
 8000ac8:	f7ff ff46 	bl	8000958 <si4432_write_register>
	si4432_write_register(AFC_Timing_Control, 0x0A);                                                           //write 0x0A to the AFC Timing Control register
 8000acc:	210a      	movs	r1, #10
 8000ace:	201e      	movs	r0, #30
 8000ad0:	f7ff ff42 	bl	8000958 <si4432_write_register>
	si4432_write_register(AFC_Limiter, 0x20);                                                           //write 0x20 to the AFC Limiter register
 8000ad4:	2120      	movs	r1, #32
 8000ad6:	202a      	movs	r0, #42	; 0x2a
 8000ad8:	f7ff ff3e 	bl	8000958 <si4432_write_register>

	//Set the Preamble length to 5 bytes
	si4432_write_register(Preamble_Length, 0x0a);
 8000adc:	210a      	movs	r1, #10
 8000ade:	2034      	movs	r0, #52	; 0x34
 8000ae0:	f7ff ff3a 	bl	8000958 <si4432_write_register>

	 //set preamble detection threshold to 20bits
	si4432_write_register(0x35, 0x2A);                                                       //write 0x2A to the Preamble Detection Control  register
 8000ae4:	212a      	movs	r1, #42	; 0x2a
 8000ae6:	2035      	movs	r0, #53	; 0x35
 8000ae8:	f7ff ff36 	bl	8000958 <si4432_write_register>

	//Disable header bytes; set variable packet length (the length of the payload is defined by the
	//received packet length field of the packet); set the synch word to two bytes long
	si4432_write_register(Header_Control2, 0x02);
 8000aec:	2102      	movs	r1, #2
 8000aee:	2033      	movs	r0, #51	; 0x33
 8000af0:	f7ff ff32 	bl	8000958 <si4432_write_register>

	//Set the Sync Word Pattern
	si4432_write_register(Sync_Word3, 0x2D);
 8000af4:	212d      	movs	r1, #45	; 0x2d
 8000af6:	2036      	movs	r0, #54	; 0x36
 8000af8:	f7ff ff2e 	bl	8000958 <si4432_write_register>
	si4432_write_register(Sync_Word2, 0xD4);
 8000afc:	21d4      	movs	r1, #212	; 0xd4
 8000afe:	2037      	movs	r0, #55	; 0x37
 8000b00:	f7ff ff2a 	bl	8000958 <si4432_write_register>

	//enable the TX packet handler and CRC
	si4432_write_register(Data_Access_Control, 0x8d);
 8000b04:	218d      	movs	r1, #141	; 0x8d
 8000b06:	2030      	movs	r0, #48	; 0x30
 8000b08:	f7ff ff26 	bl	8000958 <si4432_write_register>
	si4432_write_register(Header_Control1, 0x00);
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2032      	movs	r0, #50	; 0x32
 8000b10:	f7ff ff22 	bl	8000958 <si4432_write_register>

	//enable FIFO mode and GFSK modulation
	si4432_write_register(Modulation_Mode_Control2, 0x63);
 8000b14:	2163      	movs	r1, #99	; 0x63
 8000b16:	2071      	movs	r0, #113	; 0x71
 8000b18:	f7ff ff1e 	bl	8000958 <si4432_write_register>

	//set the TX FIFO almost empty threshold to 10 bytes
	si4432_write_register(0x7D, 0x01);
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	207d      	movs	r0, #125	; 0x7d
 8000b20:	f7ff ff1a 	bl	8000958 <si4432_write_register>
	//set the RX FIFO almost full threshold to 54 bytes
	si4432_write_register(0x7E, RX_FIFO_ALMOST_FULL_TRESHOLD);
 8000b24:	2108      	movs	r1, #8
 8000b26:	207e      	movs	r0, #126	; 0x7e
 8000b28:	f7ff ff16 	bl	8000958 <si4432_write_register>

	//Configure control to RF Switch
	si4432_write_register(GPIO1_Configuration, 0x15);//TX state
 8000b2c:	2115      	movs	r1, #21
 8000b2e:	200c      	movs	r0, #12
 8000b30:	f7ff ff12 	bl	8000958 <si4432_write_register>
	si4432_write_register(GPIO2_Configuration, 0x12);//RX state
 8000b34:	2112      	movs	r1, #18
 8000b36:	200d      	movs	r0, #13
 8000b38:	f7ff ff0e 	bl	8000958 <si4432_write_register>

	//set AGC Override1 Register
	si4432_write_register(AGC_Override1, 0x60);
 8000b3c:	2160      	movs	r1, #96	; 0x60
 8000b3e:	2069      	movs	r0, #105	; 0x69
 8000b40:	f7ff ff0a 	bl	8000958 <si4432_write_register>
	//set Crystal Oscillator Load Capacitance register
	si4432_write_register(Crystal_Oscillator_Load_Capacitance, 0xb7);
 8000b44:	21b7      	movs	r1, #183	; 0xb7
 8000b46:	2009      	movs	r0, #9
 8000b48:	f7ff ff06 	bl	8000958 <si4432_write_register>
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <si4432_init_RX_AN415>:

    Status1 = si4432_read_register(Interrupt_Status1);
    Status2 = si4432_read_register(Interrupt_Status2);
}

void si4432_init_RX_AN415(void){
 8000b50:	b5b0      	push	{r4, r5, r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	si4432_init_AN415();
 8000b54:	f7ff ff78 	bl	8000a48 <si4432_init_AN415>

	//enable low bat and enable the receiver chain
	si4432_write_register(Operating_Function_Control1, 0x05);
 8000b58:	2105      	movs	r1, #5
 8000b5a:	2007      	movs	r0, #7
 8000b5c:	f7ff fefc 	bl	8000958 <si4432_write_register>

    Status1 = si4432_read_register(Interrupt_Status1);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f7ff ff1b 	bl	800099c <si4432_read_register>
 8000b66:	4603      	mov	r3, r0
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b20      	ldr	r3, [pc, #128]	; (8000bec <si4432_init_RX_AN415+0x9c>)
 8000b6c:	701a      	strb	r2, [r3, #0]
    Status2 = si4432_read_register(Interrupt_Status2);
 8000b6e:	2004      	movs	r0, #4
 8000b70:	f7ff ff14 	bl	800099c <si4432_read_register>
 8000b74:	4603      	mov	r3, r0
 8000b76:	461a      	mov	r2, r3
 8000b78:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <si4432_init_RX_AN415+0xa0>)
 8000b7a:	701a      	strb	r2, [r3, #0]

    DEBUG_SI4432_PRINT("S1 = 0x%X, S2 = 0x%X\n", Status1, Status2);
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <si4432_init_RX_AN415+0x9c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	4619      	mov	r1, r3
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <si4432_init_RX_AN415+0xa0>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4819      	ldr	r0, [pc, #100]	; (8000bf4 <si4432_init_RX_AN415+0xa4>)
 8000b8e:	f005 fc23 	bl	80063d8 <iprintf>

    si4432_write_register(Interrupt_Enable1, 0x13);
 8000b92:	2113      	movs	r1, #19
 8000b94:	2005      	movs	r0, #5
 8000b96:	f7ff fedf 	bl	8000958 <si4432_write_register>
    si4432_write_register(Interrupt_Enable2, 0x00);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2006      	movs	r0, #6
 8000b9e:	f7ff fedb 	bl	8000958 <si4432_write_register>

    //default 0b00011110
    si4432_write_register(RSSI_Threshold_For_Clear_Channel_Indicator, 0x20);
 8000ba2:	2120      	movs	r1, #32
 8000ba4:	2027      	movs	r0, #39	; 0x27
 8000ba6:	f7ff fed7 	bl	8000958 <si4432_write_register>

    Status1 = si4432_read_register(Interrupt_Status1);
 8000baa:	2003      	movs	r0, #3
 8000bac:	f7ff fef6 	bl	800099c <si4432_read_register>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <si4432_init_RX_AN415+0x9c>)
 8000bb6:	701a      	strb	r2, [r3, #0]
    Status2 = si4432_read_register(Interrupt_Status2);
 8000bb8:	2004      	movs	r0, #4
 8000bba:	f7ff feef 	bl	800099c <si4432_read_register>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <si4432_init_RX_AN415+0xa0>)
 8000bc4:	701a      	strb	r2, [r3, #0]

    DEBUG_SI4432_PRINT("S1 = 0x%X, S2 = 0x%X, V = %u\n", Status1, Status2, si4432_get_battery_voltage());
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <si4432_init_RX_AN415+0x9c>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	461c      	mov	r4, r3
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <si4432_init_RX_AN415+0xa0>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	461d      	mov	r5, r3
 8000bd6:	f000 f895 	bl	8000d04 <si4432_get_battery_voltage>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	462a      	mov	r2, r5
 8000bde:	4621      	mov	r1, r4
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <si4432_init_RX_AN415+0xa8>)
 8000be2:	f005 fbf9 	bl	80063d8 <iprintf>


}
 8000be6:	bf00      	nop
 8000be8:	bdb0      	pop	{r4, r5, r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000090 	.word	0x20000090
 8000bf0:	20000091 	.word	0x20000091
 8000bf4:	0800736c 	.word	0x0800736c
 8000bf8:	08007384 	.word	0x08007384

08000bfc <si4432_receive_AN415>:


bool si4432_receive_AN415(uint8_t * buf, uint8_t * len){
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
	uint8_t length = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	73bb      	strb	r3, [r7, #14]
	uint8_t temp8 = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73fb      	strb	r3, [r7, #15]
	uint8_t pointer = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	737b      	strb	r3, [r7, #13]

	if(si4432_get_irq_pin() == GPIO_PIN_RESET)
 8000c12:	f7ff fe95 	bl	8000940 <si4432_get_irq_pin>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d16a      	bne.n	8000cf2 <si4432_receive_AN415+0xf6>
	{
		//read interrupt status registers
		Status1 = si4432_read_register(Interrupt_Status1);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f7ff febd 	bl	800099c <si4432_read_register>
 8000c22:	4603      	mov	r3, r0
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <si4432_receive_AN415+0x100>)
 8000c28:	701a      	strb	r2, [r3, #0]
		Status2 = si4432_read_register(Interrupt_Status2);                                            //read the Interrupt Status2 register
 8000c2a:	2004      	movs	r0, #4
 8000c2c:	f7ff feb6 	bl	800099c <si4432_read_register>
 8000c30:	4603      	mov	r3, r0
 8000c32:	461a      	mov	r2, r3
 8000c34:	4b32      	ldr	r3, [pc, #200]	; (8000d00 <si4432_receive_AN415+0x104>)
 8000c36:	701a      	strb	r2, [r3, #0]

		//CRC Error interrupt occured
		if( (Status1 & 0x01) == 0x01 )
 8000c38:	4b30      	ldr	r3, [pc, #192]	; (8000cfc <si4432_receive_AN415+0x100>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d107      	bne.n	8000c56 <si4432_receive_AN415+0x5a>
		{
			//reset the RX FIFO
			si4432_write_register(Operating_Function_Control2, 0x02); //write 0x02 to the Operating Function Control 2 register
 8000c46:	2102      	movs	r1, #2
 8000c48:	2008      	movs	r0, #8
 8000c4a:	f7ff fe85 	bl	8000958 <si4432_write_register>
			si4432_write_register(Operating_Function_Control2, 0x00); //write 0x00 to the Operating Function Control 2 register
 8000c4e:	2100      	movs	r1, #0
 8000c50:	2008      	movs	r0, #8
 8000c52:	f7ff fe81 	bl	8000958 <si4432_write_register>
			pointer = pointer + RX_FIFO_ALMOST_FULL_TRESHOLD;
		}*/


		/*packet received interrupt occured*/
		if( (Status1 & 0x02) == 0x02 || (Status1 & 0x10) == 0x10 )
 8000c56:	4b29      	ldr	r3, [pc, #164]	; (8000cfc <si4432_receive_AN415+0x100>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	f003 0302 	and.w	r3, r3, #2
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d006      	beq.n	8000c72 <si4432_receive_AN415+0x76>
 8000c64:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <si4432_receive_AN415+0x100>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	f003 0310 	and.w	r3, r3, #16
 8000c6e:	2b10      	cmp	r3, #16
 8000c70:	d13f      	bne.n	8000cf2 <si4432_receive_AN415+0xf6>
		{
			//disable the receiver chain
			si4432_write_register(Operating_Function_Control2, 0x01);
 8000c72:	2101      	movs	r1, #1
 8000c74:	2008      	movs	r0, #8
 8000c76:	f7ff fe6f 	bl	8000958 <si4432_write_register>

			//Read the length of the received payload
			length = si4432_read_register(Received_Packet_Length);                                             //read the Received Packet Length register
 8000c7a:	204b      	movs	r0, #75	; 0x4b
 8000c7c:	f7ff fe8e 	bl	800099c <si4432_read_register>
 8000c80:	4603      	mov	r3, r0
 8000c82:	73bb      	strb	r3, [r7, #14]

			//get the remaining 32bytes from the RX FIFO
			for(temp8 = 0; temp8 < (length > SI4432_PLL ? SI4432_PLL : length); temp8++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	73fb      	strb	r3, [r7, #15]
 8000c88:	e00a      	b.n	8000ca0 <si4432_receive_AN415+0xa4>
			{
				buf[temp8] = si4432_read_register(FIFO_Access);
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	18d4      	adds	r4, r2, r3
 8000c90:	207f      	movs	r0, #127	; 0x7f
 8000c92:	f7ff fe83 	bl	800099c <si4432_read_register>
 8000c96:	4603      	mov	r3, r0
 8000c98:	7023      	strb	r3, [r4, #0]
			for(temp8 = 0; temp8 < (length > SI4432_PLL ? SI4432_PLL : length); temp8++)
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	7bbb      	ldrb	r3, [r7, #14]
 8000ca2:	2b08      	cmp	r3, #8
 8000ca4:	bf28      	it	cs
 8000ca6:	2308      	movcs	r3, #8
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	7bfa      	ldrb	r2, [r7, #15]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d3ec      	bcc.n	8000c8a <si4432_receive_AN415+0x8e>
			}

			*len = length;
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	7bba      	ldrb	r2, [r7, #14]
 8000cb4:	701a      	strb	r2, [r3, #0]

			//clear receive buffer pointer
			pointer = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	737b      	strb	r3, [r7, #13]

			//reset the RX FIFO
			si4432_write_register(Operating_Function_Control2, 0x02);
 8000cba:	2102      	movs	r1, #2
 8000cbc:	2008      	movs	r0, #8
 8000cbe:	f7ff fe4b 	bl	8000958 <si4432_write_register>
			si4432_write_register(Operating_Function_Control2, 0x00);
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2008      	movs	r0, #8
 8000cc6:	f7ff fe47 	bl	8000958 <si4432_write_register>
			//enable the receiver chain again
			si4432_write_register(Operating_Function_Control1, 0x05);
 8000cca:	2105      	movs	r1, #5
 8000ccc:	2007      	movs	r0, #7
 8000cce:	f7ff fe43 	bl	8000958 <si4432_write_register>

			//read interrupt status registers
					Status1 = si4432_read_register(Interrupt_Status1);
 8000cd2:	2003      	movs	r0, #3
 8000cd4:	f7ff fe62 	bl	800099c <si4432_read_register>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <si4432_receive_AN415+0x100>)
 8000cde:	701a      	strb	r2, [r3, #0]
					Status2 = si4432_read_register(Interrupt_Status2);
 8000ce0:	2004      	movs	r0, #4
 8000ce2:	f7ff fe5b 	bl	800099c <si4432_read_register>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <si4432_receive_AN415+0x104>)
 8000cec:	701a      	strb	r2, [r3, #0]
			return true;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e000      	b.n	8000cf4 <si4432_receive_AN415+0xf8>
		}
	}
	return false;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd90      	pop	{r4, r7, pc}
 8000cfc:	20000090 	.word	0x20000090
 8000d00:	20000091 	.word	0x20000091

08000d04 <si4432_get_battery_voltage>:
	si4432_write_register(Digital_Test_Bus, 0x00);
	// select nothing to the Analog Testbus
	si4432_write_register(Analog_Test_Bus, 0x0B);
}

uint8_t si4432_get_battery_voltage(void){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
    uint8_t voltage = (si4432_read_register(Interrupt_Status1) & 0x1f);
 8000d0a:	2003      	movs	r0, #3
 8000d0c:	f7ff fe46 	bl	800099c <si4432_read_register>
 8000d10:	4603      	mov	r3, r0
 8000d12:	f003 031f 	and.w	r3, r3, #31
 8000d16:	71fb      	strb	r3, [r7, #7]

    return  voltage;
 8000d18:	79fb      	ldrb	r3, [r7, #7]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <HAL_MspInit+0x68>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <HAL_MspInit+0x68>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6193      	str	r3, [r2, #24]
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_MspInit+0x68>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_MspInit+0x68>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	4a11      	ldr	r2, [pc, #68]	; (8000d8c <HAL_MspInit+0x68>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	61d3      	str	r3, [r2, #28]
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_MspInit+0x68>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	210f      	movs	r1, #15
 8000d5e:	f06f 0001 	mvn.w	r0, #1
 8000d62:	f000 fdcc 	bl	80018fe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d66:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <HAL_MspInit+0x6c>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <HAL_MspInit+0x6c>)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40010000 	.word	0x40010000

08000d94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a14      	ldr	r2, [pc, #80]	; (8000e00 <HAL_ADC_MspInit+0x6c>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d121      	bne.n	8000df8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <HAL_ADC_MspInit+0x70>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <HAL_ADC_MspInit+0x70>)
 8000dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <HAL_ADC_MspInit+0x70>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <HAL_ADC_MspInit+0x70>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a0c      	ldr	r2, [pc, #48]	; (8000e04 <HAL_ADC_MspInit+0x70>)
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <HAL_ADC_MspInit+0x70>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000de4:	2301      	movs	r3, #1
 8000de6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000de8:	2303      	movs	r3, #3
 8000dea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	4619      	mov	r1, r3
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <HAL_ADC_MspInit+0x74>)
 8000df4:	f000 fdae 	bl	8001954 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000df8:	bf00      	nop
 8000dfa:	3720      	adds	r7, #32
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40012400 	.word	0x40012400
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40010800 	.word	0x40010800

08000e0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0318 	add.w	r3, r7, #24
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a2b      	ldr	r2, [pc, #172]	; (8000ed4 <HAL_I2C_MspInit+0xc8>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d124      	bne.n	8000e76 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2c:	4b2a      	ldr	r3, [pc, #168]	; (8000ed8 <HAL_I2C_MspInit+0xcc>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a29      	ldr	r2, [pc, #164]	; (8000ed8 <HAL_I2C_MspInit+0xcc>)
 8000e32:	f043 0308 	orr.w	r3, r3, #8
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <HAL_I2C_MspInit+0xcc>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0308 	and.w	r3, r3, #8
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e44:	23c0      	movs	r3, #192	; 0xc0
 8000e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e48:	2312      	movs	r3, #18
 8000e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 0318 	add.w	r3, r7, #24
 8000e54:	4619      	mov	r1, r3
 8000e56:	4821      	ldr	r0, [pc, #132]	; (8000edc <HAL_I2C_MspInit+0xd0>)
 8000e58:	f000 fd7c 	bl	8001954 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <HAL_I2C_MspInit+0xcc>)
 8000e5e:	69db      	ldr	r3, [r3, #28]
 8000e60:	4a1d      	ldr	r2, [pc, #116]	; (8000ed8 <HAL_I2C_MspInit+0xcc>)
 8000e62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e66:	61d3      	str	r3, [r2, #28]
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <HAL_I2C_MspInit+0xcc>)
 8000e6a:	69db      	ldr	r3, [r3, #28]
 8000e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e74:	e029      	b.n	8000eca <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a19      	ldr	r2, [pc, #100]	; (8000ee0 <HAL_I2C_MspInit+0xd4>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d124      	bne.n	8000eca <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <HAL_I2C_MspInit+0xcc>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <HAL_I2C_MspInit+0xcc>)
 8000e86:	f043 0308 	orr.w	r3, r3, #8
 8000e8a:	6193      	str	r3, [r2, #24]
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_I2C_MspInit+0xcc>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f003 0308 	and.w	r3, r3, #8
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e98:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e9e:	2312      	movs	r3, #18
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 0318 	add.w	r3, r7, #24
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480b      	ldr	r0, [pc, #44]	; (8000edc <HAL_I2C_MspInit+0xd0>)
 8000eae:	f000 fd51 	bl	8001954 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <HAL_I2C_MspInit+0xcc>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <HAL_I2C_MspInit+0xcc>)
 8000eb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ebc:	61d3      	str	r3, [r2, #28]
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_I2C_MspInit+0xcc>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
}
 8000eca:	bf00      	nop
 8000ecc:	3728      	adds	r7, #40	; 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40005400 	.word	0x40005400
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40010c00 	.word	0x40010c00
 8000ee0:	40005800 	.word	0x40005800

08000ee4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0318 	add.w	r3, r7, #24
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a31      	ldr	r2, [pc, #196]	; (8000fc4 <HAL_SPI_MspInit+0xe0>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d130      	bne.n	8000f66 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f04:	4b30      	ldr	r3, [pc, #192]	; (8000fc8 <HAL_SPI_MspInit+0xe4>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a2f      	ldr	r2, [pc, #188]	; (8000fc8 <HAL_SPI_MspInit+0xe4>)
 8000f0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b2d      	ldr	r3, [pc, #180]	; (8000fc8 <HAL_SPI_MspInit+0xe4>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1c:	4b2a      	ldr	r3, [pc, #168]	; (8000fc8 <HAL_SPI_MspInit+0xe4>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a29      	ldr	r2, [pc, #164]	; (8000fc8 <HAL_SPI_MspInit+0xe4>)
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <HAL_SPI_MspInit+0xe4>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000f34:	23b0      	movs	r3, #176	; 0xb0
 8000f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	f107 0318 	add.w	r3, r7, #24
 8000f44:	4619      	mov	r1, r3
 8000f46:	4821      	ldr	r0, [pc, #132]	; (8000fcc <HAL_SPI_MspInit+0xe8>)
 8000f48:	f000 fd04 	bl	8001954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f4c:	2340      	movs	r3, #64	; 0x40
 8000f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f58:	f107 0318 	add.w	r3, r7, #24
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	481b      	ldr	r0, [pc, #108]	; (8000fcc <HAL_SPI_MspInit+0xe8>)
 8000f60:	f000 fcf8 	bl	8001954 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f64:	e029      	b.n	8000fba <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a19      	ldr	r2, [pc, #100]	; (8000fd0 <HAL_SPI_MspInit+0xec>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d124      	bne.n	8000fba <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f70:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_SPI_MspInit+0xe4>)
 8000f72:	69db      	ldr	r3, [r3, #28]
 8000f74:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <HAL_SPI_MspInit+0xe4>)
 8000f76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7a:	61d3      	str	r3, [r2, #28]
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_SPI_MspInit+0xe4>)
 8000f7e:	69db      	ldr	r3, [r3, #28]
 8000f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <HAL_SPI_MspInit+0xe4>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <HAL_SPI_MspInit+0xe4>)
 8000f8e:	f043 0308 	orr.w	r3, r3, #8
 8000f92:	6193      	str	r3, [r2, #24]
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <HAL_SPI_MspInit+0xe4>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	f003 0308 	and.w	r3, r3, #8
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000fa0:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000faa:	2303      	movs	r3, #3
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fae:	f107 0318 	add.w	r3, r7, #24
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <HAL_SPI_MspInit+0xf0>)
 8000fb6:	f000 fccd 	bl	8001954 <HAL_GPIO_Init>
}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	; 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40013000 	.word	0x40013000
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40010800 	.word	0x40010800
 8000fd0:	40003800 	.word	0x40003800
 8000fd4:	40010c00 	.word	0x40010c00

08000fd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0318 	add.w	r3, r7, #24
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a37      	ldr	r2, [pc, #220]	; (80010d0 <HAL_UART_MspInit+0xf8>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d132      	bne.n	800105e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ff8:	4b36      	ldr	r3, [pc, #216]	; (80010d4 <HAL_UART_MspInit+0xfc>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a35      	ldr	r2, [pc, #212]	; (80010d4 <HAL_UART_MspInit+0xfc>)
 8000ffe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b33      	ldr	r3, [pc, #204]	; (80010d4 <HAL_UART_MspInit+0xfc>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <HAL_UART_MspInit+0xfc>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	4a2f      	ldr	r2, [pc, #188]	; (80010d4 <HAL_UART_MspInit+0xfc>)
 8001016:	f043 0304 	orr.w	r3, r3, #4
 800101a:	6193      	str	r3, [r2, #24]
 800101c:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <HAL_UART_MspInit+0xfc>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001028:	f44f 7300 	mov.w	r3, #512	; 0x200
 800102c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 0318 	add.w	r3, r7, #24
 800103a:	4619      	mov	r1, r3
 800103c:	4826      	ldr	r0, [pc, #152]	; (80010d8 <HAL_UART_MspInit+0x100>)
 800103e:	f000 fc89 	bl	8001954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 0318 	add.w	r3, r7, #24
 8001054:	4619      	mov	r1, r3
 8001056:	4820      	ldr	r0, [pc, #128]	; (80010d8 <HAL_UART_MspInit+0x100>)
 8001058:	f000 fc7c 	bl	8001954 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800105c:	e034      	b.n	80010c8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a1e      	ldr	r2, [pc, #120]	; (80010dc <HAL_UART_MspInit+0x104>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d12f      	bne.n	80010c8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <HAL_UART_MspInit+0xfc>)
 800106a:	69db      	ldr	r3, [r3, #28]
 800106c:	4a19      	ldr	r2, [pc, #100]	; (80010d4 <HAL_UART_MspInit+0xfc>)
 800106e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001072:	61d3      	str	r3, [r2, #28]
 8001074:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <HAL_UART_MspInit+0xfc>)
 8001076:	69db      	ldr	r3, [r3, #28]
 8001078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <HAL_UART_MspInit+0xfc>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a13      	ldr	r2, [pc, #76]	; (80010d4 <HAL_UART_MspInit+0xfc>)
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <HAL_UART_MspInit+0xfc>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001098:	2304      	movs	r3, #4
 800109a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	f107 0318 	add.w	r3, r7, #24
 80010a8:	4619      	mov	r1, r3
 80010aa:	480b      	ldr	r0, [pc, #44]	; (80010d8 <HAL_UART_MspInit+0x100>)
 80010ac:	f000 fc52 	bl	8001954 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010b0:	2308      	movs	r3, #8
 80010b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 0318 	add.w	r3, r7, #24
 80010c0:	4619      	mov	r1, r3
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <HAL_UART_MspInit+0x100>)
 80010c4:	f000 fc46 	bl	8001954 <HAL_GPIO_Init>
}
 80010c8:	bf00      	nop
 80010ca:	3728      	adds	r7, #40	; 0x28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40013800 	.word	0x40013800
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40010800 	.word	0x40010800
 80010dc:	40004400 	.word	0x40004400

080010e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08c      	sub	sp, #48	; 0x30
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 80010f0:	2200      	movs	r2, #0
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	2019      	movs	r0, #25
 80010f6:	f000 fc02 	bl	80018fe <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 80010fa:	2019      	movs	r0, #25
 80010fc:	f000 fc1b 	bl	8001936 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001100:	4b1e      	ldr	r3, [pc, #120]	; (800117c <HAL_InitTick+0x9c>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a1d      	ldr	r2, [pc, #116]	; (800117c <HAL_InitTick+0x9c>)
 8001106:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800110a:	6193      	str	r3, [r2, #24]
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <HAL_InitTick+0x9c>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001118:	f107 0210 	add.w	r2, r7, #16
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4611      	mov	r1, r2
 8001122:	4618      	mov	r0, r3
 8001124:	f001 faee 	bl	8002704 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001128:	f001 fad8 	bl	80026dc <HAL_RCC_GetPCLK2Freq>
 800112c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800112e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001130:	4a13      	ldr	r2, [pc, #76]	; (8001180 <HAL_InitTick+0xa0>)
 8001132:	fba2 2303 	umull	r2, r3, r2, r3
 8001136:	0c9b      	lsrs	r3, r3, #18
 8001138:	3b01      	subs	r3, #1
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <HAL_InitTick+0xa4>)
 800113e:	4a12      	ldr	r2, [pc, #72]	; (8001188 <HAL_InitTick+0xa8>)
 8001140:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_InitTick+0xa4>)
 8001144:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001148:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800114a:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <HAL_InitTick+0xa4>)
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <HAL_InitTick+0xa4>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_InitTick+0xa4>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800115c:	4809      	ldr	r0, [pc, #36]	; (8001184 <HAL_InitTick+0xa4>)
 800115e:	f002 f941 	bl	80033e4 <HAL_TIM_Base_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d104      	bne.n	8001172 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001168:	4806      	ldr	r0, [pc, #24]	; (8001184 <HAL_InitTick+0xa4>)
 800116a:	f002 f993 	bl	8003494 <HAL_TIM_Base_Start_IT>
 800116e:	4603      	mov	r3, r0
 8001170:	e000      	b.n	8001174 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
}
 8001174:	4618      	mov	r0, r3
 8001176:	3730      	adds	r7, #48	; 0x30
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40021000 	.word	0x40021000
 8001180:	431bde83 	.word	0x431bde83
 8001184:	20001bd0 	.word	0x20001bd0
 8001188:	40012c00 	.word	0x40012c00

0800118c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <HardFault_Handler+0x4>

0800119e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <MemManage_Handler+0x4>

080011a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <BusFault_Handler+0x4>

080011aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <UsageFault_Handler+0x4>

080011b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <TIM1_UP_IRQHandler+0x10>)
 80011c2:	f002 f9b9 	bl	8003538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20001bd0 	.word	0x20001bd0

080011d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	e00a      	b.n	80011f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011e2:	f3af 8000 	nop.w
 80011e6:	4601      	mov	r1, r0
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	60ba      	str	r2, [r7, #8]
 80011ee:	b2ca      	uxtb	r2, r1
 80011f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	3301      	adds	r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	dbf0      	blt.n	80011e2 <_read+0x12>
	}

return len;
 8001200:	687b      	ldr	r3, [r7, #4]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <_close>:
	}
	return len;
}

int _close(int file)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
	return -1;
 8001212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001230:	605a      	str	r2, [r3, #4]
	return 0;
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr

0800123e <_isatty>:

int _isatty(int file)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
	return 1;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr

08001252 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001252:	b480      	push	{r7}
 8001254:	b085      	sub	sp, #20
 8001256:	af00      	add	r7, sp, #0
 8001258:	60f8      	str	r0, [r7, #12]
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
	return 0;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
	...

0800126c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <_sbrk+0x50>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <_sbrk+0x16>
		heap_end = &end;
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <_sbrk+0x50>)
 800127e:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <_sbrk+0x54>)
 8001280:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <_sbrk+0x50>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <_sbrk+0x50>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4413      	add	r3, r2
 8001290:	466a      	mov	r2, sp
 8001292:	4293      	cmp	r3, r2
 8001294:	d907      	bls.n	80012a6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001296:	f005 f861 	bl	800635c <__errno>
 800129a:	4602      	mov	r2, r0
 800129c:	230c      	movs	r3, #12
 800129e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012a4:	e006      	b.n	80012b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80012a6:	4b05      	ldr	r3, [pc, #20]	; (80012bc <_sbrk+0x50>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	4a03      	ldr	r2, [pc, #12]	; (80012bc <_sbrk+0x50>)
 80012b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000094 	.word	0x20000094
 80012c0:	20001c60 	.word	0x20001c60

080012c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80012d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80012d2:	e003      	b.n	80012dc <LoopCopyDataInit>

080012d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80012d4:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80012d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80012d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80012da:	3104      	adds	r1, #4

080012dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80012dc:	480a      	ldr	r0, [pc, #40]	; (8001308 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80012e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80012e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80012e4:	d3f6      	bcc.n	80012d4 <CopyDataInit>
  ldr r2, =_sbss
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80012e8:	e002      	b.n	80012f0 <LoopFillZerobss>

080012ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80012ec:	f842 3b04 	str.w	r3, [r2], #4

080012f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80012f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80012f4:	d3f9      	bcc.n	80012ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012f6:	f7ff ffe5 	bl	80012c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012fa:	f005 f835 	bl	8006368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012fe:	f7fe ff6b 	bl	80001d8 <main>
  bx lr
 8001302:	4770      	bx	lr
  ldr r3, =_sidata
 8001304:	080074f4 	.word	0x080074f4
  ldr r0, =_sdata
 8001308:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800130c:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001310:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001314:	20001c60 	.word	0x20001c60

08001318 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001318:	e7fe      	b.n	8001318 <ADC1_2_IRQHandler>
	...

0800131c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <HAL_Init+0x28>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a07      	ldr	r2, [pc, #28]	; (8001344 <HAL_Init+0x28>)
 8001326:	f043 0310 	orr.w	r3, r3, #16
 800132a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132c:	2003      	movs	r0, #3
 800132e:	f000 fadb 	bl	80018e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001332:	2000      	movs	r0, #0
 8001334:	f7ff fed4 	bl	80010e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001338:	f7ff fcf4 	bl	8000d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40022000 	.word	0x40022000

08001348 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <HAL_IncTick+0x1c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_IncTick+0x20>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4413      	add	r3, r2
 8001358:	4a03      	ldr	r2, [pc, #12]	; (8001368 <HAL_IncTick+0x20>)
 800135a:	6013      	str	r3, [r2, #0]
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	20000008 	.word	0x20000008
 8001368:	20001c18 	.word	0x20001c18

0800136c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b02      	ldr	r3, [pc, #8]	; (800137c <HAL_GetTick+0x10>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	20001c18 	.word	0x20001c18

08001380 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001388:	2300      	movs	r3, #0
 800138a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e0be      	b.n	8001520 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d109      	bne.n	80013c4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff fce8 	bl	8000d94 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f9ab 	bl	8001720 <ADC_ConversionStop_Disable>
 80013ca:	4603      	mov	r3, r0
 80013cc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f040 8099 	bne.w	800150e <HAL_ADC_Init+0x18e>
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f040 8095 	bne.w	800150e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013ec:	f023 0302 	bic.w	r3, r3, #2
 80013f0:	f043 0202 	orr.w	r2, r3, #2
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001400:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	7b1b      	ldrb	r3, [r3, #12]
 8001406:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001408:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	4313      	orrs	r3, r2
 800140e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001418:	d003      	beq.n	8001422 <HAL_ADC_Init+0xa2>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d102      	bne.n	8001428 <HAL_ADC_Init+0xa8>
 8001422:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001426:	e000      	b.n	800142a <HAL_ADC_Init+0xaa>
 8001428:	2300      	movs	r3, #0
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	7d1b      	ldrb	r3, [r3, #20]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d119      	bne.n	800146c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7b1b      	ldrb	r3, [r3, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d109      	bne.n	8001454 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	3b01      	subs	r3, #1
 8001446:	035a      	lsls	r2, r3, #13
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	e00b      	b.n	800146c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	f043 0220 	orr.w	r2, r3, #32
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001464:	f043 0201 	orr.w	r2, r3, #1
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	430a      	orrs	r2, r1
 800147e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	4b28      	ldr	r3, [pc, #160]	; (8001528 <HAL_ADC_Init+0x1a8>)
 8001488:	4013      	ands	r3, r2
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	68b9      	ldr	r1, [r7, #8]
 8001490:	430b      	orrs	r3, r1
 8001492:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800149c:	d003      	beq.n	80014a6 <HAL_ADC_Init+0x126>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d104      	bne.n	80014b0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	051b      	lsls	r3, r3, #20
 80014ae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_ADC_Init+0x1ac>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d10b      	bne.n	80014ec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014de:	f023 0303 	bic.w	r3, r3, #3
 80014e2:	f043 0201 	orr.w	r2, r3, #1
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014ea:	e018      	b.n	800151e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	f023 0312 	bic.w	r3, r3, #18
 80014f4:	f043 0210 	orr.w	r2, r3, #16
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	f043 0201 	orr.w	r2, r3, #1
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800150c:	e007      	b.n	800151e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001512:	f043 0210 	orr.w	r2, r3, #16
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800151e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	ffe1f7fd 	.word	0xffe1f7fd
 800152c:	ff1f0efe 	.word	0xff1f0efe

08001530 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001548:	2b01      	cmp	r3, #1
 800154a:	d101      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x20>
 800154c:	2302      	movs	r3, #2
 800154e:	e0dc      	b.n	800170a <HAL_ADC_ConfigChannel+0x1da>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b06      	cmp	r3, #6
 800155e:	d81c      	bhi.n	800159a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	3b05      	subs	r3, #5
 8001572:	221f      	movs	r2, #31
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	4019      	ands	r1, r3
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	3b05      	subs	r3, #5
 800158c:	fa00 f203 	lsl.w	r2, r0, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	635a      	str	r2, [r3, #52]	; 0x34
 8001598:	e03c      	b.n	8001614 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b0c      	cmp	r3, #12
 80015a0:	d81c      	bhi.n	80015dc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	3b23      	subs	r3, #35	; 0x23
 80015b4:	221f      	movs	r2, #31
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	4019      	ands	r1, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	6818      	ldr	r0, [r3, #0]
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	3b23      	subs	r3, #35	; 0x23
 80015ce:	fa00 f203 	lsl.w	r2, r0, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	631a      	str	r2, [r3, #48]	; 0x30
 80015da:	e01b      	b.n	8001614 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	3b41      	subs	r3, #65	; 0x41
 80015ee:	221f      	movs	r2, #31
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	4019      	ands	r1, r3
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	6818      	ldr	r0, [r3, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	3b41      	subs	r3, #65	; 0x41
 8001608:	fa00 f203 	lsl.w	r2, r0, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b09      	cmp	r3, #9
 800161a:	d91c      	bls.n	8001656 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68d9      	ldr	r1, [r3, #12]
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	3b1e      	subs	r3, #30
 800162e:	2207      	movs	r2, #7
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	4019      	ands	r1, r3
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	6898      	ldr	r0, [r3, #8]
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4613      	mov	r3, r2
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4413      	add	r3, r2
 8001646:	3b1e      	subs	r3, #30
 8001648:	fa00 f203 	lsl.w	r2, r0, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	e019      	b.n	800168a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6919      	ldr	r1, [r3, #16]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4613      	mov	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	2207      	movs	r2, #7
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	4019      	ands	r1, r3
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	6898      	ldr	r0, [r3, #8]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4613      	mov	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4413      	add	r3, r2
 800167e:	fa00 f203 	lsl.w	r2, r0, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b10      	cmp	r3, #16
 8001690:	d003      	beq.n	800169a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001696:	2b11      	cmp	r3, #17
 8001698:	d132      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a1d      	ldr	r2, [pc, #116]	; (8001714 <HAL_ADC_ConfigChannel+0x1e4>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d125      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d126      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80016c0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b10      	cmp	r3, #16
 80016c8:	d11a      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016ca:	4b13      	ldr	r3, [pc, #76]	; (8001718 <HAL_ADC_ConfigChannel+0x1e8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a13      	ldr	r2, [pc, #76]	; (800171c <HAL_ADC_ConfigChannel+0x1ec>)
 80016d0:	fba2 2303 	umull	r2, r3, r2, r3
 80016d4:	0c9a      	lsrs	r2, r3, #18
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016e0:	e002      	b.n	80016e8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f9      	bne.n	80016e2 <HAL_ADC_ConfigChannel+0x1b2>
 80016ee:	e007      	b.n	8001700 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f4:	f043 0220 	orr.w	r2, r3, #32
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001708:	7bfb      	ldrb	r3, [r7, #15]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	40012400 	.word	0x40012400
 8001718:	20000000 	.word	0x20000000
 800171c:	431bde83 	.word	0x431bde83

08001720 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b01      	cmp	r3, #1
 8001738:	d127      	bne.n	800178a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 0201 	bic.w	r2, r2, #1
 8001748:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800174a:	f7ff fe0f 	bl	800136c <HAL_GetTick>
 800174e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001750:	e014      	b.n	800177c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001752:	f7ff fe0b 	bl	800136c <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d90d      	bls.n	800177c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	f043 0210 	orr.w	r2, r3, #16
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	f043 0201 	orr.w	r2, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e007      	b.n	800178c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b01      	cmp	r3, #1
 8001788:	d0e3      	beq.n	8001752 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <__NVIC_SetPriorityGrouping>:
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c6:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	60d3      	str	r3, [r2, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_GetPriorityGrouping>:
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <__NVIC_GetPriorityGrouping+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0307 	and.w	r3, r3, #7
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_EnableIRQ>:
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	2b00      	cmp	r3, #0
 8001808:	db0b      	blt.n	8001822 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	4906      	ldr	r1, [pc, #24]	; (800182c <__NVIC_EnableIRQ+0x34>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	2001      	movs	r0, #1
 800181a:	fa00 f202 	lsl.w	r2, r0, r2
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	e000e100 	.word	0xe000e100

08001830 <__NVIC_SetPriority>:
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	2b00      	cmp	r3, #0
 8001842:	db0a      	blt.n	800185a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	490c      	ldr	r1, [pc, #48]	; (800187c <__NVIC_SetPriority+0x4c>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	440b      	add	r3, r1
 8001854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001858:	e00a      	b.n	8001870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4908      	ldr	r1, [pc, #32]	; (8001880 <__NVIC_SetPriority+0x50>)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	3b04      	subs	r3, #4
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	440b      	add	r3, r1
 800186e:	761a      	strb	r2, [r3, #24]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000e100 	.word	0xe000e100
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <NVIC_EncodePriority>:
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f1c3 0307 	rsb	r3, r3, #7
 800189e:	2b04      	cmp	r3, #4
 80018a0:	bf28      	it	cs
 80018a2:	2304      	movcs	r3, #4
 80018a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3304      	adds	r3, #4
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d902      	bls.n	80018b4 <NVIC_EncodePriority+0x30>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3b03      	subs	r3, #3
 80018b2:	e000      	b.n	80018b6 <NVIC_EncodePriority+0x32>
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	401a      	ands	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	4313      	orrs	r3, r2
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ff4f 	bl	8001794 <__NVIC_SetPriorityGrouping>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001910:	f7ff ff64 	bl	80017dc <__NVIC_GetPriorityGrouping>
 8001914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	6978      	ldr	r0, [r7, #20]
 800191c:	f7ff ffb2 	bl	8001884 <NVIC_EncodePriority>
 8001920:	4602      	mov	r2, r0
 8001922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff81 	bl	8001830 <__NVIC_SetPriority>
}
 800192e:	bf00      	nop
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff57 	bl	80017f8 <__NVIC_EnableIRQ>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001954:	b480      	push	{r7}
 8001956:	b08b      	sub	sp, #44	; 0x2c
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001962:	2300      	movs	r3, #0
 8001964:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001966:	e127      	b.n	8001bb8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001968:	2201      	movs	r2, #1
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	429a      	cmp	r2, r3
 8001982:	f040 8116 	bne.w	8001bb2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b12      	cmp	r3, #18
 800198c:	d034      	beq.n	80019f8 <HAL_GPIO_Init+0xa4>
 800198e:	2b12      	cmp	r3, #18
 8001990:	d80d      	bhi.n	80019ae <HAL_GPIO_Init+0x5a>
 8001992:	2b02      	cmp	r3, #2
 8001994:	d02b      	beq.n	80019ee <HAL_GPIO_Init+0x9a>
 8001996:	2b02      	cmp	r3, #2
 8001998:	d804      	bhi.n	80019a4 <HAL_GPIO_Init+0x50>
 800199a:	2b00      	cmp	r3, #0
 800199c:	d031      	beq.n	8001a02 <HAL_GPIO_Init+0xae>
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d01c      	beq.n	80019dc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019a2:	e048      	b.n	8001a36 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d043      	beq.n	8001a30 <HAL_GPIO_Init+0xdc>
 80019a8:	2b11      	cmp	r3, #17
 80019aa:	d01b      	beq.n	80019e4 <HAL_GPIO_Init+0x90>
          break;
 80019ac:	e043      	b.n	8001a36 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019ae:	4a89      	ldr	r2, [pc, #548]	; (8001bd4 <HAL_GPIO_Init+0x280>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d026      	beq.n	8001a02 <HAL_GPIO_Init+0xae>
 80019b4:	4a87      	ldr	r2, [pc, #540]	; (8001bd4 <HAL_GPIO_Init+0x280>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d806      	bhi.n	80019c8 <HAL_GPIO_Init+0x74>
 80019ba:	4a87      	ldr	r2, [pc, #540]	; (8001bd8 <HAL_GPIO_Init+0x284>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d020      	beq.n	8001a02 <HAL_GPIO_Init+0xae>
 80019c0:	4a86      	ldr	r2, [pc, #536]	; (8001bdc <HAL_GPIO_Init+0x288>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d01d      	beq.n	8001a02 <HAL_GPIO_Init+0xae>
          break;
 80019c6:	e036      	b.n	8001a36 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019c8:	4a85      	ldr	r2, [pc, #532]	; (8001be0 <HAL_GPIO_Init+0x28c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d019      	beq.n	8001a02 <HAL_GPIO_Init+0xae>
 80019ce:	4a85      	ldr	r2, [pc, #532]	; (8001be4 <HAL_GPIO_Init+0x290>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d016      	beq.n	8001a02 <HAL_GPIO_Init+0xae>
 80019d4:	4a84      	ldr	r2, [pc, #528]	; (8001be8 <HAL_GPIO_Init+0x294>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d013      	beq.n	8001a02 <HAL_GPIO_Init+0xae>
          break;
 80019da:	e02c      	b.n	8001a36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	623b      	str	r3, [r7, #32]
          break;
 80019e2:	e028      	b.n	8001a36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	3304      	adds	r3, #4
 80019ea:	623b      	str	r3, [r7, #32]
          break;
 80019ec:	e023      	b.n	8001a36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	3308      	adds	r3, #8
 80019f4:	623b      	str	r3, [r7, #32]
          break;
 80019f6:	e01e      	b.n	8001a36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	330c      	adds	r3, #12
 80019fe:	623b      	str	r3, [r7, #32]
          break;
 8001a00:	e019      	b.n	8001a36 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d102      	bne.n	8001a10 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a0a:	2304      	movs	r3, #4
 8001a0c:	623b      	str	r3, [r7, #32]
          break;
 8001a0e:	e012      	b.n	8001a36 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d105      	bne.n	8001a24 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a18:	2308      	movs	r3, #8
 8001a1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	611a      	str	r2, [r3, #16]
          break;
 8001a22:	e008      	b.n	8001a36 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a24:	2308      	movs	r3, #8
 8001a26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	615a      	str	r2, [r3, #20]
          break;
 8001a2e:	e002      	b.n	8001a36 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
          break;
 8001a34:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	2bff      	cmp	r3, #255	; 0xff
 8001a3a:	d801      	bhi.n	8001a40 <HAL_GPIO_Init+0xec>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	e001      	b.n	8001a44 <HAL_GPIO_Init+0xf0>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3304      	adds	r3, #4
 8001a44:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	2bff      	cmp	r3, #255	; 0xff
 8001a4a:	d802      	bhi.n	8001a52 <HAL_GPIO_Init+0xfe>
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	e002      	b.n	8001a58 <HAL_GPIO_Init+0x104>
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	3b08      	subs	r3, #8
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	210f      	movs	r1, #15
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	401a      	ands	r2, r3
 8001a6a:	6a39      	ldr	r1, [r7, #32]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	431a      	orrs	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 8096 	beq.w	8001bb2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a86:	4b59      	ldr	r3, [pc, #356]	; (8001bec <HAL_GPIO_Init+0x298>)
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	4a58      	ldr	r2, [pc, #352]	; (8001bec <HAL_GPIO_Init+0x298>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6193      	str	r3, [r2, #24]
 8001a92:	4b56      	ldr	r3, [pc, #344]	; (8001bec <HAL_GPIO_Init+0x298>)
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a9e:	4a54      	ldr	r2, [pc, #336]	; (8001bf0 <HAL_GPIO_Init+0x29c>)
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	089b      	lsrs	r3, r3, #2
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aaa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4b      	ldr	r2, [pc, #300]	; (8001bf4 <HAL_GPIO_Init+0x2a0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d013      	beq.n	8001af2 <HAL_GPIO_Init+0x19e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4a      	ldr	r2, [pc, #296]	; (8001bf8 <HAL_GPIO_Init+0x2a4>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d00d      	beq.n	8001aee <HAL_GPIO_Init+0x19a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a49      	ldr	r2, [pc, #292]	; (8001bfc <HAL_GPIO_Init+0x2a8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d007      	beq.n	8001aea <HAL_GPIO_Init+0x196>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a48      	ldr	r2, [pc, #288]	; (8001c00 <HAL_GPIO_Init+0x2ac>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d101      	bne.n	8001ae6 <HAL_GPIO_Init+0x192>
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e006      	b.n	8001af4 <HAL_GPIO_Init+0x1a0>
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	e004      	b.n	8001af4 <HAL_GPIO_Init+0x1a0>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e002      	b.n	8001af4 <HAL_GPIO_Init+0x1a0>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <HAL_GPIO_Init+0x1a0>
 8001af2:	2300      	movs	r3, #0
 8001af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af6:	f002 0203 	and.w	r2, r2, #3
 8001afa:	0092      	lsls	r2, r2, #2
 8001afc:	4093      	lsls	r3, r2
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b04:	493a      	ldr	r1, [pc, #232]	; (8001bf0 <HAL_GPIO_Init+0x29c>)
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	089b      	lsrs	r3, r3, #2
 8001b0a:	3302      	adds	r3, #2
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d006      	beq.n	8001b2c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b1e:	4b39      	ldr	r3, [pc, #228]	; (8001c04 <HAL_GPIO_Init+0x2b0>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	4938      	ldr	r1, [pc, #224]	; (8001c04 <HAL_GPIO_Init+0x2b0>)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]
 8001b2a:	e006      	b.n	8001b3a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b2c:	4b35      	ldr	r3, [pc, #212]	; (8001c04 <HAL_GPIO_Init+0x2b0>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	4933      	ldr	r1, [pc, #204]	; (8001c04 <HAL_GPIO_Init+0x2b0>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d006      	beq.n	8001b54 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b46:	4b2f      	ldr	r3, [pc, #188]	; (8001c04 <HAL_GPIO_Init+0x2b0>)
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	492e      	ldr	r1, [pc, #184]	; (8001c04 <HAL_GPIO_Init+0x2b0>)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	604b      	str	r3, [r1, #4]
 8001b52:	e006      	b.n	8001b62 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b54:	4b2b      	ldr	r3, [pc, #172]	; (8001c04 <HAL_GPIO_Init+0x2b0>)
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	4929      	ldr	r1, [pc, #164]	; (8001c04 <HAL_GPIO_Init+0x2b0>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d006      	beq.n	8001b7c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b6e:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <HAL_GPIO_Init+0x2b0>)
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	4924      	ldr	r1, [pc, #144]	; (8001c04 <HAL_GPIO_Init+0x2b0>)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	608b      	str	r3, [r1, #8]
 8001b7a:	e006      	b.n	8001b8a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b7c:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <HAL_GPIO_Init+0x2b0>)
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	491f      	ldr	r1, [pc, #124]	; (8001c04 <HAL_GPIO_Init+0x2b0>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d006      	beq.n	8001ba4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b96:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <HAL_GPIO_Init+0x2b0>)
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	491a      	ldr	r1, [pc, #104]	; (8001c04 <HAL_GPIO_Init+0x2b0>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	60cb      	str	r3, [r1, #12]
 8001ba2:	e006      	b.n	8001bb2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ba4:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <HAL_GPIO_Init+0x2b0>)
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	4915      	ldr	r1, [pc, #84]	; (8001c04 <HAL_GPIO_Init+0x2b0>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f47f aed0 	bne.w	8001968 <HAL_GPIO_Init+0x14>
  }
}
 8001bc8:	bf00      	nop
 8001bca:	372c      	adds	r7, #44	; 0x2c
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	10210000 	.word	0x10210000
 8001bd8:	10110000 	.word	0x10110000
 8001bdc:	10120000 	.word	0x10120000
 8001be0:	10310000 	.word	0x10310000
 8001be4:	10320000 	.word	0x10320000
 8001be8:	10220000 	.word	0x10220000
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40010000 	.word	0x40010000
 8001bf4:	40010800 	.word	0x40010800
 8001bf8:	40010c00 	.word	0x40010c00
 8001bfc:	40011000 	.word	0x40011000
 8001c00:	40011400 	.word	0x40011400
 8001c04:	40010400 	.word	0x40010400

08001c08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	887b      	ldrh	r3, [r7, #2]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c20:	2301      	movs	r3, #1
 8001c22:	73fb      	strb	r3, [r7, #15]
 8001c24:	e001      	b.n	8001c2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr

08001c36 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	807b      	strh	r3, [r7, #2]
 8001c42:	4613      	mov	r3, r2
 8001c44:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c46:	787b      	ldrb	r3, [r7, #1]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c4c:	887a      	ldrh	r2, [r7, #2]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c52:	e003      	b.n	8001c5c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c54:	887b      	ldrh	r3, [r7, #2]
 8001c56:	041a      	lsls	r2, r3, #16
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	611a      	str	r2, [r3, #16]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b085      	sub	sp, #20
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c78:	887a      	ldrh	r2, [r7, #2]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	041a      	lsls	r2, r3, #16
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	43d9      	mvns	r1, r3
 8001c84:	887b      	ldrh	r3, [r7, #2]
 8001c86:	400b      	ands	r3, r1
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	611a      	str	r2, [r3, #16]
}
 8001c8e:	bf00      	nop
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e11f      	b.n	8001eea <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d106      	bne.n	8001cc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff f8a4 	bl	8000e0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2224      	movs	r2, #36	; 0x24
 8001cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0201 	bic.w	r2, r2, #1
 8001cda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cfc:	f000 fcda 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 8001d00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	4a7b      	ldr	r2, [pc, #492]	; (8001ef4 <HAL_I2C_Init+0x25c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d807      	bhi.n	8001d1c <HAL_I2C_Init+0x84>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4a7a      	ldr	r2, [pc, #488]	; (8001ef8 <HAL_I2C_Init+0x260>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	bf94      	ite	ls
 8001d14:	2301      	movls	r3, #1
 8001d16:	2300      	movhi	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	e006      	b.n	8001d2a <HAL_I2C_Init+0x92>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4a77      	ldr	r2, [pc, #476]	; (8001efc <HAL_I2C_Init+0x264>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	bf94      	ite	ls
 8001d24:	2301      	movls	r3, #1
 8001d26:	2300      	movhi	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e0db      	b.n	8001eea <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	4a72      	ldr	r2, [pc, #456]	; (8001f00 <HAL_I2C_Init+0x268>)
 8001d36:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3a:	0c9b      	lsrs	r3, r3, #18
 8001d3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	4a64      	ldr	r2, [pc, #400]	; (8001ef4 <HAL_I2C_Init+0x25c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d802      	bhi.n	8001d6c <HAL_I2C_Init+0xd4>
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	e009      	b.n	8001d80 <HAL_I2C_Init+0xe8>
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d72:	fb02 f303 	mul.w	r3, r2, r3
 8001d76:	4a63      	ldr	r2, [pc, #396]	; (8001f04 <HAL_I2C_Init+0x26c>)
 8001d78:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7c:	099b      	lsrs	r3, r3, #6
 8001d7e:	3301      	adds	r3, #1
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	430b      	orrs	r3, r1
 8001d86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4956      	ldr	r1, [pc, #344]	; (8001ef4 <HAL_I2C_Init+0x25c>)
 8001d9c:	428b      	cmp	r3, r1
 8001d9e:	d80d      	bhi.n	8001dbc <HAL_I2C_Init+0x124>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	1e59      	subs	r1, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dae:	3301      	adds	r3, #1
 8001db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	bf38      	it	cc
 8001db8:	2304      	movcc	r3, #4
 8001dba:	e04f      	b.n	8001e5c <HAL_I2C_Init+0x1c4>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d111      	bne.n	8001de8 <HAL_I2C_Init+0x150>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	1e58      	subs	r0, r3, #1
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6859      	ldr	r1, [r3, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	440b      	add	r3, r1
 8001dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	bf0c      	ite	eq
 8001de0:	2301      	moveq	r3, #1
 8001de2:	2300      	movne	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	e012      	b.n	8001e0e <HAL_I2C_Init+0x176>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1e58      	subs	r0, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6859      	ldr	r1, [r3, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	0099      	lsls	r1, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dfe:	3301      	adds	r3, #1
 8001e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf0c      	ite	eq
 8001e08:	2301      	moveq	r3, #1
 8001e0a:	2300      	movne	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_I2C_Init+0x17e>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e022      	b.n	8001e5c <HAL_I2C_Init+0x1c4>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10e      	bne.n	8001e3c <HAL_I2C_Init+0x1a4>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1e58      	subs	r0, r3, #1
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6859      	ldr	r1, [r3, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	440b      	add	r3, r1
 8001e2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e30:	3301      	adds	r3, #1
 8001e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e3a:	e00f      	b.n	8001e5c <HAL_I2C_Init+0x1c4>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1e58      	subs	r0, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6859      	ldr	r1, [r3, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	0099      	lsls	r1, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e52:	3301      	adds	r3, #1
 8001e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	6809      	ldr	r1, [r1, #0]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69da      	ldr	r2, [r3, #28]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6911      	ldr	r1, [r2, #16]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68d2      	ldr	r2, [r2, #12]
 8001e96:	4311      	orrs	r1, r2
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	000186a0 	.word	0x000186a0
 8001ef8:	001e847f 	.word	0x001e847f
 8001efc:	003d08ff 	.word	0x003d08ff
 8001f00:	431bde83 	.word	0x431bde83
 8001f04:	10624dd3 	.word	0x10624dd3

08001f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e26c      	b.n	80023f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 8087 	beq.w	8002036 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f28:	4b92      	ldr	r3, [pc, #584]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 030c 	and.w	r3, r3, #12
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d00c      	beq.n	8001f4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f34:	4b8f      	ldr	r3, [pc, #572]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 030c 	and.w	r3, r3, #12
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d112      	bne.n	8001f66 <HAL_RCC_OscConfig+0x5e>
 8001f40:	4b8c      	ldr	r3, [pc, #560]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f4c:	d10b      	bne.n	8001f66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4e:	4b89      	ldr	r3, [pc, #548]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d06c      	beq.n	8002034 <HAL_RCC_OscConfig+0x12c>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d168      	bne.n	8002034 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e246      	b.n	80023f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f6e:	d106      	bne.n	8001f7e <HAL_RCC_OscConfig+0x76>
 8001f70:	4b80      	ldr	r3, [pc, #512]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a7f      	ldr	r2, [pc, #508]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7a:	6013      	str	r3, [r2, #0]
 8001f7c:	e02e      	b.n	8001fdc <HAL_RCC_OscConfig+0xd4>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x98>
 8001f86:	4b7b      	ldr	r3, [pc, #492]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a7a      	ldr	r2, [pc, #488]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b78      	ldr	r3, [pc, #480]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a77      	ldr	r2, [pc, #476]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e01d      	b.n	8001fdc <HAL_RCC_OscConfig+0xd4>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0xbc>
 8001faa:	4b72      	ldr	r3, [pc, #456]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a71      	ldr	r2, [pc, #452]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	4b6f      	ldr	r3, [pc, #444]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a6e      	ldr	r2, [pc, #440]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	e00b      	b.n	8001fdc <HAL_RCC_OscConfig+0xd4>
 8001fc4:	4b6b      	ldr	r3, [pc, #428]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a6a      	ldr	r2, [pc, #424]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	4b68      	ldr	r3, [pc, #416]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a67      	ldr	r2, [pc, #412]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d013      	beq.n	800200c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe4:	f7ff f9c2 	bl	800136c <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fec:	f7ff f9be 	bl	800136c <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b64      	cmp	r3, #100	; 0x64
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e1fa      	b.n	80023f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffe:	4b5d      	ldr	r3, [pc, #372]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0xe4>
 800200a:	e014      	b.n	8002036 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7ff f9ae 	bl	800136c <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002014:	f7ff f9aa 	bl	800136c <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b64      	cmp	r3, #100	; 0x64
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e1e6      	b.n	80023f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002026:	4b53      	ldr	r3, [pc, #332]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x10c>
 8002032:	e000      	b.n	8002036 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d063      	beq.n	800210a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002042:	4b4c      	ldr	r3, [pc, #304]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00b      	beq.n	8002066 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800204e:	4b49      	ldr	r3, [pc, #292]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	2b08      	cmp	r3, #8
 8002058:	d11c      	bne.n	8002094 <HAL_RCC_OscConfig+0x18c>
 800205a:	4b46      	ldr	r3, [pc, #280]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d116      	bne.n	8002094 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	4b43      	ldr	r3, [pc, #268]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d005      	beq.n	800207e <HAL_RCC_OscConfig+0x176>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d001      	beq.n	800207e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e1ba      	b.n	80023f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207e:	4b3d      	ldr	r3, [pc, #244]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4939      	ldr	r1, [pc, #228]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002092:	e03a      	b.n	800210a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d020      	beq.n	80020de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800209c:	4b36      	ldr	r3, [pc, #216]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 800209e:	2201      	movs	r2, #1
 80020a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a2:	f7ff f963 	bl	800136c <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020aa:	f7ff f95f 	bl	800136c <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e19b      	b.n	80023f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020bc:	4b2d      	ldr	r3, [pc, #180]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c8:	4b2a      	ldr	r3, [pc, #168]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4927      	ldr	r1, [pc, #156]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	600b      	str	r3, [r1, #0]
 80020dc:	e015      	b.n	800210a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020de:	4b26      	ldr	r3, [pc, #152]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e4:	f7ff f942 	bl	800136c <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ec:	f7ff f93e 	bl	800136c <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e17a      	b.n	80023f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020fe:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d03a      	beq.n	800218c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d019      	beq.n	8002152 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800211e:	4b17      	ldr	r3, [pc, #92]	; (800217c <HAL_RCC_OscConfig+0x274>)
 8002120:	2201      	movs	r2, #1
 8002122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002124:	f7ff f922 	bl	800136c <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800212c:	f7ff f91e 	bl	800136c <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e15a      	b.n	80023f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800213e:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <HAL_RCC_OscConfig+0x26c>)
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800214a:	2001      	movs	r0, #1
 800214c:	f000 fb0a 	bl	8002764 <RCC_Delay>
 8002150:	e01c      	b.n	800218c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002152:	4b0a      	ldr	r3, [pc, #40]	; (800217c <HAL_RCC_OscConfig+0x274>)
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002158:	f7ff f908 	bl	800136c <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215e:	e00f      	b.n	8002180 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002160:	f7ff f904 	bl	800136c <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d908      	bls.n	8002180 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e140      	b.n	80023f4 <HAL_RCC_OscConfig+0x4ec>
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000
 8002178:	42420000 	.word	0x42420000
 800217c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002180:	4b9e      	ldr	r3, [pc, #632]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1e9      	bne.n	8002160 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 80a6 	beq.w	80022e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800219a:	2300      	movs	r3, #0
 800219c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800219e:	4b97      	ldr	r3, [pc, #604]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10d      	bne.n	80021c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021aa:	4b94      	ldr	r3, [pc, #592]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	4a93      	ldr	r2, [pc, #588]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 80021b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b4:	61d3      	str	r3, [r2, #28]
 80021b6:	4b91      	ldr	r3, [pc, #580]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021c2:	2301      	movs	r3, #1
 80021c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c6:	4b8e      	ldr	r3, [pc, #568]	; (8002400 <HAL_RCC_OscConfig+0x4f8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d118      	bne.n	8002204 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021d2:	4b8b      	ldr	r3, [pc, #556]	; (8002400 <HAL_RCC_OscConfig+0x4f8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a8a      	ldr	r2, [pc, #552]	; (8002400 <HAL_RCC_OscConfig+0x4f8>)
 80021d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021de:	f7ff f8c5 	bl	800136c <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e6:	f7ff f8c1 	bl	800136c <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b64      	cmp	r3, #100	; 0x64
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e0fd      	b.n	80023f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f8:	4b81      	ldr	r3, [pc, #516]	; (8002400 <HAL_RCC_OscConfig+0x4f8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d106      	bne.n	800221a <HAL_RCC_OscConfig+0x312>
 800220c:	4b7b      	ldr	r3, [pc, #492]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	4a7a      	ldr	r2, [pc, #488]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	6213      	str	r3, [r2, #32]
 8002218:	e02d      	b.n	8002276 <HAL_RCC_OscConfig+0x36e>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10c      	bne.n	800223c <HAL_RCC_OscConfig+0x334>
 8002222:	4b76      	ldr	r3, [pc, #472]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	4a75      	ldr	r2, [pc, #468]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 8002228:	f023 0301 	bic.w	r3, r3, #1
 800222c:	6213      	str	r3, [r2, #32]
 800222e:	4b73      	ldr	r3, [pc, #460]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	4a72      	ldr	r2, [pc, #456]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 8002234:	f023 0304 	bic.w	r3, r3, #4
 8002238:	6213      	str	r3, [r2, #32]
 800223a:	e01c      	b.n	8002276 <HAL_RCC_OscConfig+0x36e>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2b05      	cmp	r3, #5
 8002242:	d10c      	bne.n	800225e <HAL_RCC_OscConfig+0x356>
 8002244:	4b6d      	ldr	r3, [pc, #436]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	4a6c      	ldr	r2, [pc, #432]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 800224a:	f043 0304 	orr.w	r3, r3, #4
 800224e:	6213      	str	r3, [r2, #32]
 8002250:	4b6a      	ldr	r3, [pc, #424]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	4a69      	ldr	r2, [pc, #420]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6213      	str	r3, [r2, #32]
 800225c:	e00b      	b.n	8002276 <HAL_RCC_OscConfig+0x36e>
 800225e:	4b67      	ldr	r3, [pc, #412]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	4a66      	ldr	r2, [pc, #408]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 8002264:	f023 0301 	bic.w	r3, r3, #1
 8002268:	6213      	str	r3, [r2, #32]
 800226a:	4b64      	ldr	r3, [pc, #400]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	4a63      	ldr	r2, [pc, #396]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 8002270:	f023 0304 	bic.w	r3, r3, #4
 8002274:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d015      	beq.n	80022aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227e:	f7ff f875 	bl	800136c <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002284:	e00a      	b.n	800229c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002286:	f7ff f871 	bl	800136c <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	f241 3288 	movw	r2, #5000	; 0x1388
 8002294:	4293      	cmp	r3, r2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e0ab      	b.n	80023f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229c:	4b57      	ldr	r3, [pc, #348]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0ee      	beq.n	8002286 <HAL_RCC_OscConfig+0x37e>
 80022a8:	e014      	b.n	80022d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022aa:	f7ff f85f 	bl	800136c <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b0:	e00a      	b.n	80022c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b2:	f7ff f85b 	bl	800136c <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e095      	b.n	80023f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c8:	4b4c      	ldr	r3, [pc, #304]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1ee      	bne.n	80022b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d105      	bne.n	80022e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022da:	4b48      	ldr	r3, [pc, #288]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	4a47      	ldr	r2, [pc, #284]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 80022e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 8081 	beq.w	80023f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022f0:	4b42      	ldr	r3, [pc, #264]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 030c 	and.w	r3, r3, #12
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d061      	beq.n	80023c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d146      	bne.n	8002392 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002304:	4b3f      	ldr	r3, [pc, #252]	; (8002404 <HAL_RCC_OscConfig+0x4fc>)
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230a:	f7ff f82f 	bl	800136c <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002312:	f7ff f82b 	bl	800136c <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e067      	b.n	80023f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002324:	4b35      	ldr	r3, [pc, #212]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f0      	bne.n	8002312 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002338:	d108      	bne.n	800234c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800233a:	4b30      	ldr	r3, [pc, #192]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	492d      	ldr	r1, [pc, #180]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 8002348:	4313      	orrs	r3, r2
 800234a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800234c:	4b2b      	ldr	r3, [pc, #172]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a19      	ldr	r1, [r3, #32]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	430b      	orrs	r3, r1
 800235e:	4927      	ldr	r1, [pc, #156]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 8002360:	4313      	orrs	r3, r2
 8002362:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002364:	4b27      	ldr	r3, [pc, #156]	; (8002404 <HAL_RCC_OscConfig+0x4fc>)
 8002366:	2201      	movs	r2, #1
 8002368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236a:	f7fe ffff 	bl	800136c <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002372:	f7fe fffb 	bl	800136c <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e037      	b.n	80023f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002384:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0x46a>
 8002390:	e02f      	b.n	80023f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002392:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <HAL_RCC_OscConfig+0x4fc>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7fe ffe8 	bl	800136c <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a0:	f7fe ffe4 	bl	800136c <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e020      	b.n	80023f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b2:	4b12      	ldr	r3, [pc, #72]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x498>
 80023be:	e018      	b.n	80023f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e013      	b.n	80023f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_RCC_OscConfig+0x4f4>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d106      	bne.n	80023ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d001      	beq.n	80023f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	40007000 	.word	0x40007000
 8002404:	42420060 	.word	0x42420060

08002408 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0d0      	b.n	80025be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800241c:	4b6a      	ldr	r3, [pc, #424]	; (80025c8 <HAL_RCC_ClockConfig+0x1c0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d910      	bls.n	800244c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b67      	ldr	r3, [pc, #412]	; (80025c8 <HAL_RCC_ClockConfig+0x1c0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 0207 	bic.w	r2, r3, #7
 8002432:	4965      	ldr	r1, [pc, #404]	; (80025c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800243a:	4b63      	ldr	r3, [pc, #396]	; (80025c8 <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d001      	beq.n	800244c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e0b8      	b.n	80025be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d020      	beq.n	800249a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002464:	4b59      	ldr	r3, [pc, #356]	; (80025cc <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	4a58      	ldr	r2, [pc, #352]	; (80025cc <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800246e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800247c:	4b53      	ldr	r3, [pc, #332]	; (80025cc <HAL_RCC_ClockConfig+0x1c4>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	4a52      	ldr	r2, [pc, #328]	; (80025cc <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002486:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002488:	4b50      	ldr	r3, [pc, #320]	; (80025cc <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	494d      	ldr	r1, [pc, #308]	; (80025cc <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	4313      	orrs	r3, r2
 8002498:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d040      	beq.n	8002528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d107      	bne.n	80024be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ae:	4b47      	ldr	r3, [pc, #284]	; (80025cc <HAL_RCC_ClockConfig+0x1c4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d115      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e07f      	b.n	80025be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d107      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c6:	4b41      	ldr	r3, [pc, #260]	; (80025cc <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d109      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e073      	b.n	80025be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d6:	4b3d      	ldr	r3, [pc, #244]	; (80025cc <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e06b      	b.n	80025be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024e6:	4b39      	ldr	r3, [pc, #228]	; (80025cc <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f023 0203 	bic.w	r2, r3, #3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	4936      	ldr	r1, [pc, #216]	; (80025cc <HAL_RCC_ClockConfig+0x1c4>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024f8:	f7fe ff38 	bl	800136c <HAL_GetTick>
 80024fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fe:	e00a      	b.n	8002516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002500:	f7fe ff34 	bl	800136c <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f241 3288 	movw	r2, #5000	; 0x1388
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e053      	b.n	80025be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002516:	4b2d      	ldr	r3, [pc, #180]	; (80025cc <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 020c 	and.w	r2, r3, #12
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	429a      	cmp	r2, r3
 8002526:	d1eb      	bne.n	8002500 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002528:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <HAL_RCC_ClockConfig+0x1c0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d210      	bcs.n	8002558 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002536:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 0207 	bic.w	r2, r3, #7
 800253e:	4922      	ldr	r1, [pc, #136]	; (80025c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002546:	4b20      	ldr	r3, [pc, #128]	; (80025c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d001      	beq.n	8002558 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e032      	b.n	80025be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002564:	4b19      	ldr	r3, [pc, #100]	; (80025cc <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4916      	ldr	r1, [pc, #88]	; (80025cc <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	4313      	orrs	r3, r2
 8002574:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d009      	beq.n	8002596 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002582:	4b12      	ldr	r3, [pc, #72]	; (80025cc <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	490e      	ldr	r1, [pc, #56]	; (80025cc <HAL_RCC_ClockConfig+0x1c4>)
 8002592:	4313      	orrs	r3, r2
 8002594:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002596:	f000 f821 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 800259a:	4601      	mov	r1, r0
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	091b      	lsrs	r3, r3, #4
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <HAL_RCC_ClockConfig+0x1c8>)
 80025a8:	5cd3      	ldrb	r3, [r2, r3]
 80025aa:	fa21 f303 	lsr.w	r3, r1, r3
 80025ae:	4a09      	ldr	r2, [pc, #36]	; (80025d4 <HAL_RCC_ClockConfig+0x1cc>)
 80025b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025b2:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <HAL_RCC_ClockConfig+0x1d0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fd92 	bl	80010e0 <HAL_InitTick>

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40022000 	.word	0x40022000
 80025cc:	40021000 	.word	0x40021000
 80025d0:	0800743c 	.word	0x0800743c
 80025d4:	20000000 	.word	0x20000000
 80025d8:	20000004 	.word	0x20000004

080025dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025dc:	b490      	push	{r4, r7}
 80025de:	b08a      	sub	sp, #40	; 0x28
 80025e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025e2:	4b2a      	ldr	r3, [pc, #168]	; (800268c <HAL_RCC_GetSysClockFreq+0xb0>)
 80025e4:	1d3c      	adds	r4, r7, #4
 80025e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025ec:	4b28      	ldr	r3, [pc, #160]	; (8002690 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
 80025fa:	2300      	movs	r3, #0
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002606:	4b23      	ldr	r3, [pc, #140]	; (8002694 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b04      	cmp	r3, #4
 8002614:	d002      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x40>
 8002616:	2b08      	cmp	r3, #8
 8002618:	d003      	beq.n	8002622 <HAL_RCC_GetSysClockFreq+0x46>
 800261a:	e02d      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800261c:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <HAL_RCC_GetSysClockFreq+0xbc>)
 800261e:	623b      	str	r3, [r7, #32]
      break;
 8002620:	e02d      	b.n	800267e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	0c9b      	lsrs	r3, r3, #18
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800262e:	4413      	add	r3, r2
 8002630:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002634:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d013      	beq.n	8002668 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002640:	4b14      	ldr	r3, [pc, #80]	; (8002694 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	0c5b      	lsrs	r3, r3, #17
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800264e:	4413      	add	r3, r2
 8002650:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002654:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	4a0f      	ldr	r2, [pc, #60]	; (8002698 <HAL_RCC_GetSysClockFreq+0xbc>)
 800265a:	fb02 f203 	mul.w	r2, r2, r3
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	fbb2 f3f3 	udiv	r3, r2, r3
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
 8002666:	e004      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	4a0c      	ldr	r2, [pc, #48]	; (800269c <HAL_RCC_GetSysClockFreq+0xc0>)
 800266c:	fb02 f303 	mul.w	r3, r2, r3
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	623b      	str	r3, [r7, #32]
      break;
 8002676:	e002      	b.n	800267e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002678:	4b07      	ldr	r3, [pc, #28]	; (8002698 <HAL_RCC_GetSysClockFreq+0xbc>)
 800267a:	623b      	str	r3, [r7, #32]
      break;
 800267c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800267e:	6a3b      	ldr	r3, [r7, #32]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3728      	adds	r7, #40	; 0x28
 8002684:	46bd      	mov	sp, r7
 8002686:	bc90      	pop	{r4, r7}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	080073a4 	.word	0x080073a4
 8002690:	080073b4 	.word	0x080073b4
 8002694:	40021000 	.word	0x40021000
 8002698:	007a1200 	.word	0x007a1200
 800269c:	003d0900 	.word	0x003d0900

080026a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a4:	4b02      	ldr	r3, [pc, #8]	; (80026b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80026a6:	681b      	ldr	r3, [r3, #0]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr
 80026b0:	20000000 	.word	0x20000000

080026b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026b8:	f7ff fff2 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 80026bc:	4601      	mov	r1, r0
 80026be:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	0a1b      	lsrs	r3, r3, #8
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	4a03      	ldr	r2, [pc, #12]	; (80026d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ca:	5cd3      	ldrb	r3, [r2, r3]
 80026cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40021000 	.word	0x40021000
 80026d8:	0800744c 	.word	0x0800744c

080026dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026e0:	f7ff ffde 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 80026e4:	4601      	mov	r1, r0
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	0adb      	lsrs	r3, r3, #11
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	4a03      	ldr	r2, [pc, #12]	; (8002700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026f2:	5cd3      	ldrb	r3, [r2, r3]
 80026f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40021000 	.word	0x40021000
 8002700:	0800744c 	.word	0x0800744c

08002704 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	220f      	movs	r2, #15
 8002712:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <HAL_RCC_GetClockConfig+0x58>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 0203 	and.w	r2, r3, #3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002720:	4b0e      	ldr	r3, [pc, #56]	; (800275c <HAL_RCC_GetClockConfig+0x58>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_RCC_GetClockConfig+0x58>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002738:	4b08      	ldr	r3, [pc, #32]	; (800275c <HAL_RCC_GetClockConfig+0x58>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	08db      	lsrs	r3, r3, #3
 800273e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002746:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_RCC_GetClockConfig+0x5c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0207 	and.w	r2, r3, #7
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr
 800275c:	40021000 	.word	0x40021000
 8002760:	40022000 	.word	0x40022000

08002764 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <RCC_Delay+0x34>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0a      	ldr	r2, [pc, #40]	; (800279c <RCC_Delay+0x38>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	0a5b      	lsrs	r3, r3, #9
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	fb02 f303 	mul.w	r3, r2, r3
 800277e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002780:	bf00      	nop
  }
  while (Delay --);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1e5a      	subs	r2, r3, #1
 8002786:	60fa      	str	r2, [r7, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f9      	bne.n	8002780 <RCC_Delay+0x1c>
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	20000000 	.word	0x20000000
 800279c:	10624dd3 	.word	0x10624dd3

080027a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	2300      	movs	r3, #0
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d07d      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80027bc:	2300      	movs	r3, #0
 80027be:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c0:	4b4f      	ldr	r3, [pc, #316]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10d      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027cc:	4b4c      	ldr	r3, [pc, #304]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	4a4b      	ldr	r2, [pc, #300]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d6:	61d3      	str	r3, [r2, #28]
 80027d8:	4b49      	ldr	r3, [pc, #292]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e4:	2301      	movs	r3, #1
 80027e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e8:	4b46      	ldr	r3, [pc, #280]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d118      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f4:	4b43      	ldr	r3, [pc, #268]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a42      	ldr	r2, [pc, #264]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002800:	f7fe fdb4 	bl	800136c <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002806:	e008      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002808:	f7fe fdb0 	bl	800136c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b64      	cmp	r3, #100	; 0x64
 8002814:	d901      	bls.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e06d      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281a:	4b3a      	ldr	r3, [pc, #232]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002826:	4b36      	ldr	r3, [pc, #216]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800282e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d02e      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	429a      	cmp	r2, r3
 8002842:	d027      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002844:	4b2e      	ldr	r3, [pc, #184]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800284c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800284e:	4b2e      	ldr	r3, [pc, #184]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002850:	2201      	movs	r2, #1
 8002852:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002854:	4b2c      	ldr	r3, [pc, #176]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800285a:	4a29      	ldr	r2, [pc, #164]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d014      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286a:	f7fe fd7f 	bl	800136c <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002870:	e00a      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002872:	f7fe fd7b 	bl	800136c <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002880:	4293      	cmp	r3, r2
 8002882:	d901      	bls.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e036      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002888:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0ee      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002894:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4917      	ldr	r1, [pc, #92]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028a6:	7dfb      	ldrb	r3, [r7, #23]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d105      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ac:	4b14      	ldr	r3, [pc, #80]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	4a13      	ldr	r2, [pc, #76]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028c4:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	490b      	ldr	r1, [pc, #44]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0310 	and.w	r3, r3, #16
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d008      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028e2:	4b07      	ldr	r3, [pc, #28]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	4904      	ldr	r1, [pc, #16]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000
 8002904:	40007000 	.word	0x40007000
 8002908:	42420440 	.word	0x42420440

0800290c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e076      	b.n	8002a0c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	2b00      	cmp	r3, #0
 8002924:	d108      	bne.n	8002938 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800292e:	d009      	beq.n	8002944 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	61da      	str	r2, [r3, #28]
 8002936:	e005      	b.n	8002944 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7fe fac0 	bl	8000ee4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800297a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800298c:	431a      	orrs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029b4:	431a      	orrs	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c8:	ea42 0103 	orr.w	r1, r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	0c1a      	lsrs	r2, r3, #16
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f002 0204 	and.w	r2, r2, #4
 80029ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	69da      	ldr	r2, [r3, #28]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	4613      	mov	r3, r2
 8002a22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_SPI_Transmit+0x22>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e126      	b.n	8002c84 <HAL_SPI_Transmit+0x270>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a3e:	f7fe fc95 	bl	800136c <HAL_GetTick>
 8002a42:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a44:	88fb      	ldrh	r3, [r7, #6]
 8002a46:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d002      	beq.n	8002a5a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a54:	2302      	movs	r3, #2
 8002a56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a58:	e10b      	b.n	8002c72 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d002      	beq.n	8002a66 <HAL_SPI_Transmit+0x52>
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d102      	bne.n	8002a6c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a6a:	e102      	b.n	8002c72 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2203      	movs	r2, #3
 8002a70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	88fa      	ldrh	r2, [r7, #6]
 8002a84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	88fa      	ldrh	r2, [r7, #6]
 8002a8a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ab2:	d10f      	bne.n	8002ad4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ac2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ad2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ade:	2b40      	cmp	r3, #64	; 0x40
 8002ae0:	d007      	beq.n	8002af2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002af0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002afa:	d14b      	bne.n	8002b94 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <HAL_SPI_Transmit+0xf6>
 8002b04:	8afb      	ldrh	r3, [r7, #22]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d13e      	bne.n	8002b88 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	881a      	ldrh	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	1c9a      	adds	r2, r3, #2
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b2e:	e02b      	b.n	8002b88 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d112      	bne.n	8002b64 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	881a      	ldrh	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	1c9a      	adds	r2, r3, #2
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b62:	e011      	b.n	8002b88 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b64:	f7fe fc02 	bl	800136c <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d803      	bhi.n	8002b7c <HAL_SPI_Transmit+0x168>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b7a:	d102      	bne.n	8002b82 <HAL_SPI_Transmit+0x16e>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d102      	bne.n	8002b88 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b86:	e074      	b.n	8002c72 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1ce      	bne.n	8002b30 <HAL_SPI_Transmit+0x11c>
 8002b92:	e04c      	b.n	8002c2e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <HAL_SPI_Transmit+0x18e>
 8002b9c:	8afb      	ldrh	r3, [r7, #22]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d140      	bne.n	8002c24 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	330c      	adds	r3, #12
 8002bac:	7812      	ldrb	r2, [r2, #0]
 8002bae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002bc8:	e02c      	b.n	8002c24 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d113      	bne.n	8002c00 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	330c      	adds	r3, #12
 8002be2:	7812      	ldrb	r2, [r2, #0]
 8002be4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	86da      	strh	r2, [r3, #54]	; 0x36
 8002bfe:	e011      	b.n	8002c24 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c00:	f7fe fbb4 	bl	800136c <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d803      	bhi.n	8002c18 <HAL_SPI_Transmit+0x204>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c16:	d102      	bne.n	8002c1e <HAL_SPI_Transmit+0x20a>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d102      	bne.n	8002c24 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c22:	e026      	b.n	8002c72 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1cd      	bne.n	8002bca <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	6839      	ldr	r1, [r7, #0]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 fbb8 	bl	80033a8 <SPI_EndRxTxTransaction>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2220      	movs	r2, #32
 8002c42:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10a      	bne.n	8002c62 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	77fb      	strb	r3, [r7, #31]
 8002c6e:	e000      	b.n	8002c72 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002c70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c82:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3720      	adds	r7, #32
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ca8:	d112      	bne.n	8002cd0 <HAL_SPI_Receive+0x44>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10e      	bne.n	8002cd0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002cba:	88fa      	ldrh	r2, [r7, #6]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f8f1 	bl	8002eae <HAL_SPI_TransmitReceive>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	e0ea      	b.n	8002ea6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d101      	bne.n	8002cde <HAL_SPI_Receive+0x52>
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e0e3      	b.n	8002ea6 <HAL_SPI_Receive+0x21a>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ce6:	f7fe fb41 	bl	800136c <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d002      	beq.n	8002cfe <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002cfc:	e0ca      	b.n	8002e94 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <HAL_SPI_Receive+0x7e>
 8002d04:	88fb      	ldrh	r3, [r7, #6]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d102      	bne.n	8002d10 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d0e:	e0c1      	b.n	8002e94 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2204      	movs	r2, #4
 8002d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	88fa      	ldrh	r2, [r7, #6]
 8002d28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	88fa      	ldrh	r2, [r7, #6]
 8002d2e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d56:	d10f      	bne.n	8002d78 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d76:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d82:	2b40      	cmp	r3, #64	; 0x40
 8002d84:	d007      	beq.n	8002d96 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d94:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d162      	bne.n	8002e64 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002d9e:	e02e      	b.n	8002dfe <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d115      	bne.n	8002dda <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f103 020c 	add.w	r2, r3, #12
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dba:	7812      	ldrb	r2, [r2, #0]
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dd8:	e011      	b.n	8002dfe <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dda:	f7fe fac7 	bl	800136c <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d803      	bhi.n	8002df2 <HAL_SPI_Receive+0x166>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002df0:	d102      	bne.n	8002df8 <HAL_SPI_Receive+0x16c>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d102      	bne.n	8002dfe <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002dfc:	e04a      	b.n	8002e94 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1cb      	bne.n	8002da0 <HAL_SPI_Receive+0x114>
 8002e08:	e031      	b.n	8002e6e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d113      	bne.n	8002e40 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e22:	b292      	uxth	r2, r2
 8002e24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2a:	1c9a      	adds	r2, r3, #2
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e3e:	e011      	b.n	8002e64 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e40:	f7fe fa94 	bl	800136c <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d803      	bhi.n	8002e58 <HAL_SPI_Receive+0x1cc>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e56:	d102      	bne.n	8002e5e <HAL_SPI_Receive+0x1d2>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d102      	bne.n	8002e64 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002e62:	e017      	b.n	8002e94 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1cd      	bne.n	8002e0a <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	6839      	ldr	r1, [r7, #0]
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 fa46 	bl	8003304 <SPI_EndRxTransaction>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2220      	movs	r2, #32
 8002e82:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d002      	beq.n	8002e92 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	75fb      	strb	r3, [r7, #23]
 8002e90:	e000      	b.n	8002e94 <HAL_SPI_Receive+0x208>
  }

error :
 8002e92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b08c      	sub	sp, #48	; 0x30
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
 8002eba:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_SPI_TransmitReceive+0x26>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e18a      	b.n	80031ea <HAL_SPI_TransmitReceive+0x33c>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002edc:	f7fe fa46 	bl	800136c <HAL_GetTick>
 8002ee0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ee8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002ef2:	887b      	ldrh	r3, [r7, #2]
 8002ef4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ef6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d00f      	beq.n	8002f1e <HAL_SPI_TransmitReceive+0x70>
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f04:	d107      	bne.n	8002f16 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d103      	bne.n	8002f16 <HAL_SPI_TransmitReceive+0x68>
 8002f0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d003      	beq.n	8002f1e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002f16:	2302      	movs	r3, #2
 8002f18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f1c:	e15b      	b.n	80031d6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_SPI_TransmitReceive+0x82>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <HAL_SPI_TransmitReceive+0x82>
 8002f2a:	887b      	ldrh	r3, [r7, #2]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d103      	bne.n	8002f38 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f36:	e14e      	b.n	80031d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d003      	beq.n	8002f4c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2205      	movs	r2, #5
 8002f48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	887a      	ldrh	r2, [r7, #2]
 8002f5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	887a      	ldrh	r2, [r7, #2]
 8002f62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	887a      	ldrh	r2, [r7, #2]
 8002f6e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	887a      	ldrh	r2, [r7, #2]
 8002f74:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8c:	2b40      	cmp	r3, #64	; 0x40
 8002f8e:	d007      	beq.n	8002fa0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fa8:	d178      	bne.n	800309c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <HAL_SPI_TransmitReceive+0x10a>
 8002fb2:	8b7b      	ldrh	r3, [r7, #26]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d166      	bne.n	8003086 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	881a      	ldrh	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	1c9a      	adds	r2, r3, #2
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fdc:	e053      	b.n	8003086 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d11b      	bne.n	8003024 <HAL_SPI_TransmitReceive+0x176>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d016      	beq.n	8003024 <HAL_SPI_TransmitReceive+0x176>
 8002ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d113      	bne.n	8003024 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003000:	881a      	ldrh	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	1c9a      	adds	r2, r3, #2
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b01      	cmp	r3, #1
 8003030:	d119      	bne.n	8003066 <HAL_SPI_TransmitReceive+0x1b8>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003036:	b29b      	uxth	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d014      	beq.n	8003066 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003046:	b292      	uxth	r2, r2
 8003048:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304e:	1c9a      	adds	r2, r3, #2
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003058:	b29b      	uxth	r3, r3
 800305a:	3b01      	subs	r3, #1
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003062:	2301      	movs	r3, #1
 8003064:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003066:	f7fe f981 	bl	800136c <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003072:	429a      	cmp	r2, r3
 8003074:	d807      	bhi.n	8003086 <HAL_SPI_TransmitReceive+0x1d8>
 8003076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800307c:	d003      	beq.n	8003086 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003084:	e0a7      	b.n	80031d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800308a:	b29b      	uxth	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1a6      	bne.n	8002fde <HAL_SPI_TransmitReceive+0x130>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1a1      	bne.n	8002fde <HAL_SPI_TransmitReceive+0x130>
 800309a:	e07c      	b.n	8003196 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <HAL_SPI_TransmitReceive+0x1fc>
 80030a4:	8b7b      	ldrh	r3, [r7, #26]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d16b      	bne.n	8003182 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	330c      	adds	r3, #12
 80030b4:	7812      	ldrb	r2, [r2, #0]
 80030b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030d0:	e057      	b.n	8003182 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d11c      	bne.n	800311a <HAL_SPI_TransmitReceive+0x26c>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d017      	beq.n	800311a <HAL_SPI_TransmitReceive+0x26c>
 80030ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d114      	bne.n	800311a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	330c      	adds	r3, #12
 80030fa:	7812      	ldrb	r2, [r2, #0]
 80030fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	1c5a      	adds	r2, r3, #1
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800310c:	b29b      	uxth	r3, r3
 800310e:	3b01      	subs	r3, #1
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b01      	cmp	r3, #1
 8003126:	d119      	bne.n	800315c <HAL_SPI_TransmitReceive+0x2ae>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800312c:	b29b      	uxth	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d014      	beq.n	800315c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800314e:	b29b      	uxth	r3, r3
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003158:	2301      	movs	r3, #1
 800315a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800315c:	f7fe f906 	bl	800136c <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003168:	429a      	cmp	r2, r3
 800316a:	d803      	bhi.n	8003174 <HAL_SPI_TransmitReceive+0x2c6>
 800316c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003172:	d102      	bne.n	800317a <HAL_SPI_TransmitReceive+0x2cc>
 8003174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003176:	2b00      	cmp	r3, #0
 8003178:	d103      	bne.n	8003182 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003180:	e029      	b.n	80031d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1a2      	bne.n	80030d2 <HAL_SPI_TransmitReceive+0x224>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d19d      	bne.n	80030d2 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003198:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 f904 	bl	80033a8 <SPI_EndRxTxTransaction>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d006      	beq.n	80031b4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2220      	movs	r2, #32
 80031b0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80031b2:	e010      	b.n	80031d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10b      	bne.n	80031d4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	e000      	b.n	80031d6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80031d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3730      	adds	r7, #48	; 0x30
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b088      	sub	sp, #32
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	4613      	mov	r3, r2
 8003202:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003204:	f7fe f8b2 	bl	800136c <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320c:	1a9b      	subs	r3, r3, r2
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	4413      	add	r3, r2
 8003212:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003214:	f7fe f8aa 	bl	800136c <HAL_GetTick>
 8003218:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800321a:	4b39      	ldr	r3, [pc, #228]	; (8003300 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	015b      	lsls	r3, r3, #5
 8003220:	0d1b      	lsrs	r3, r3, #20
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	fb02 f303 	mul.w	r3, r2, r3
 8003228:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800322a:	e054      	b.n	80032d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003232:	d050      	beq.n	80032d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003234:	f7fe f89a 	bl	800136c <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	429a      	cmp	r2, r3
 8003242:	d902      	bls.n	800324a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d13d      	bne.n	80032c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003258:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003262:	d111      	bne.n	8003288 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800326c:	d004      	beq.n	8003278 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003276:	d107      	bne.n	8003288 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003286:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003290:	d10f      	bne.n	80032b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e017      	b.n	80032f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4013      	ands	r3, r2
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	bf0c      	ite	eq
 80032e6:	2301      	moveq	r3, #1
 80032e8:	2300      	movne	r3, #0
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	461a      	mov	r2, r3
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d19b      	bne.n	800322c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3720      	adds	r7, #32
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000000 	.word	0x20000000

08003304 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af02      	add	r7, sp, #8
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003318:	d111      	bne.n	800333e <SPI_EndRxTransaction+0x3a>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003322:	d004      	beq.n	800332e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800332c:	d107      	bne.n	800333e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800333c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003346:	d117      	bne.n	8003378 <SPI_EndRxTransaction+0x74>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003350:	d112      	bne.n	8003378 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2200      	movs	r2, #0
 800335a:	2101      	movs	r1, #1
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f7ff ff49 	bl	80031f4 <SPI_WaitFlagStateUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d01a      	beq.n	800339e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336c:	f043 0220 	orr.w	r2, r3, #32
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e013      	b.n	80033a0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2200      	movs	r2, #0
 8003380:	2180      	movs	r1, #128	; 0x80
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f7ff ff36 	bl	80031f4 <SPI_WaitFlagStateUntilTimeout>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d007      	beq.n	800339e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003392:	f043 0220 	orr.w	r2, r3, #32
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e000      	b.n	80033a0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af02      	add	r7, sp, #8
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2200      	movs	r2, #0
 80033bc:	2180      	movs	r1, #128	; 0x80
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f7ff ff18 	bl	80031f4 <SPI_WaitFlagStateUntilTimeout>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d007      	beq.n	80033da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ce:	f043 0220 	orr.w	r2, r3, #32
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e000      	b.n	80033dc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e041      	b.n	800347a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f839 	bl	8003482 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3304      	adds	r3, #4
 8003420:	4619      	mov	r1, r3
 8003422:	4610      	mov	r0, r2
 8003424:	f000 f9b4 	bl	8003790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr

08003494 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d001      	beq.n	80034ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e03a      	b.n	8003522 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0201 	orr.w	r2, r2, #1
 80034c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a18      	ldr	r2, [pc, #96]	; (800352c <HAL_TIM_Base_Start_IT+0x98>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00e      	beq.n	80034ec <HAL_TIM_Base_Start_IT+0x58>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d6:	d009      	beq.n	80034ec <HAL_TIM_Base_Start_IT+0x58>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a14      	ldr	r2, [pc, #80]	; (8003530 <HAL_TIM_Base_Start_IT+0x9c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d004      	beq.n	80034ec <HAL_TIM_Base_Start_IT+0x58>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a13      	ldr	r2, [pc, #76]	; (8003534 <HAL_TIM_Base_Start_IT+0xa0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d111      	bne.n	8003510 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b06      	cmp	r3, #6
 80034fc:	d010      	beq.n	8003520 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f042 0201 	orr.w	r2, r2, #1
 800350c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350e:	e007      	b.n	8003520 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr
 800352c:	40012c00 	.word	0x40012c00
 8003530:	40000400 	.word	0x40000400
 8003534:	40000800 	.word	0x40000800

08003538 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b02      	cmp	r3, #2
 800354c:	d122      	bne.n	8003594 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b02      	cmp	r3, #2
 800355a:	d11b      	bne.n	8003594 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0202 	mvn.w	r2, #2
 8003564:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f8ed 	bl	800375a <HAL_TIM_IC_CaptureCallback>
 8003580:	e005      	b.n	800358e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f8e0 	bl	8003748 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f8ef 	bl	800376c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d122      	bne.n	80035e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d11b      	bne.n	80035e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0204 	mvn.w	r2, #4
 80035b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2202      	movs	r2, #2
 80035be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f8c3 	bl	800375a <HAL_TIM_IC_CaptureCallback>
 80035d4:	e005      	b.n	80035e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f8b6 	bl	8003748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f8c5 	bl	800376c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d122      	bne.n	800363c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b08      	cmp	r3, #8
 8003602:	d11b      	bne.n	800363c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0208 	mvn.w	r2, #8
 800360c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2204      	movs	r2, #4
 8003612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f899 	bl	800375a <HAL_TIM_IC_CaptureCallback>
 8003628:	e005      	b.n	8003636 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f88c 	bl	8003748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f89b 	bl	800376c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	2b10      	cmp	r3, #16
 8003648:	d122      	bne.n	8003690 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	2b10      	cmp	r3, #16
 8003656:	d11b      	bne.n	8003690 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f06f 0210 	mvn.w	r2, #16
 8003660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2208      	movs	r2, #8
 8003666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f86f 	bl	800375a <HAL_TIM_IC_CaptureCallback>
 800367c:	e005      	b.n	800368a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f862 	bl	8003748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f871 	bl	800376c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b01      	cmp	r3, #1
 800369c:	d10e      	bne.n	80036bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d107      	bne.n	80036bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0201 	mvn.w	r2, #1
 80036b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fd f87a 	bl	80007b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c6:	2b80      	cmp	r3, #128	; 0x80
 80036c8:	d10e      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d4:	2b80      	cmp	r3, #128	; 0x80
 80036d6:	d107      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f8bf 	bl	8003866 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f2:	2b40      	cmp	r3, #64	; 0x40
 80036f4:	d10e      	bne.n	8003714 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003700:	2b40      	cmp	r3, #64	; 0x40
 8003702:	d107      	bne.n	8003714 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800370c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f835 	bl	800377e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b20      	cmp	r3, #32
 8003720:	d10e      	bne.n	8003740 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b20      	cmp	r3, #32
 800372e:	d107      	bne.n	8003740 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0220 	mvn.w	r2, #32
 8003738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f88a 	bl	8003854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr

0800375a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr

0800377e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr

08003790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a29      	ldr	r2, [pc, #164]	; (8003848 <TIM_Base_SetConfig+0xb8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00b      	beq.n	80037c0 <TIM_Base_SetConfig+0x30>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ae:	d007      	beq.n	80037c0 <TIM_Base_SetConfig+0x30>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a26      	ldr	r2, [pc, #152]	; (800384c <TIM_Base_SetConfig+0xbc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d003      	beq.n	80037c0 <TIM_Base_SetConfig+0x30>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a25      	ldr	r2, [pc, #148]	; (8003850 <TIM_Base_SetConfig+0xc0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d108      	bne.n	80037d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a1c      	ldr	r2, [pc, #112]	; (8003848 <TIM_Base_SetConfig+0xb8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00b      	beq.n	80037f2 <TIM_Base_SetConfig+0x62>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e0:	d007      	beq.n	80037f2 <TIM_Base_SetConfig+0x62>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a19      	ldr	r2, [pc, #100]	; (800384c <TIM_Base_SetConfig+0xbc>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d003      	beq.n	80037f2 <TIM_Base_SetConfig+0x62>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a18      	ldr	r2, [pc, #96]	; (8003850 <TIM_Base_SetConfig+0xc0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d108      	bne.n	8003804 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4313      	orrs	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a07      	ldr	r2, [pc, #28]	; (8003848 <TIM_Base_SetConfig+0xb8>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d103      	bne.n	8003838 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	615a      	str	r2, [r3, #20]
}
 800383e:	bf00      	nop
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr
 8003848:	40012c00 	.word	0x40012c00
 800384c:	40000400 	.word	0x40000400
 8003850:	40000800 	.word	0x40000800

08003854 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr

08003866 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr

08003878 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e03f      	b.n	800390a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fd fb9a 	bl	8000fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2224      	movs	r2, #36	; 0x24
 80038a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f829 	bl	8003914 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695a      	ldr	r2, [r3, #20]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800394e:	f023 030c 	bic.w	r3, r3, #12
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6812      	ldr	r2, [r2, #0]
 8003956:	68b9      	ldr	r1, [r7, #8]
 8003958:	430b      	orrs	r3, r1
 800395a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a2c      	ldr	r2, [pc, #176]	; (8003a28 <UART_SetConfig+0x114>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d103      	bne.n	8003984 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800397c:	f7fe feae 	bl	80026dc <HAL_RCC_GetPCLK2Freq>
 8003980:	60f8      	str	r0, [r7, #12]
 8003982:	e002      	b.n	800398a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003984:	f7fe fe96 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 8003988:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	009a      	lsls	r2, r3, #2
 8003994:	441a      	add	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a0:	4a22      	ldr	r2, [pc, #136]	; (8003a2c <UART_SetConfig+0x118>)
 80039a2:	fba2 2303 	umull	r2, r3, r2, r3
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	0119      	lsls	r1, r3, #4
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	009a      	lsls	r2, r3, #2
 80039b4:	441a      	add	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80039c0:	4b1a      	ldr	r3, [pc, #104]	; (8003a2c <UART_SetConfig+0x118>)
 80039c2:	fba3 0302 	umull	r0, r3, r3, r2
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	2064      	movs	r0, #100	; 0x64
 80039ca:	fb00 f303 	mul.w	r3, r0, r3
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	3332      	adds	r3, #50	; 0x32
 80039d4:	4a15      	ldr	r2, [pc, #84]	; (8003a2c <UART_SetConfig+0x118>)
 80039d6:	fba2 2303 	umull	r2, r3, r2, r3
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039e0:	4419      	add	r1, r3
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	009a      	lsls	r2, r3, #2
 80039ec:	441a      	add	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039f8:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <UART_SetConfig+0x118>)
 80039fa:	fba3 0302 	umull	r0, r3, r3, r2
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	2064      	movs	r0, #100	; 0x64
 8003a02:	fb00 f303 	mul.w	r3, r0, r3
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	3332      	adds	r3, #50	; 0x32
 8003a0c:	4a07      	ldr	r2, [pc, #28]	; (8003a2c <UART_SetConfig+0x118>)
 8003a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	f003 020f 	and.w	r2, r3, #15
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	440a      	add	r2, r1
 8003a1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a20:	bf00      	nop
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40013800 	.word	0x40013800
 8003a2c:	51eb851f 	.word	0x51eb851f

08003a30 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a36:	f3ef 8305 	mrs	r3, IPSR
 8003a3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10f      	bne.n	8003a62 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a42:	f3ef 8310 	mrs	r3, PRIMASK
 8003a46:	607b      	str	r3, [r7, #4]
  return(result);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <osKernelInitialize+0x32>
 8003a4e:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <osKernelInitialize+0x60>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d109      	bne.n	8003a6a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a56:	f3ef 8311 	mrs	r3, BASEPRI
 8003a5a:	603b      	str	r3, [r7, #0]
  return(result);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003a62:	f06f 0305 	mvn.w	r3, #5
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	e00c      	b.n	8003a84 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a6a:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <osKernelInitialize+0x60>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d105      	bne.n	8003a7e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003a72:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <osKernelInitialize+0x60>)
 8003a74:	2201      	movs	r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	e002      	b.n	8003a84 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a82:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003a84:	68fb      	ldr	r3, [r7, #12]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr
 8003a90:	20000098 	.word	0x20000098

08003a94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a9a:	f3ef 8305 	mrs	r3, IPSR
 8003a9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003aa0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10f      	bne.n	8003ac6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8003aaa:	607b      	str	r3, [r7, #4]
  return(result);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d109      	bne.n	8003ac6 <osKernelStart+0x32>
 8003ab2:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <osKernelStart+0x64>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d109      	bne.n	8003ace <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003aba:	f3ef 8311 	mrs	r3, BASEPRI
 8003abe:	603b      	str	r3, [r7, #0]
  return(result);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <osKernelStart+0x3a>
    stat = osErrorISR;
 8003ac6:	f06f 0305 	mvn.w	r3, #5
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	e00e      	b.n	8003aec <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003ace:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <osKernelStart+0x64>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d107      	bne.n	8003ae6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003ad6:	4b08      	ldr	r3, [pc, #32]	; (8003af8 <osKernelStart+0x64>)
 8003ad8:	2202      	movs	r2, #2
 8003ada:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003adc:	f001 f864 	bl	8004ba8 <vTaskStartScheduler>
      stat = osOK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	e002      	b.n	8003aec <osKernelStart+0x58>
    } else {
      stat = osError;
 8003ae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003aea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003aec:	68fb      	ldr	r3, [r7, #12]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000098 	.word	0x20000098

08003afc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b092      	sub	sp, #72	; 0x48
 8003b00:	af04      	add	r7, sp, #16
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b0c:	f3ef 8305 	mrs	r3, IPSR
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f040 8094 	bne.w	8003c42 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b1e:	623b      	str	r3, [r7, #32]
  return(result);
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f040 808d 	bne.w	8003c42 <osThreadNew+0x146>
 8003b28:	4b48      	ldr	r3, [pc, #288]	; (8003c4c <osThreadNew+0x150>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d106      	bne.n	8003b3e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b30:	f3ef 8311 	mrs	r3, BASEPRI
 8003b34:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f040 8082 	bne.w	8003c42 <osThreadNew+0x146>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d07e      	beq.n	8003c42 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003b44:	2380      	movs	r3, #128	; 0x80
 8003b46:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003b48:	2318      	movs	r3, #24
 8003b4a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003b50:	f107 031b 	add.w	r3, r7, #27
 8003b54:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b5a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d045      	beq.n	8003bee <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <osThreadNew+0x74>
        name = attr->name;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <osThreadNew+0x9a>
 8003b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b86:	2b38      	cmp	r3, #56	; 0x38
 8003b88:	d805      	bhi.n	8003b96 <osThreadNew+0x9a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <osThreadNew+0x9e>
        return (NULL);
 8003b96:	2300      	movs	r3, #0
 8003b98:	e054      	b.n	8003c44 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	089b      	lsrs	r3, r3, #2
 8003ba8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00e      	beq.n	8003bd0 <osThreadNew+0xd4>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	2b5b      	cmp	r3, #91	; 0x5b
 8003bb8:	d90a      	bls.n	8003bd0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d006      	beq.n	8003bd0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <osThreadNew+0xd4>
        mem = 1;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bce:	e010      	b.n	8003bf2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10c      	bne.n	8003bf2 <osThreadNew+0xf6>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d108      	bne.n	8003bf2 <osThreadNew+0xf6>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d104      	bne.n	8003bf2 <osThreadNew+0xf6>
          mem = 0;
 8003be8:	2300      	movs	r3, #0
 8003bea:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bec:	e001      	b.n	8003bf2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d110      	bne.n	8003c1a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c00:	9202      	str	r2, [sp, #8]
 8003c02:	9301      	str	r3, [sp, #4]
 8003c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 fe02 	bl	8004818 <xTaskCreateStatic>
 8003c14:	4603      	mov	r3, r0
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	e013      	b.n	8003c42 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d110      	bne.n	8003c42 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	f107 0314 	add.w	r3, r7, #20
 8003c28:	9301      	str	r3, [sp, #4]
 8003c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 fe49 	bl	80048ca <xTaskCreate>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d001      	beq.n	8003c42 <osThreadNew+0x146>
          hTask = NULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003c42:	697b      	ldr	r3, [r7, #20]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3738      	adds	r7, #56	; 0x38
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20000098 	.word	0x20000098

08003c50 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c58:	f3ef 8305 	mrs	r3, IPSR
 8003c5c:	613b      	str	r3, [r7, #16]
  return(result);
 8003c5e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10f      	bne.n	8003c84 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c64:	f3ef 8310 	mrs	r3, PRIMASK
 8003c68:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d109      	bne.n	8003c84 <osDelay+0x34>
 8003c70:	4b0d      	ldr	r3, [pc, #52]	; (8003ca8 <osDelay+0x58>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d109      	bne.n	8003c8c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c78:	f3ef 8311 	mrs	r3, BASEPRI
 8003c7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <osDelay+0x3c>
    stat = osErrorISR;
 8003c84:	f06f 0305 	mvn.w	r3, #5
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	e007      	b.n	8003c9c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 ff52 	bl	8004b40 <vTaskDelay>
    }
  }

  return (stat);
 8003c9c:	697b      	ldr	r3, [r7, #20]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20000098 	.word	0x20000098

08003cac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4a06      	ldr	r2, [pc, #24]	; (8003cd4 <vApplicationGetIdleTaskMemory+0x28>)
 8003cbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4a05      	ldr	r2, [pc, #20]	; (8003cd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8003cc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2280      	movs	r2, #128	; 0x80
 8003cc8:	601a      	str	r2, [r3, #0]
}
 8003cca:	bf00      	nop
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr
 8003cd4:	2000009c 	.word	0x2000009c
 8003cd8:	200000f8 	.word	0x200000f8

08003cdc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4a07      	ldr	r2, [pc, #28]	; (8003d08 <vApplicationGetTimerTaskMemory+0x2c>)
 8003cec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	4a06      	ldr	r2, [pc, #24]	; (8003d0c <vApplicationGetTimerTaskMemory+0x30>)
 8003cf2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cfa:	601a      	str	r2, [r3, #0]
}
 8003cfc:	bf00      	nop
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bc80      	pop	{r7}
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	200002f8 	.word	0x200002f8
 8003d0c:	20000354 	.word	0x20000354

08003d10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f103 0208 	add.w	r2, r3, #8
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f103 0208 	add.w	r2, r3, #8
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f103 0208 	add.w	r2, r3, #8
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr

08003d4e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bc80      	pop	{r7}
 8003d64:	4770      	bx	lr

08003d66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d66:	b480      	push	{r7}
 8003d68:	b085      	sub	sp, #20
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	601a      	str	r2, [r3, #0]
}
 8003da2:	bf00      	nop
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr

08003dac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dc2:	d103      	bne.n	8003dcc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	e00c      	b.n	8003de6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3308      	adds	r3, #8
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	e002      	b.n	8003dda <vListInsert+0x2e>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d2f6      	bcs.n	8003dd4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	601a      	str	r2, [r3, #0]
}
 8003e12:	bf00      	nop
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr

08003e1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6892      	ldr	r2, [r2, #8]
 8003e32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6852      	ldr	r2, [r2, #4]
 8003e3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d103      	bne.n	8003e50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	1e5a      	subs	r2, r3, #1
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr
	...

08003e70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d109      	bne.n	8003e98 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	e7fe      	b.n	8003e96 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003e98:	f001 ff96 	bl	8005dc8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea4:	68f9      	ldr	r1, [r7, #12]
 8003ea6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ea8:	fb01 f303 	mul.w	r3, r1, r3
 8003eac:	441a      	add	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	68f9      	ldr	r1, [r7, #12]
 8003ecc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ece:	fb01 f303 	mul.w	r3, r1, r3
 8003ed2:	441a      	add	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	22ff      	movs	r2, #255	; 0xff
 8003edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	22ff      	movs	r2, #255	; 0xff
 8003ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d114      	bne.n	8003f18 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d01a      	beq.n	8003f2c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	3310      	adds	r3, #16
 8003efa:	4618      	mov	r0, r3
 8003efc:	f001 f8d8 	bl	80050b0 <xTaskRemoveFromEventList>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d012      	beq.n	8003f2c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f06:	4b0d      	ldr	r3, [pc, #52]	; (8003f3c <xQueueGenericReset+0xcc>)
 8003f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	e009      	b.n	8003f2c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	3310      	adds	r3, #16
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff fef7 	bl	8003d10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	3324      	adds	r3, #36	; 0x24
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff fef2 	bl	8003d10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f2c:	f001 ff7a 	bl	8005e24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f30:	2301      	movs	r3, #1
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	e000ed04 	.word	0xe000ed04

08003f40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08e      	sub	sp, #56	; 0x38
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d109      	bne.n	8003f68 <xQueueGenericCreateStatic+0x28>
 8003f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f66:	e7fe      	b.n	8003f66 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d109      	bne.n	8003f82 <xQueueGenericCreateStatic+0x42>
 8003f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f80:	e7fe      	b.n	8003f80 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <xQueueGenericCreateStatic+0x4e>
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <xQueueGenericCreateStatic+0x52>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <xQueueGenericCreateStatic+0x54>
 8003f92:	2300      	movs	r3, #0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d109      	bne.n	8003fac <xQueueGenericCreateStatic+0x6c>
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	623b      	str	r3, [r7, #32]
 8003faa:	e7fe      	b.n	8003faa <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d102      	bne.n	8003fb8 <xQueueGenericCreateStatic+0x78>
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <xQueueGenericCreateStatic+0x7c>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <xQueueGenericCreateStatic+0x7e>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d109      	bne.n	8003fd6 <xQueueGenericCreateStatic+0x96>
 8003fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	61fb      	str	r3, [r7, #28]
 8003fd4:	e7fe      	b.n	8003fd4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003fd6:	2350      	movs	r3, #80	; 0x50
 8003fd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b50      	cmp	r3, #80	; 0x50
 8003fde:	d009      	beq.n	8003ff4 <xQueueGenericCreateStatic+0xb4>
 8003fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	61bb      	str	r3, [r7, #24]
 8003ff2:	e7fe      	b.n	8003ff2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00d      	beq.n	800401a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004006:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800400a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	4613      	mov	r3, r2
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	68b9      	ldr	r1, [r7, #8]
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f805 	bl	8004024 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800401a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800401c:	4618      	mov	r0, r3
 800401e:	3730      	adds	r7, #48	; 0x30
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d103      	bne.n	8004040 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	e002      	b.n	8004046 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004052:	2101      	movs	r1, #1
 8004054:	69b8      	ldr	r0, [r7, #24]
 8004056:	f7ff ff0b 	bl	8003e70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	78fa      	ldrb	r2, [r7, #3]
 800405e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004062:	bf00      	nop
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08e      	sub	sp, #56	; 0x38
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
 8004078:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800407a:	2300      	movs	r3, #0
 800407c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004084:	2b00      	cmp	r3, #0
 8004086:	d109      	bne.n	800409c <xQueueGenericSend+0x30>
 8004088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	62bb      	str	r3, [r7, #40]	; 0x28
 800409a:	e7fe      	b.n	800409a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d103      	bne.n	80040aa <xQueueGenericSend+0x3e>
 80040a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <xQueueGenericSend+0x42>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <xQueueGenericSend+0x44>
 80040ae:	2300      	movs	r3, #0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d109      	bne.n	80040c8 <xQueueGenericSend+0x5c>
 80040b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	627b      	str	r3, [r7, #36]	; 0x24
 80040c6:	e7fe      	b.n	80040c6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d103      	bne.n	80040d6 <xQueueGenericSend+0x6a>
 80040ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <xQueueGenericSend+0x6e>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <xQueueGenericSend+0x70>
 80040da:	2300      	movs	r3, #0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d109      	bne.n	80040f4 <xQueueGenericSend+0x88>
 80040e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	623b      	str	r3, [r7, #32]
 80040f2:	e7fe      	b.n	80040f2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040f4:	f001 f996 	bl	8005424 <xTaskGetSchedulerState>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d102      	bne.n	8004104 <xQueueGenericSend+0x98>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <xQueueGenericSend+0x9c>
 8004104:	2301      	movs	r3, #1
 8004106:	e000      	b.n	800410a <xQueueGenericSend+0x9e>
 8004108:	2300      	movs	r3, #0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d109      	bne.n	8004122 <xQueueGenericSend+0xb6>
 800410e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	61fb      	str	r3, [r7, #28]
 8004120:	e7fe      	b.n	8004120 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004122:	f001 fe51 	bl	8005dc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412e:	429a      	cmp	r2, r3
 8004130:	d302      	bcc.n	8004138 <xQueueGenericSend+0xcc>
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b02      	cmp	r3, #2
 8004136:	d129      	bne.n	800418c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	68b9      	ldr	r1, [r7, #8]
 800413c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800413e:	f000 f9ff 	bl	8004540 <prvCopyDataToQueue>
 8004142:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	2b00      	cmp	r3, #0
 800414a:	d010      	beq.n	800416e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800414c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414e:	3324      	adds	r3, #36	; 0x24
 8004150:	4618      	mov	r0, r3
 8004152:	f000 ffad 	bl	80050b0 <xTaskRemoveFromEventList>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d013      	beq.n	8004184 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800415c:	4b3f      	ldr	r3, [pc, #252]	; (800425c <xQueueGenericSend+0x1f0>)
 800415e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	e00a      	b.n	8004184 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800416e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004170:	2b00      	cmp	r3, #0
 8004172:	d007      	beq.n	8004184 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004174:	4b39      	ldr	r3, [pc, #228]	; (800425c <xQueueGenericSend+0x1f0>)
 8004176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004184:	f001 fe4e 	bl	8005e24 <vPortExitCritical>
				return pdPASS;
 8004188:	2301      	movs	r3, #1
 800418a:	e063      	b.n	8004254 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d103      	bne.n	800419a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004192:	f001 fe47 	bl	8005e24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004196:	2300      	movs	r3, #0
 8004198:	e05c      	b.n	8004254 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800419a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800419c:	2b00      	cmp	r3, #0
 800419e:	d106      	bne.n	80041ae <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041a0:	f107 0314 	add.w	r3, r7, #20
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 ffe5 	bl	8005174 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041aa:	2301      	movs	r3, #1
 80041ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041ae:	f001 fe39 	bl	8005e24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041b2:	f000 fd5d 	bl	8004c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041b6:	f001 fe07 	bl	8005dc8 <vPortEnterCritical>
 80041ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041c0:	b25b      	sxtb	r3, r3
 80041c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041c6:	d103      	bne.n	80041d0 <xQueueGenericSend+0x164>
 80041c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041d6:	b25b      	sxtb	r3, r3
 80041d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041dc:	d103      	bne.n	80041e6 <xQueueGenericSend+0x17a>
 80041de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041e6:	f001 fe1d 	bl	8005e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041ea:	1d3a      	adds	r2, r7, #4
 80041ec:	f107 0314 	add.w	r3, r7, #20
 80041f0:	4611      	mov	r1, r2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 ffd4 	bl	80051a0 <xTaskCheckForTimeOut>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d124      	bne.n	8004248 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80041fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004200:	f000 fa96 	bl	8004730 <prvIsQueueFull>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d018      	beq.n	800423c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800420a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420c:	3310      	adds	r3, #16
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	4611      	mov	r1, r2
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fefe 	bl	8005014 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800421a:	f000 fa21 	bl	8004660 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800421e:	f000 fd35 	bl	8004c8c <xTaskResumeAll>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	f47f af7c 	bne.w	8004122 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800422a:	4b0c      	ldr	r3, [pc, #48]	; (800425c <xQueueGenericSend+0x1f0>)
 800422c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	e772      	b.n	8004122 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800423c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800423e:	f000 fa0f 	bl	8004660 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004242:	f000 fd23 	bl	8004c8c <xTaskResumeAll>
 8004246:	e76c      	b.n	8004122 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800424a:	f000 fa09 	bl	8004660 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800424e:	f000 fd1d 	bl	8004c8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004252:	2300      	movs	r3, #0
		}
	}
}
 8004254:	4618      	mov	r0, r3
 8004256:	3738      	adds	r7, #56	; 0x38
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	e000ed04 	.word	0xe000ed04

08004260 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08e      	sub	sp, #56	; 0x38
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004274:	2b00      	cmp	r3, #0
 8004276:	d109      	bne.n	800428c <xQueueGenericSendFromISR+0x2c>
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
 800428a:	e7fe      	b.n	800428a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d103      	bne.n	800429a <xQueueGenericSendFromISR+0x3a>
 8004292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <xQueueGenericSendFromISR+0x3e>
 800429a:	2301      	movs	r3, #1
 800429c:	e000      	b.n	80042a0 <xQueueGenericSendFromISR+0x40>
 800429e:	2300      	movs	r3, #0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d109      	bne.n	80042b8 <xQueueGenericSendFromISR+0x58>
 80042a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	623b      	str	r3, [r7, #32]
 80042b6:	e7fe      	b.n	80042b6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d103      	bne.n	80042c6 <xQueueGenericSendFromISR+0x66>
 80042be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d101      	bne.n	80042ca <xQueueGenericSendFromISR+0x6a>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <xQueueGenericSendFromISR+0x6c>
 80042ca:	2300      	movs	r3, #0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d109      	bne.n	80042e4 <xQueueGenericSendFromISR+0x84>
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	61fb      	str	r3, [r7, #28]
 80042e2:	e7fe      	b.n	80042e2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042e4:	f001 fe2a 	bl	8005f3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80042e8:	f3ef 8211 	mrs	r2, BASEPRI
 80042ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f0:	f383 8811 	msr	BASEPRI, r3
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	61ba      	str	r2, [r7, #24]
 80042fe:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004300:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004302:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430c:	429a      	cmp	r2, r3
 800430e:	d302      	bcc.n	8004316 <xQueueGenericSendFromISR+0xb6>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d12c      	bne.n	8004370 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004318:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800431c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004326:	f000 f90b 	bl	8004540 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800432a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800432e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004332:	d112      	bne.n	800435a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	2b00      	cmp	r3, #0
 800433a:	d016      	beq.n	800436a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	3324      	adds	r3, #36	; 0x24
 8004340:	4618      	mov	r0, r3
 8004342:	f000 feb5 	bl	80050b0 <xTaskRemoveFromEventList>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00e      	beq.n	800436a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00b      	beq.n	800436a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	e007      	b.n	800436a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800435a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800435e:	3301      	adds	r3, #1
 8004360:	b2db      	uxtb	r3, r3
 8004362:	b25a      	sxtb	r2, r3
 8004364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800436a:	2301      	movs	r3, #1
 800436c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800436e:	e001      	b.n	8004374 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004370:	2300      	movs	r3, #0
 8004372:	637b      	str	r3, [r7, #52]	; 0x34
 8004374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004376:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800437e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004380:	4618      	mov	r0, r3
 8004382:	3738      	adds	r7, #56	; 0x38
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b08c      	sub	sp, #48	; 0x30
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004394:	2300      	movs	r3, #0
 8004396:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d109      	bne.n	80043b6 <xQueueReceive+0x2e>
	__asm volatile
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	623b      	str	r3, [r7, #32]
 80043b4:	e7fe      	b.n	80043b4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d103      	bne.n	80043c4 <xQueueReceive+0x3c>
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <xQueueReceive+0x40>
 80043c4:	2301      	movs	r3, #1
 80043c6:	e000      	b.n	80043ca <xQueueReceive+0x42>
 80043c8:	2300      	movs	r3, #0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d109      	bne.n	80043e2 <xQueueReceive+0x5a>
 80043ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	61fb      	str	r3, [r7, #28]
 80043e0:	e7fe      	b.n	80043e0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043e2:	f001 f81f 	bl	8005424 <xTaskGetSchedulerState>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d102      	bne.n	80043f2 <xQueueReceive+0x6a>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <xQueueReceive+0x6e>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <xQueueReceive+0x70>
 80043f6:	2300      	movs	r3, #0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d109      	bne.n	8004410 <xQueueReceive+0x88>
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	61bb      	str	r3, [r7, #24]
 800440e:	e7fe      	b.n	800440e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004410:	f001 fcda 	bl	8005dc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	2b00      	cmp	r3, #0
 800441e:	d01f      	beq.n	8004460 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004420:	68b9      	ldr	r1, [r7, #8]
 8004422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004424:	f000 f8f6 	bl	8004614 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	1e5a      	subs	r2, r3, #1
 800442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00f      	beq.n	8004458 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443a:	3310      	adds	r3, #16
 800443c:	4618      	mov	r0, r3
 800443e:	f000 fe37 	bl	80050b0 <xTaskRemoveFromEventList>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d007      	beq.n	8004458 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004448:	4b3c      	ldr	r3, [pc, #240]	; (800453c <xQueueReceive+0x1b4>)
 800444a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004458:	f001 fce4 	bl	8005e24 <vPortExitCritical>
				return pdPASS;
 800445c:	2301      	movs	r3, #1
 800445e:	e069      	b.n	8004534 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d103      	bne.n	800446e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004466:	f001 fcdd 	bl	8005e24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800446a:	2300      	movs	r3, #0
 800446c:	e062      	b.n	8004534 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800446e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004470:	2b00      	cmp	r3, #0
 8004472:	d106      	bne.n	8004482 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004474:	f107 0310 	add.w	r3, r7, #16
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fe7b 	bl	8005174 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800447e:	2301      	movs	r3, #1
 8004480:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004482:	f001 fccf 	bl	8005e24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004486:	f000 fbf3 	bl	8004c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800448a:	f001 fc9d 	bl	8005dc8 <vPortEnterCritical>
 800448e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004490:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004494:	b25b      	sxtb	r3, r3
 8004496:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800449a:	d103      	bne.n	80044a4 <xQueueReceive+0x11c>
 800449c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044aa:	b25b      	sxtb	r3, r3
 80044ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044b0:	d103      	bne.n	80044ba <xQueueReceive+0x132>
 80044b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044ba:	f001 fcb3 	bl	8005e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044be:	1d3a      	adds	r2, r7, #4
 80044c0:	f107 0310 	add.w	r3, r7, #16
 80044c4:	4611      	mov	r1, r2
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 fe6a 	bl	80051a0 <xTaskCheckForTimeOut>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d123      	bne.n	800451a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044d4:	f000 f916 	bl	8004704 <prvIsQueueEmpty>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d017      	beq.n	800450e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80044de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e0:	3324      	adds	r3, #36	; 0x24
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	4611      	mov	r1, r2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fd94 	bl	8005014 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80044ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044ee:	f000 f8b7 	bl	8004660 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80044f2:	f000 fbcb 	bl	8004c8c <xTaskResumeAll>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d189      	bne.n	8004410 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80044fc:	4b0f      	ldr	r3, [pc, #60]	; (800453c <xQueueReceive+0x1b4>)
 80044fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	e780      	b.n	8004410 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800450e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004510:	f000 f8a6 	bl	8004660 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004514:	f000 fbba 	bl	8004c8c <xTaskResumeAll>
 8004518:	e77a      	b.n	8004410 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800451a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800451c:	f000 f8a0 	bl	8004660 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004520:	f000 fbb4 	bl	8004c8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004526:	f000 f8ed 	bl	8004704 <prvIsQueueEmpty>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	f43f af6f 	beq.w	8004410 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004532:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004534:	4618      	mov	r0, r3
 8004536:	3730      	adds	r7, #48	; 0x30
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	e000ed04 	.word	0xe000ed04

08004540 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004554:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10d      	bne.n	800457a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d14d      	bne.n	8004602 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	4618      	mov	r0, r3
 800456c:	f000 ff78 	bl	8005460 <xTaskPriorityDisinherit>
 8004570:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	605a      	str	r2, [r3, #4]
 8004578:	e043      	b.n	8004602 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d119      	bne.n	80045b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6898      	ldr	r0, [r3, #8]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	461a      	mov	r2, r3
 800458a:	68b9      	ldr	r1, [r7, #8]
 800458c:	f001 ff10 	bl	80063b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	441a      	add	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d32b      	bcc.n	8004602 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	609a      	str	r2, [r3, #8]
 80045b2:	e026      	b.n	8004602 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	68d8      	ldr	r0, [r3, #12]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	461a      	mov	r2, r3
 80045be:	68b9      	ldr	r1, [r7, #8]
 80045c0:	f001 fef6 	bl	80063b0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	425b      	negs	r3, r3
 80045ce:	441a      	add	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d207      	bcs.n	80045f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	425b      	negs	r3, r3
 80045ea:	441a      	add	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d105      	bne.n	8004602 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d002      	beq.n	8004602 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	3b01      	subs	r3, #1
 8004600:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800460a:	697b      	ldr	r3, [r7, #20]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	d018      	beq.n	8004658 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	441a      	add	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	429a      	cmp	r2, r3
 800463e:	d303      	bcc.n	8004648 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68d9      	ldr	r1, [r3, #12]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	461a      	mov	r2, r3
 8004652:	6838      	ldr	r0, [r7, #0]
 8004654:	f001 feac 	bl	80063b0 <memcpy>
	}
}
 8004658:	bf00      	nop
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004668:	f001 fbae 	bl	8005dc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004672:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004674:	e011      	b.n	800469a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	2b00      	cmp	r3, #0
 800467c:	d012      	beq.n	80046a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	3324      	adds	r3, #36	; 0x24
 8004682:	4618      	mov	r0, r3
 8004684:	f000 fd14 	bl	80050b0 <xTaskRemoveFromEventList>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800468e:	f000 fde7 	bl	8005260 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004692:	7bfb      	ldrb	r3, [r7, #15]
 8004694:	3b01      	subs	r3, #1
 8004696:	b2db      	uxtb	r3, r3
 8004698:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800469a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	dce9      	bgt.n	8004676 <prvUnlockQueue+0x16>
 80046a2:	e000      	b.n	80046a6 <prvUnlockQueue+0x46>
					break;
 80046a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	22ff      	movs	r2, #255	; 0xff
 80046aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80046ae:	f001 fbb9 	bl	8005e24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80046b2:	f001 fb89 	bl	8005dc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046be:	e011      	b.n	80046e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d012      	beq.n	80046ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3310      	adds	r3, #16
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 fcef 	bl	80050b0 <xTaskRemoveFromEventList>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80046d8:	f000 fdc2 	bl	8005260 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80046dc:	7bbb      	ldrb	r3, [r7, #14]
 80046de:	3b01      	subs	r3, #1
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	dce9      	bgt.n	80046c0 <prvUnlockQueue+0x60>
 80046ec:	e000      	b.n	80046f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80046ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	22ff      	movs	r2, #255	; 0xff
 80046f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80046f8:	f001 fb94 	bl	8005e24 <vPortExitCritical>
}
 80046fc:	bf00      	nop
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800470c:	f001 fb5c 	bl	8005dc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	2b00      	cmp	r3, #0
 8004716:	d102      	bne.n	800471e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004718:	2301      	movs	r3, #1
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	e001      	b.n	8004722 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800471e:	2300      	movs	r3, #0
 8004720:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004722:	f001 fb7f 	bl	8005e24 <vPortExitCritical>

	return xReturn;
 8004726:	68fb      	ldr	r3, [r7, #12]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004738:	f001 fb46 	bl	8005dc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004744:	429a      	cmp	r2, r3
 8004746:	d102      	bne.n	800474e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004748:	2301      	movs	r3, #1
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	e001      	b.n	8004752 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004752:	f001 fb67 	bl	8005e24 <vPortExitCritical>

	return xReturn;
 8004756:	68fb      	ldr	r3, [r7, #12]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800476a:	2300      	movs	r3, #0
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	e014      	b.n	800479a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004770:	4a0e      	ldr	r2, [pc, #56]	; (80047ac <vQueueAddToRegistry+0x4c>)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10b      	bne.n	8004794 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800477c:	490b      	ldr	r1, [pc, #44]	; (80047ac <vQueueAddToRegistry+0x4c>)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004786:	4a09      	ldr	r2, [pc, #36]	; (80047ac <vQueueAddToRegistry+0x4c>)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	4413      	add	r3, r2
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004792:	e005      	b.n	80047a0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3301      	adds	r3, #1
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2b07      	cmp	r3, #7
 800479e:	d9e7      	bls.n	8004770 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80047a0:	bf00      	nop
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bc80      	pop	{r7}
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	20001c1c 	.word	0x20001c1c

080047b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80047c0:	f001 fb02 	bl	8005dc8 <vPortEnterCritical>
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047ca:	b25b      	sxtb	r3, r3
 80047cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047d0:	d103      	bne.n	80047da <vQueueWaitForMessageRestricted+0x2a>
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047e0:	b25b      	sxtb	r3, r3
 80047e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047e6:	d103      	bne.n	80047f0 <vQueueWaitForMessageRestricted+0x40>
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047f0:	f001 fb18 	bl	8005e24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d106      	bne.n	800480a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	3324      	adds	r3, #36	; 0x24
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	68b9      	ldr	r1, [r7, #8]
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fc29 	bl	800505c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800480a:	6978      	ldr	r0, [r7, #20]
 800480c:	f7ff ff28 	bl	8004660 <prvUnlockQueue>
	}
 8004810:	bf00      	nop
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08e      	sub	sp, #56	; 0x38
 800481c:	af04      	add	r7, sp, #16
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004828:	2b00      	cmp	r3, #0
 800482a:	d109      	bne.n	8004840 <xTaskCreateStatic+0x28>
 800482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	623b      	str	r3, [r7, #32]
 800483e:	e7fe      	b.n	800483e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004842:	2b00      	cmp	r3, #0
 8004844:	d109      	bne.n	800485a <xTaskCreateStatic+0x42>
 8004846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	61fb      	str	r3, [r7, #28]
 8004858:	e7fe      	b.n	8004858 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800485a:	235c      	movs	r3, #92	; 0x5c
 800485c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	2b5c      	cmp	r3, #92	; 0x5c
 8004862:	d009      	beq.n	8004878 <xTaskCreateStatic+0x60>
 8004864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	61bb      	str	r3, [r7, #24]
 8004876:	e7fe      	b.n	8004876 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487a:	2b00      	cmp	r3, #0
 800487c:	d01e      	beq.n	80048bc <xTaskCreateStatic+0xa4>
 800487e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01b      	beq.n	80048bc <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800488c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	2202      	movs	r2, #2
 8004892:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004896:	2300      	movs	r3, #0
 8004898:	9303      	str	r3, [sp, #12]
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	9302      	str	r3, [sp, #8]
 800489e:	f107 0314 	add.w	r3, r7, #20
 80048a2:	9301      	str	r3, [sp, #4]
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	68b9      	ldr	r1, [r7, #8]
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 f850 	bl	8004954 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048b6:	f000 f8d3 	bl	8004a60 <prvAddNewTaskToReadyList>
 80048ba:	e001      	b.n	80048c0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80048c0:	697b      	ldr	r3, [r7, #20]
	}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3728      	adds	r7, #40	; 0x28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b08c      	sub	sp, #48	; 0x30
 80048ce:	af04      	add	r7, sp, #16
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	603b      	str	r3, [r7, #0]
 80048d6:	4613      	mov	r3, r2
 80048d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048da:	88fb      	ldrh	r3, [r7, #6]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4618      	mov	r0, r3
 80048e0:	f001 fb68 	bl	8005fb4 <pvPortMalloc>
 80048e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00e      	beq.n	800490a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80048ec:	205c      	movs	r0, #92	; 0x5c
 80048ee:	f001 fb61 	bl	8005fb4 <pvPortMalloc>
 80048f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	631a      	str	r2, [r3, #48]	; 0x30
 8004900:	e005      	b.n	800490e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004902:	6978      	ldr	r0, [r7, #20]
 8004904:	f001 fc18 	bl	8006138 <vPortFree>
 8004908:	e001      	b.n	800490e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800490a:	2300      	movs	r3, #0
 800490c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d017      	beq.n	8004944 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800491c:	88fa      	ldrh	r2, [r7, #6]
 800491e:	2300      	movs	r3, #0
 8004920:	9303      	str	r3, [sp, #12]
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	9302      	str	r3, [sp, #8]
 8004926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004928:	9301      	str	r3, [sp, #4]
 800492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	68b9      	ldr	r1, [r7, #8]
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 f80e 	bl	8004954 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004938:	69f8      	ldr	r0, [r7, #28]
 800493a:	f000 f891 	bl	8004a60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800493e:	2301      	movs	r3, #1
 8004940:	61bb      	str	r3, [r7, #24]
 8004942:	e002      	b.n	800494a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004948:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800494a:	69bb      	ldr	r3, [r7, #24]
	}
 800494c:	4618      	mov	r0, r3
 800494e:	3720      	adds	r7, #32
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004964:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	461a      	mov	r2, r3
 800496c:	21a5      	movs	r1, #165	; 0xa5
 800496e:	f001 fd2a 	bl	80063c6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800497c:	3b01      	subs	r3, #1
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	f023 0307 	bic.w	r3, r3, #7
 800498a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	f003 0307 	and.w	r3, r3, #7
 8004992:	2b00      	cmp	r3, #0
 8004994:	d009      	beq.n	80049aa <prvInitialiseNewTask+0x56>
 8004996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	e7fe      	b.n	80049a8 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049aa:	2300      	movs	r3, #0
 80049ac:	61fb      	str	r3, [r7, #28]
 80049ae:	e012      	b.n	80049d6 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	4413      	add	r3, r2
 80049b6:	7819      	ldrb	r1, [r3, #0]
 80049b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	4413      	add	r3, r2
 80049be:	3334      	adds	r3, #52	; 0x34
 80049c0:	460a      	mov	r2, r1
 80049c2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	4413      	add	r3, r2
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d006      	beq.n	80049de <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	3301      	adds	r3, #1
 80049d4:	61fb      	str	r3, [r7, #28]
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	2b0f      	cmp	r3, #15
 80049da:	d9e9      	bls.n	80049b0 <prvInitialiseNewTask+0x5c>
 80049dc:	e000      	b.n	80049e0 <prvInitialiseNewTask+0x8c>
		{
			break;
 80049de:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80049e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80049e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ea:	2b37      	cmp	r3, #55	; 0x37
 80049ec:	d901      	bls.n	80049f2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80049ee:	2337      	movs	r3, #55	; 0x37
 80049f0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80049f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049f6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80049f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049fc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	2200      	movs	r2, #0
 8004a02:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a06:	3304      	adds	r3, #4
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff f9a0 	bl	8003d4e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	3318      	adds	r3, #24
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff f99b 	bl	8003d4e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a1c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a26:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a2c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	2200      	movs	r2, #0
 8004a32:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	68f9      	ldr	r1, [r7, #12]
 8004a40:	69b8      	ldr	r0, [r7, #24]
 8004a42:	f001 f8d7 	bl	8005bf4 <pxPortInitialiseStack>
 8004a46:	4602      	mov	r2, r0
 8004a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a56:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a58:	bf00      	nop
 8004a5a:	3720      	adds	r7, #32
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a68:	f001 f9ae 	bl	8005dc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a6c:	4b2d      	ldr	r3, [pc, #180]	; (8004b24 <prvAddNewTaskToReadyList+0xc4>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3301      	adds	r3, #1
 8004a72:	4a2c      	ldr	r2, [pc, #176]	; (8004b24 <prvAddNewTaskToReadyList+0xc4>)
 8004a74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a76:	4b2c      	ldr	r3, [pc, #176]	; (8004b28 <prvAddNewTaskToReadyList+0xc8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d109      	bne.n	8004a92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a7e:	4a2a      	ldr	r2, [pc, #168]	; (8004b28 <prvAddNewTaskToReadyList+0xc8>)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a84:	4b27      	ldr	r3, [pc, #156]	; (8004b24 <prvAddNewTaskToReadyList+0xc4>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d110      	bne.n	8004aae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a8c:	f000 fc0c 	bl	80052a8 <prvInitialiseTaskLists>
 8004a90:	e00d      	b.n	8004aae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a92:	4b26      	ldr	r3, [pc, #152]	; (8004b2c <prvAddNewTaskToReadyList+0xcc>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d109      	bne.n	8004aae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a9a:	4b23      	ldr	r3, [pc, #140]	; (8004b28 <prvAddNewTaskToReadyList+0xc8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d802      	bhi.n	8004aae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004aa8:	4a1f      	ldr	r2, [pc, #124]	; (8004b28 <prvAddNewTaskToReadyList+0xc8>)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004aae:	4b20      	ldr	r3, [pc, #128]	; (8004b30 <prvAddNewTaskToReadyList+0xd0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	4a1e      	ldr	r2, [pc, #120]	; (8004b30 <prvAddNewTaskToReadyList+0xd0>)
 8004ab6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004ab8:	4b1d      	ldr	r3, [pc, #116]	; (8004b30 <prvAddNewTaskToReadyList+0xd0>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac4:	4b1b      	ldr	r3, [pc, #108]	; (8004b34 <prvAddNewTaskToReadyList+0xd4>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d903      	bls.n	8004ad4 <prvAddNewTaskToReadyList+0x74>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	4a18      	ldr	r2, [pc, #96]	; (8004b34 <prvAddNewTaskToReadyList+0xd4>)
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4a15      	ldr	r2, [pc, #84]	; (8004b38 <prvAddNewTaskToReadyList+0xd8>)
 8004ae2:	441a      	add	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4610      	mov	r0, r2
 8004aec:	f7ff f93b 	bl	8003d66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004af0:	f001 f998 	bl	8005e24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004af4:	4b0d      	ldr	r3, [pc, #52]	; (8004b2c <prvAddNewTaskToReadyList+0xcc>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00e      	beq.n	8004b1a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004afc:	4b0a      	ldr	r3, [pc, #40]	; (8004b28 <prvAddNewTaskToReadyList+0xc8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d207      	bcs.n	8004b1a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b0a:	4b0c      	ldr	r3, [pc, #48]	; (8004b3c <prvAddNewTaskToReadyList+0xdc>)
 8004b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b1a:	bf00      	nop
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20000c28 	.word	0x20000c28
 8004b28:	20000754 	.word	0x20000754
 8004b2c:	20000c34 	.word	0x20000c34
 8004b30:	20000c44 	.word	0x20000c44
 8004b34:	20000c30 	.word	0x20000c30
 8004b38:	20000758 	.word	0x20000758
 8004b3c:	e000ed04 	.word	0xe000ed04

08004b40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d016      	beq.n	8004b80 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b52:	4b13      	ldr	r3, [pc, #76]	; (8004ba0 <vTaskDelay+0x60>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d009      	beq.n	8004b6e <vTaskDelay+0x2e>
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	60bb      	str	r3, [r7, #8]
 8004b6c:	e7fe      	b.n	8004b6c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004b6e:	f000 f87f 	bl	8004c70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b72:	2100      	movs	r1, #0
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fcdf 	bl	8005538 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b7a:	f000 f887 	bl	8004c8c <xTaskResumeAll>
 8004b7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d107      	bne.n	8004b96 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004b86:	4b07      	ldr	r3, [pc, #28]	; (8004ba4 <vTaskDelay+0x64>)
 8004b88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b96:	bf00      	nop
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000c50 	.word	0x20000c50
 8004ba4:	e000ed04 	.word	0xe000ed04

08004ba8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08a      	sub	sp, #40	; 0x28
 8004bac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004bb6:	463a      	mov	r2, r7
 8004bb8:	1d39      	adds	r1, r7, #4
 8004bba:	f107 0308 	add.w	r3, r7, #8
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff f874 	bl	8003cac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004bc4:	6839      	ldr	r1, [r7, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	9202      	str	r2, [sp, #8]
 8004bcc:	9301      	str	r3, [sp, #4]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	460a      	mov	r2, r1
 8004bd6:	4920      	ldr	r1, [pc, #128]	; (8004c58 <vTaskStartScheduler+0xb0>)
 8004bd8:	4820      	ldr	r0, [pc, #128]	; (8004c5c <vTaskStartScheduler+0xb4>)
 8004bda:	f7ff fe1d 	bl	8004818 <xTaskCreateStatic>
 8004bde:	4602      	mov	r2, r0
 8004be0:	4b1f      	ldr	r3, [pc, #124]	; (8004c60 <vTaskStartScheduler+0xb8>)
 8004be2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004be4:	4b1e      	ldr	r3, [pc, #120]	; (8004c60 <vTaskStartScheduler+0xb8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004bec:	2301      	movs	r3, #1
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	e001      	b.n	8004bf6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d102      	bne.n	8004c02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004bfc:	f000 fcf0 	bl	80055e0 <xTimerCreateTimerTask>
 8004c00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d115      	bne.n	8004c34 <vTaskStartScheduler+0x8c>
 8004c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c1a:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <vTaskStartScheduler+0xbc>)
 8004c1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c22:	4b11      	ldr	r3, [pc, #68]	; (8004c68 <vTaskStartScheduler+0xc0>)
 8004c24:	2201      	movs	r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004c28:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <vTaskStartScheduler+0xc4>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c2e:	f001 f85b 	bl	8005ce8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c32:	e00d      	b.n	8004c50 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c3a:	d109      	bne.n	8004c50 <vTaskStartScheduler+0xa8>
 8004c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	e7fe      	b.n	8004c4e <vTaskStartScheduler+0xa6>
}
 8004c50:	bf00      	nop
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	080073b8 	.word	0x080073b8
 8004c5c:	08005279 	.word	0x08005279
 8004c60:	20000c4c 	.word	0x20000c4c
 8004c64:	20000c48 	.word	0x20000c48
 8004c68:	20000c34 	.word	0x20000c34
 8004c6c:	20000c2c 	.word	0x20000c2c

08004c70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004c74:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <vTaskSuspendAll+0x18>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	4a03      	ldr	r2, [pc, #12]	; (8004c88 <vTaskSuspendAll+0x18>)
 8004c7c:	6013      	str	r3, [r2, #0]
}
 8004c7e:	bf00      	nop
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bc80      	pop	{r7}
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	20000c50 	.word	0x20000c50

08004c8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c96:	2300      	movs	r3, #0
 8004c98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c9a:	4b41      	ldr	r3, [pc, #260]	; (8004da0 <xTaskResumeAll+0x114>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <xTaskResumeAll+0x2a>
 8004ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	603b      	str	r3, [r7, #0]
 8004cb4:	e7fe      	b.n	8004cb4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004cb6:	f001 f887 	bl	8005dc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004cba:	4b39      	ldr	r3, [pc, #228]	; (8004da0 <xTaskResumeAll+0x114>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	4a37      	ldr	r2, [pc, #220]	; (8004da0 <xTaskResumeAll+0x114>)
 8004cc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cc4:	4b36      	ldr	r3, [pc, #216]	; (8004da0 <xTaskResumeAll+0x114>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d162      	bne.n	8004d92 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ccc:	4b35      	ldr	r3, [pc, #212]	; (8004da4 <xTaskResumeAll+0x118>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d05e      	beq.n	8004d92 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cd4:	e02f      	b.n	8004d36 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004cd6:	4b34      	ldr	r3, [pc, #208]	; (8004da8 <xTaskResumeAll+0x11c>)
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3318      	adds	r3, #24
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff f89a 	bl	8003e1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3304      	adds	r3, #4
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff f895 	bl	8003e1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf6:	4b2d      	ldr	r3, [pc, #180]	; (8004dac <xTaskResumeAll+0x120>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d903      	bls.n	8004d06 <xTaskResumeAll+0x7a>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d02:	4a2a      	ldr	r2, [pc, #168]	; (8004dac <xTaskResumeAll+0x120>)
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4a27      	ldr	r2, [pc, #156]	; (8004db0 <xTaskResumeAll+0x124>)
 8004d14:	441a      	add	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	3304      	adds	r3, #4
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	f7ff f822 	bl	8003d66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d26:	4b23      	ldr	r3, [pc, #140]	; (8004db4 <xTaskResumeAll+0x128>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d302      	bcc.n	8004d36 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004d30:	4b21      	ldr	r3, [pc, #132]	; (8004db8 <xTaskResumeAll+0x12c>)
 8004d32:	2201      	movs	r2, #1
 8004d34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d36:	4b1c      	ldr	r3, [pc, #112]	; (8004da8 <xTaskResumeAll+0x11c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1cb      	bne.n	8004cd6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d44:	f000 fb4a 	bl	80053dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004d48:	4b1c      	ldr	r3, [pc, #112]	; (8004dbc <xTaskResumeAll+0x130>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d010      	beq.n	8004d76 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d54:	f000 f844 	bl	8004de0 <xTaskIncrementTick>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004d5e:	4b16      	ldr	r3, [pc, #88]	; (8004db8 <xTaskResumeAll+0x12c>)
 8004d60:	2201      	movs	r2, #1
 8004d62:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1f1      	bne.n	8004d54 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004d70:	4b12      	ldr	r3, [pc, #72]	; (8004dbc <xTaskResumeAll+0x130>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d76:	4b10      	ldr	r3, [pc, #64]	; (8004db8 <xTaskResumeAll+0x12c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d009      	beq.n	8004d92 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d82:	4b0f      	ldr	r3, [pc, #60]	; (8004dc0 <xTaskResumeAll+0x134>)
 8004d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d92:	f001 f847 	bl	8005e24 <vPortExitCritical>

	return xAlreadyYielded;
 8004d96:	68bb      	ldr	r3, [r7, #8]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	20000c50 	.word	0x20000c50
 8004da4:	20000c28 	.word	0x20000c28
 8004da8:	20000be8 	.word	0x20000be8
 8004dac:	20000c30 	.word	0x20000c30
 8004db0:	20000758 	.word	0x20000758
 8004db4:	20000754 	.word	0x20000754
 8004db8:	20000c3c 	.word	0x20000c3c
 8004dbc:	20000c38 	.word	0x20000c38
 8004dc0:	e000ed04 	.word	0xe000ed04

08004dc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004dca:	4b04      	ldr	r3, [pc, #16]	; (8004ddc <xTaskGetTickCount+0x18>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004dd0:	687b      	ldr	r3, [r7, #4]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr
 8004ddc:	20000c2c 	.word	0x20000c2c

08004de0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004de6:	2300      	movs	r3, #0
 8004de8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dea:	4b51      	ldr	r3, [pc, #324]	; (8004f30 <xTaskIncrementTick+0x150>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f040 808d 	bne.w	8004f0e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004df4:	4b4f      	ldr	r3, [pc, #316]	; (8004f34 <xTaskIncrementTick+0x154>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004dfc:	4a4d      	ldr	r2, [pc, #308]	; (8004f34 <xTaskIncrementTick+0x154>)
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d11f      	bne.n	8004e48 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e08:	4b4b      	ldr	r3, [pc, #300]	; (8004f38 <xTaskIncrementTick+0x158>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d009      	beq.n	8004e26 <xTaskIncrementTick+0x46>
 8004e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	603b      	str	r3, [r7, #0]
 8004e24:	e7fe      	b.n	8004e24 <xTaskIncrementTick+0x44>
 8004e26:	4b44      	ldr	r3, [pc, #272]	; (8004f38 <xTaskIncrementTick+0x158>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	4b43      	ldr	r3, [pc, #268]	; (8004f3c <xTaskIncrementTick+0x15c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a41      	ldr	r2, [pc, #260]	; (8004f38 <xTaskIncrementTick+0x158>)
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	4a41      	ldr	r2, [pc, #260]	; (8004f3c <xTaskIncrementTick+0x15c>)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	4b41      	ldr	r3, [pc, #260]	; (8004f40 <xTaskIncrementTick+0x160>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	4a3f      	ldr	r2, [pc, #252]	; (8004f40 <xTaskIncrementTick+0x160>)
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	f000 faca 	bl	80053dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e48:	4b3e      	ldr	r3, [pc, #248]	; (8004f44 <xTaskIncrementTick+0x164>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d34e      	bcc.n	8004ef0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e52:	4b39      	ldr	r3, [pc, #228]	; (8004f38 <xTaskIncrementTick+0x158>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <xTaskIncrementTick+0x80>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e000      	b.n	8004e62 <xTaskIncrementTick+0x82>
 8004e60:	2300      	movs	r3, #0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d004      	beq.n	8004e70 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e66:	4b37      	ldr	r3, [pc, #220]	; (8004f44 <xTaskIncrementTick+0x164>)
 8004e68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e6c:	601a      	str	r2, [r3, #0]
					break;
 8004e6e:	e03f      	b.n	8004ef0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e70:	4b31      	ldr	r3, [pc, #196]	; (8004f38 <xTaskIncrementTick+0x158>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d203      	bcs.n	8004e90 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e88:	4a2e      	ldr	r2, [pc, #184]	; (8004f44 <xTaskIncrementTick+0x164>)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6013      	str	r3, [r2, #0]
						break;
 8004e8e:	e02f      	b.n	8004ef0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	3304      	adds	r3, #4
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fe ffc1 	bl	8003e1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d004      	beq.n	8004eac <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	3318      	adds	r3, #24
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fe ffb8 	bl	8003e1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb0:	4b25      	ldr	r3, [pc, #148]	; (8004f48 <xTaskIncrementTick+0x168>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d903      	bls.n	8004ec0 <xTaskIncrementTick+0xe0>
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebc:	4a22      	ldr	r2, [pc, #136]	; (8004f48 <xTaskIncrementTick+0x168>)
 8004ebe:	6013      	str	r3, [r2, #0]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4a1f      	ldr	r2, [pc, #124]	; (8004f4c <xTaskIncrementTick+0x16c>)
 8004ece:	441a      	add	r2, r3
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	f7fe ff45 	bl	8003d66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee0:	4b1b      	ldr	r3, [pc, #108]	; (8004f50 <xTaskIncrementTick+0x170>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d3b3      	bcc.n	8004e52 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004eea:	2301      	movs	r3, #1
 8004eec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eee:	e7b0      	b.n	8004e52 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ef0:	4b17      	ldr	r3, [pc, #92]	; (8004f50 <xTaskIncrementTick+0x170>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef6:	4915      	ldr	r1, [pc, #84]	; (8004f4c <xTaskIncrementTick+0x16c>)
 8004ef8:	4613      	mov	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d907      	bls.n	8004f18 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	e004      	b.n	8004f18 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004f0e:	4b11      	ldr	r3, [pc, #68]	; (8004f54 <xTaskIncrementTick+0x174>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3301      	adds	r3, #1
 8004f14:	4a0f      	ldr	r2, [pc, #60]	; (8004f54 <xTaskIncrementTick+0x174>)
 8004f16:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004f18:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <xTaskIncrementTick+0x178>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004f20:	2301      	movs	r3, #1
 8004f22:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004f24:	697b      	ldr	r3, [r7, #20]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3718      	adds	r7, #24
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	20000c50 	.word	0x20000c50
 8004f34:	20000c2c 	.word	0x20000c2c
 8004f38:	20000be0 	.word	0x20000be0
 8004f3c:	20000be4 	.word	0x20000be4
 8004f40:	20000c40 	.word	0x20000c40
 8004f44:	20000c48 	.word	0x20000c48
 8004f48:	20000c30 	.word	0x20000c30
 8004f4c:	20000758 	.word	0x20000758
 8004f50:	20000754 	.word	0x20000754
 8004f54:	20000c38 	.word	0x20000c38
 8004f58:	20000c3c 	.word	0x20000c3c

08004f5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f62:	4b27      	ldr	r3, [pc, #156]	; (8005000 <vTaskSwitchContext+0xa4>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f6a:	4b26      	ldr	r3, [pc, #152]	; (8005004 <vTaskSwitchContext+0xa8>)
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f70:	e040      	b.n	8004ff4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004f72:	4b24      	ldr	r3, [pc, #144]	; (8005004 <vTaskSwitchContext+0xa8>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004f78:	4b23      	ldr	r3, [pc, #140]	; (8005008 <vTaskSwitchContext+0xac>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	e00f      	b.n	8004fa0 <vTaskSwitchContext+0x44>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d109      	bne.n	8004f9a <vTaskSwitchContext+0x3e>
 8004f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8a:	f383 8811 	msr	BASEPRI, r3
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	607b      	str	r3, [r7, #4]
 8004f98:	e7fe      	b.n	8004f98 <vTaskSwitchContext+0x3c>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	491a      	ldr	r1, [pc, #104]	; (800500c <vTaskSwitchContext+0xb0>)
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	440b      	add	r3, r1
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0e5      	beq.n	8004f80 <vTaskSwitchContext+0x24>
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4a13      	ldr	r2, [pc, #76]	; (800500c <vTaskSwitchContext+0xb0>)
 8004fc0:	4413      	add	r3, r2
 8004fc2:	60bb      	str	r3, [r7, #8]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	605a      	str	r2, [r3, #4]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	3308      	adds	r3, #8
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d104      	bne.n	8004fe4 <vTaskSwitchContext+0x88>
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	605a      	str	r2, [r3, #4]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	4a09      	ldr	r2, [pc, #36]	; (8005010 <vTaskSwitchContext+0xb4>)
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	4a06      	ldr	r2, [pc, #24]	; (8005008 <vTaskSwitchContext+0xac>)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6013      	str	r3, [r2, #0]
}
 8004ff4:	bf00      	nop
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bc80      	pop	{r7}
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	20000c50 	.word	0x20000c50
 8005004:	20000c3c 	.word	0x20000c3c
 8005008:	20000c30 	.word	0x20000c30
 800500c:	20000758 	.word	0x20000758
 8005010:	20000754 	.word	0x20000754

08005014 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d109      	bne.n	8005038 <vTaskPlaceOnEventList+0x24>
 8005024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	e7fe      	b.n	8005036 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005038:	4b07      	ldr	r3, [pc, #28]	; (8005058 <vTaskPlaceOnEventList+0x44>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3318      	adds	r3, #24
 800503e:	4619      	mov	r1, r3
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7fe feb3 	bl	8003dac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005046:	2101      	movs	r1, #1
 8005048:	6838      	ldr	r0, [r7, #0]
 800504a:	f000 fa75 	bl	8005538 <prvAddCurrentTaskToDelayedList>
}
 800504e:	bf00      	nop
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	20000754 	.word	0x20000754

0800505c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d109      	bne.n	8005082 <vTaskPlaceOnEventListRestricted+0x26>
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	e7fe      	b.n	8005080 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005082:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <vTaskPlaceOnEventListRestricted+0x50>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3318      	adds	r3, #24
 8005088:	4619      	mov	r1, r3
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f7fe fe6b 	bl	8003d66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800509a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800509c:	6879      	ldr	r1, [r7, #4]
 800509e:	68b8      	ldr	r0, [r7, #8]
 80050a0:	f000 fa4a 	bl	8005538 <prvAddCurrentTaskToDelayedList>
	}
 80050a4:	bf00      	nop
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	20000754 	.word	0x20000754

080050b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <xTaskRemoveFromEventList+0x2a>
 80050c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	e7fe      	b.n	80050d8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	3318      	adds	r3, #24
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fe fe9c 	bl	8003e1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050e4:	4b1d      	ldr	r3, [pc, #116]	; (800515c <xTaskRemoveFromEventList+0xac>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d11d      	bne.n	8005128 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	3304      	adds	r3, #4
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7fe fe93 	bl	8003e1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fa:	4b19      	ldr	r3, [pc, #100]	; (8005160 <xTaskRemoveFromEventList+0xb0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d903      	bls.n	800510a <xTaskRemoveFromEventList+0x5a>
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005106:	4a16      	ldr	r2, [pc, #88]	; (8005160 <xTaskRemoveFromEventList+0xb0>)
 8005108:	6013      	str	r3, [r2, #0]
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510e:	4613      	mov	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4a13      	ldr	r2, [pc, #76]	; (8005164 <xTaskRemoveFromEventList+0xb4>)
 8005118:	441a      	add	r2, r3
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	3304      	adds	r3, #4
 800511e:	4619      	mov	r1, r3
 8005120:	4610      	mov	r0, r2
 8005122:	f7fe fe20 	bl	8003d66 <vListInsertEnd>
 8005126:	e005      	b.n	8005134 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	3318      	adds	r3, #24
 800512c:	4619      	mov	r1, r3
 800512e:	480e      	ldr	r0, [pc, #56]	; (8005168 <xTaskRemoveFromEventList+0xb8>)
 8005130:	f7fe fe19 	bl	8003d66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005138:	4b0c      	ldr	r3, [pc, #48]	; (800516c <xTaskRemoveFromEventList+0xbc>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513e:	429a      	cmp	r2, r3
 8005140:	d905      	bls.n	800514e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005142:	2301      	movs	r3, #1
 8005144:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005146:	4b0a      	ldr	r3, [pc, #40]	; (8005170 <xTaskRemoveFromEventList+0xc0>)
 8005148:	2201      	movs	r2, #1
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	e001      	b.n	8005152 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800514e:	2300      	movs	r3, #0
 8005150:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005152:	697b      	ldr	r3, [r7, #20]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	20000c50 	.word	0x20000c50
 8005160:	20000c30 	.word	0x20000c30
 8005164:	20000758 	.word	0x20000758
 8005168:	20000be8 	.word	0x20000be8
 800516c:	20000754 	.word	0x20000754
 8005170:	20000c3c 	.word	0x20000c3c

08005174 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800517c:	4b06      	ldr	r3, [pc, #24]	; (8005198 <vTaskInternalSetTimeOutState+0x24>)
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005184:	4b05      	ldr	r3, [pc, #20]	; (800519c <vTaskInternalSetTimeOutState+0x28>)
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	605a      	str	r2, [r3, #4]
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	bc80      	pop	{r7}
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	20000c40 	.word	0x20000c40
 800519c:	20000c2c 	.word	0x20000c2c

080051a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d109      	bne.n	80051c4 <xTaskCheckForTimeOut+0x24>
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	613b      	str	r3, [r7, #16]
 80051c2:	e7fe      	b.n	80051c2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d109      	bne.n	80051de <xTaskCheckForTimeOut+0x3e>
 80051ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	e7fe      	b.n	80051dc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80051de:	f000 fdf3 	bl	8005dc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80051e2:	4b1d      	ldr	r3, [pc, #116]	; (8005258 <xTaskCheckForTimeOut+0xb8>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051fa:	d102      	bne.n	8005202 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80051fc:	2300      	movs	r3, #0
 80051fe:	61fb      	str	r3, [r7, #28]
 8005200:	e023      	b.n	800524a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	4b15      	ldr	r3, [pc, #84]	; (800525c <xTaskCheckForTimeOut+0xbc>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	429a      	cmp	r2, r3
 800520c:	d007      	beq.n	800521e <xTaskCheckForTimeOut+0x7e>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	429a      	cmp	r2, r3
 8005216:	d302      	bcc.n	800521e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005218:	2301      	movs	r3, #1
 800521a:	61fb      	str	r3, [r7, #28]
 800521c:	e015      	b.n	800524a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	429a      	cmp	r2, r3
 8005226:	d20b      	bcs.n	8005240 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	1ad2      	subs	r2, r2, r3
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7ff ff9d 	bl	8005174 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800523a:	2300      	movs	r3, #0
 800523c:	61fb      	str	r3, [r7, #28]
 800523e:	e004      	b.n	800524a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005246:	2301      	movs	r3, #1
 8005248:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800524a:	f000 fdeb 	bl	8005e24 <vPortExitCritical>

	return xReturn;
 800524e:	69fb      	ldr	r3, [r7, #28]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3720      	adds	r7, #32
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	20000c2c 	.word	0x20000c2c
 800525c:	20000c40 	.word	0x20000c40

08005260 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005264:	4b03      	ldr	r3, [pc, #12]	; (8005274 <vTaskMissedYield+0x14>)
 8005266:	2201      	movs	r2, #1
 8005268:	601a      	str	r2, [r3, #0]
}
 800526a:	bf00      	nop
 800526c:	46bd      	mov	sp, r7
 800526e:	bc80      	pop	{r7}
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	20000c3c 	.word	0x20000c3c

08005278 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005280:	f000 f852 	bl	8005328 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005284:	4b06      	ldr	r3, [pc, #24]	; (80052a0 <prvIdleTask+0x28>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d9f9      	bls.n	8005280 <prvIdleTask+0x8>
			{
				taskYIELD();
 800528c:	4b05      	ldr	r3, [pc, #20]	; (80052a4 <prvIdleTask+0x2c>)
 800528e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800529c:	e7f0      	b.n	8005280 <prvIdleTask+0x8>
 800529e:	bf00      	nop
 80052a0:	20000758 	.word	0x20000758
 80052a4:	e000ed04 	.word	0xe000ed04

080052a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052ae:	2300      	movs	r3, #0
 80052b0:	607b      	str	r3, [r7, #4]
 80052b2:	e00c      	b.n	80052ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4a12      	ldr	r2, [pc, #72]	; (8005308 <prvInitialiseTaskLists+0x60>)
 80052c0:	4413      	add	r3, r2
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fe fd24 	bl	8003d10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3301      	adds	r3, #1
 80052cc:	607b      	str	r3, [r7, #4]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b37      	cmp	r3, #55	; 0x37
 80052d2:	d9ef      	bls.n	80052b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80052d4:	480d      	ldr	r0, [pc, #52]	; (800530c <prvInitialiseTaskLists+0x64>)
 80052d6:	f7fe fd1b 	bl	8003d10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80052da:	480d      	ldr	r0, [pc, #52]	; (8005310 <prvInitialiseTaskLists+0x68>)
 80052dc:	f7fe fd18 	bl	8003d10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80052e0:	480c      	ldr	r0, [pc, #48]	; (8005314 <prvInitialiseTaskLists+0x6c>)
 80052e2:	f7fe fd15 	bl	8003d10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80052e6:	480c      	ldr	r0, [pc, #48]	; (8005318 <prvInitialiseTaskLists+0x70>)
 80052e8:	f7fe fd12 	bl	8003d10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80052ec:	480b      	ldr	r0, [pc, #44]	; (800531c <prvInitialiseTaskLists+0x74>)
 80052ee:	f7fe fd0f 	bl	8003d10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80052f2:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <prvInitialiseTaskLists+0x78>)
 80052f4:	4a05      	ldr	r2, [pc, #20]	; (800530c <prvInitialiseTaskLists+0x64>)
 80052f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80052f8:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <prvInitialiseTaskLists+0x7c>)
 80052fa:	4a05      	ldr	r2, [pc, #20]	; (8005310 <prvInitialiseTaskLists+0x68>)
 80052fc:	601a      	str	r2, [r3, #0]
}
 80052fe:	bf00      	nop
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20000758 	.word	0x20000758
 800530c:	20000bb8 	.word	0x20000bb8
 8005310:	20000bcc 	.word	0x20000bcc
 8005314:	20000be8 	.word	0x20000be8
 8005318:	20000bfc 	.word	0x20000bfc
 800531c:	20000c14 	.word	0x20000c14
 8005320:	20000be0 	.word	0x20000be0
 8005324:	20000be4 	.word	0x20000be4

08005328 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800532e:	e019      	b.n	8005364 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005330:	f000 fd4a 	bl	8005dc8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005334:	4b0f      	ldr	r3, [pc, #60]	; (8005374 <prvCheckTasksWaitingTermination+0x4c>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3304      	adds	r3, #4
 8005340:	4618      	mov	r0, r3
 8005342:	f7fe fd6b 	bl	8003e1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005346:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <prvCheckTasksWaitingTermination+0x50>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3b01      	subs	r3, #1
 800534c:	4a0a      	ldr	r2, [pc, #40]	; (8005378 <prvCheckTasksWaitingTermination+0x50>)
 800534e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005350:	4b0a      	ldr	r3, [pc, #40]	; (800537c <prvCheckTasksWaitingTermination+0x54>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3b01      	subs	r3, #1
 8005356:	4a09      	ldr	r2, [pc, #36]	; (800537c <prvCheckTasksWaitingTermination+0x54>)
 8005358:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800535a:	f000 fd63 	bl	8005e24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f80e 	bl	8005380 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005364:	4b05      	ldr	r3, [pc, #20]	; (800537c <prvCheckTasksWaitingTermination+0x54>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1e1      	bne.n	8005330 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800536c:	bf00      	nop
 800536e:	3708      	adds	r7, #8
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	20000bfc 	.word	0x20000bfc
 8005378:	20000c28 	.word	0x20000c28
 800537c:	20000c10 	.word	0x20000c10

08005380 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800538e:	2b00      	cmp	r3, #0
 8005390:	d108      	bne.n	80053a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	4618      	mov	r0, r3
 8005398:	f000 fece 	bl	8006138 <vPortFree>
				vPortFree( pxTCB );
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 fecb 	bl	8006138 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80053a2:	e017      	b.n	80053d4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d103      	bne.n	80053b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fec2 	bl	8006138 <vPortFree>
	}
 80053b4:	e00e      	b.n	80053d4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d009      	beq.n	80053d4 <prvDeleteTCB+0x54>
 80053c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	e7fe      	b.n	80053d2 <prvDeleteTCB+0x52>
	}
 80053d4:	bf00      	nop
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053e2:	4b0e      	ldr	r3, [pc, #56]	; (800541c <prvResetNextTaskUnblockTime+0x40>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <prvResetNextTaskUnblockTime+0x14>
 80053ec:	2301      	movs	r3, #1
 80053ee:	e000      	b.n	80053f2 <prvResetNextTaskUnblockTime+0x16>
 80053f0:	2300      	movs	r3, #0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d004      	beq.n	8005400 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80053f6:	4b0a      	ldr	r3, [pc, #40]	; (8005420 <prvResetNextTaskUnblockTime+0x44>)
 80053f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053fc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80053fe:	e008      	b.n	8005412 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005400:	4b06      	ldr	r3, [pc, #24]	; (800541c <prvResetNextTaskUnblockTime+0x40>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	4a04      	ldr	r2, [pc, #16]	; (8005420 <prvResetNextTaskUnblockTime+0x44>)
 8005410:	6013      	str	r3, [r2, #0]
}
 8005412:	bf00      	nop
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	bc80      	pop	{r7}
 800541a:	4770      	bx	lr
 800541c:	20000be0 	.word	0x20000be0
 8005420:	20000c48 	.word	0x20000c48

08005424 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800542a:	4b0b      	ldr	r3, [pc, #44]	; (8005458 <xTaskGetSchedulerState+0x34>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d102      	bne.n	8005438 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005432:	2301      	movs	r3, #1
 8005434:	607b      	str	r3, [r7, #4]
 8005436:	e008      	b.n	800544a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005438:	4b08      	ldr	r3, [pc, #32]	; (800545c <xTaskGetSchedulerState+0x38>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d102      	bne.n	8005446 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005440:	2302      	movs	r3, #2
 8005442:	607b      	str	r3, [r7, #4]
 8005444:	e001      	b.n	800544a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005446:	2300      	movs	r3, #0
 8005448:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800544a:	687b      	ldr	r3, [r7, #4]
	}
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	bc80      	pop	{r7}
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	20000c34 	.word	0x20000c34
 800545c:	20000c50 	.word	0x20000c50

08005460 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800546c:	2300      	movs	r3, #0
 800546e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d054      	beq.n	8005520 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005476:	4b2d      	ldr	r3, [pc, #180]	; (800552c <xTaskPriorityDisinherit+0xcc>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	429a      	cmp	r2, r3
 800547e:	d009      	beq.n	8005494 <xTaskPriorityDisinherit+0x34>
 8005480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	60fb      	str	r3, [r7, #12]
 8005492:	e7fe      	b.n	8005492 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005498:	2b00      	cmp	r3, #0
 800549a:	d109      	bne.n	80054b0 <xTaskPriorityDisinherit+0x50>
 800549c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	60bb      	str	r3, [r7, #8]
 80054ae:	e7fe      	b.n	80054ae <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b4:	1e5a      	subs	r2, r3, #1
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d02c      	beq.n	8005520 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d128      	bne.n	8005520 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	3304      	adds	r3, #4
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fe fca2 	bl	8003e1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f0:	4b0f      	ldr	r3, [pc, #60]	; (8005530 <xTaskPriorityDisinherit+0xd0>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d903      	bls.n	8005500 <xTaskPriorityDisinherit+0xa0>
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	4a0c      	ldr	r2, [pc, #48]	; (8005530 <xTaskPriorityDisinherit+0xd0>)
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005504:	4613      	mov	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4a09      	ldr	r2, [pc, #36]	; (8005534 <xTaskPriorityDisinherit+0xd4>)
 800550e:	441a      	add	r2, r3
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	3304      	adds	r3, #4
 8005514:	4619      	mov	r1, r3
 8005516:	4610      	mov	r0, r2
 8005518:	f7fe fc25 	bl	8003d66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800551c:	2301      	movs	r3, #1
 800551e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005520:	697b      	ldr	r3, [r7, #20]
	}
 8005522:	4618      	mov	r0, r3
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000754 	.word	0x20000754
 8005530:	20000c30 	.word	0x20000c30
 8005534:	20000758 	.word	0x20000758

08005538 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005542:	4b21      	ldr	r3, [pc, #132]	; (80055c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005548:	4b20      	ldr	r3, [pc, #128]	; (80055cc <prvAddCurrentTaskToDelayedList+0x94>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3304      	adds	r3, #4
 800554e:	4618      	mov	r0, r3
 8005550:	f7fe fc64 	bl	8003e1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800555a:	d10a      	bne.n	8005572 <prvAddCurrentTaskToDelayedList+0x3a>
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d007      	beq.n	8005572 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005562:	4b1a      	ldr	r3, [pc, #104]	; (80055cc <prvAddCurrentTaskToDelayedList+0x94>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3304      	adds	r3, #4
 8005568:	4619      	mov	r1, r3
 800556a:	4819      	ldr	r0, [pc, #100]	; (80055d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800556c:	f7fe fbfb 	bl	8003d66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005570:	e026      	b.n	80055c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4413      	add	r3, r2
 8005578:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800557a:	4b14      	ldr	r3, [pc, #80]	; (80055cc <prvAddCurrentTaskToDelayedList+0x94>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	429a      	cmp	r2, r3
 8005588:	d209      	bcs.n	800559e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800558a:	4b12      	ldr	r3, [pc, #72]	; (80055d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	4b0f      	ldr	r3, [pc, #60]	; (80055cc <prvAddCurrentTaskToDelayedList+0x94>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3304      	adds	r3, #4
 8005594:	4619      	mov	r1, r3
 8005596:	4610      	mov	r0, r2
 8005598:	f7fe fc08 	bl	8003dac <vListInsert>
}
 800559c:	e010      	b.n	80055c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800559e:	4b0e      	ldr	r3, [pc, #56]	; (80055d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	4b0a      	ldr	r3, [pc, #40]	; (80055cc <prvAddCurrentTaskToDelayedList+0x94>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3304      	adds	r3, #4
 80055a8:	4619      	mov	r1, r3
 80055aa:	4610      	mov	r0, r2
 80055ac:	f7fe fbfe 	bl	8003dac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80055b0:	4b0a      	ldr	r3, [pc, #40]	; (80055dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d202      	bcs.n	80055c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80055ba:	4a08      	ldr	r2, [pc, #32]	; (80055dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	6013      	str	r3, [r2, #0]
}
 80055c0:	bf00      	nop
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	20000c2c 	.word	0x20000c2c
 80055cc:	20000754 	.word	0x20000754
 80055d0:	20000c14 	.word	0x20000c14
 80055d4:	20000be4 	.word	0x20000be4
 80055d8:	20000be0 	.word	0x20000be0
 80055dc:	20000c48 	.word	0x20000c48

080055e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b08a      	sub	sp, #40	; 0x28
 80055e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80055ea:	f000 fac3 	bl	8005b74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80055ee:	4b1c      	ldr	r3, [pc, #112]	; (8005660 <xTimerCreateTimerTask+0x80>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d021      	beq.n	800563a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80055fa:	2300      	movs	r3, #0
 80055fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80055fe:	1d3a      	adds	r2, r7, #4
 8005600:	f107 0108 	add.w	r1, r7, #8
 8005604:	f107 030c 	add.w	r3, r7, #12
 8005608:	4618      	mov	r0, r3
 800560a:	f7fe fb67 	bl	8003cdc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	9202      	str	r2, [sp, #8]
 8005616:	9301      	str	r3, [sp, #4]
 8005618:	2302      	movs	r3, #2
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	2300      	movs	r3, #0
 800561e:	460a      	mov	r2, r1
 8005620:	4910      	ldr	r1, [pc, #64]	; (8005664 <xTimerCreateTimerTask+0x84>)
 8005622:	4811      	ldr	r0, [pc, #68]	; (8005668 <xTimerCreateTimerTask+0x88>)
 8005624:	f7ff f8f8 	bl	8004818 <xTaskCreateStatic>
 8005628:	4602      	mov	r2, r0
 800562a:	4b10      	ldr	r3, [pc, #64]	; (800566c <xTimerCreateTimerTask+0x8c>)
 800562c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800562e:	4b0f      	ldr	r3, [pc, #60]	; (800566c <xTimerCreateTimerTask+0x8c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005636:	2301      	movs	r3, #1
 8005638:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d109      	bne.n	8005654 <xTimerCreateTimerTask+0x74>
 8005640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	613b      	str	r3, [r7, #16]
 8005652:	e7fe      	b.n	8005652 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005654:	697b      	ldr	r3, [r7, #20]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3718      	adds	r7, #24
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20000c84 	.word	0x20000c84
 8005664:	080073c0 	.word	0x080073c0
 8005668:	08005789 	.word	0x08005789
 800566c:	20000c88 	.word	0x20000c88

08005670 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b08a      	sub	sp, #40	; 0x28
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
 800567c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800567e:	2300      	movs	r3, #0
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d109      	bne.n	800569c <xTimerGenericCommand+0x2c>
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	623b      	str	r3, [r7, #32]
 800569a:	e7fe      	b.n	800569a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800569c:	4b19      	ldr	r3, [pc, #100]	; (8005704 <xTimerGenericCommand+0x94>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d02a      	beq.n	80056fa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2b05      	cmp	r3, #5
 80056b4:	dc18      	bgt.n	80056e8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80056b6:	f7ff feb5 	bl	8005424 <xTaskGetSchedulerState>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d109      	bne.n	80056d4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80056c0:	4b10      	ldr	r3, [pc, #64]	; (8005704 <xTimerGenericCommand+0x94>)
 80056c2:	6818      	ldr	r0, [r3, #0]
 80056c4:	f107 0110 	add.w	r1, r7, #16
 80056c8:	2300      	movs	r3, #0
 80056ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056cc:	f7fe fcce 	bl	800406c <xQueueGenericSend>
 80056d0:	6278      	str	r0, [r7, #36]	; 0x24
 80056d2:	e012      	b.n	80056fa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80056d4:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <xTimerGenericCommand+0x94>)
 80056d6:	6818      	ldr	r0, [r3, #0]
 80056d8:	f107 0110 	add.w	r1, r7, #16
 80056dc:	2300      	movs	r3, #0
 80056de:	2200      	movs	r2, #0
 80056e0:	f7fe fcc4 	bl	800406c <xQueueGenericSend>
 80056e4:	6278      	str	r0, [r7, #36]	; 0x24
 80056e6:	e008      	b.n	80056fa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80056e8:	4b06      	ldr	r3, [pc, #24]	; (8005704 <xTimerGenericCommand+0x94>)
 80056ea:	6818      	ldr	r0, [r3, #0]
 80056ec:	f107 0110 	add.w	r1, r7, #16
 80056f0:	2300      	movs	r3, #0
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	f7fe fdb4 	bl	8004260 <xQueueGenericSendFromISR>
 80056f8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3728      	adds	r7, #40	; 0x28
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	20000c84 	.word	0x20000c84

08005708 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b088      	sub	sp, #32
 800570c:	af02      	add	r7, sp, #8
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005712:	4b1c      	ldr	r3, [pc, #112]	; (8005784 <prvProcessExpiredTimer+0x7c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	3304      	adds	r3, #4
 8005720:	4618      	mov	r0, r3
 8005722:	f7fe fb7b 	bl	8003e1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d121      	bne.n	8005772 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	18d1      	adds	r1, r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	6978      	ldr	r0, [r7, #20]
 800573c:	f000 f8c8 	bl	80058d0 <prvInsertTimerInActiveList>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d015      	beq.n	8005772 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005746:	2300      	movs	r3, #0
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	2300      	movs	r3, #0
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	2100      	movs	r1, #0
 8005750:	6978      	ldr	r0, [r7, #20]
 8005752:	f7ff ff8d 	bl	8005670 <xTimerGenericCommand>
 8005756:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d109      	bne.n	8005772 <prvProcessExpiredTimer+0x6a>
 800575e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	e7fe      	b.n	8005770 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	6978      	ldr	r0, [r7, #20]
 8005778:	4798      	blx	r3
}
 800577a:	bf00      	nop
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	20000c7c 	.word	0x20000c7c

08005788 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005790:	f107 0308 	add.w	r3, r7, #8
 8005794:	4618      	mov	r0, r3
 8005796:	f000 f857 	bl	8005848 <prvGetNextExpireTime>
 800579a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	4619      	mov	r1, r3
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 f803 	bl	80057ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80057a6:	f000 f8d5 	bl	8005954 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80057aa:	e7f1      	b.n	8005790 <prvTimerTask+0x8>

080057ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80057b6:	f7ff fa5b 	bl	8004c70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057ba:	f107 0308 	add.w	r3, r7, #8
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 f866 	bl	8005890 <prvSampleTimeNow>
 80057c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d130      	bne.n	800582e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10a      	bne.n	80057e8 <prvProcessTimerOrBlockTask+0x3c>
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d806      	bhi.n	80057e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80057da:	f7ff fa57 	bl	8004c8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80057de:	68f9      	ldr	r1, [r7, #12]
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7ff ff91 	bl	8005708 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80057e6:	e024      	b.n	8005832 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d008      	beq.n	8005800 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80057ee:	4b13      	ldr	r3, [pc, #76]	; (800583c <prvProcessTimerOrBlockTask+0x90>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	bf0c      	ite	eq
 80057f8:	2301      	moveq	r3, #1
 80057fa:	2300      	movne	r3, #0
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005800:	4b0f      	ldr	r3, [pc, #60]	; (8005840 <prvProcessTimerOrBlockTask+0x94>)
 8005802:	6818      	ldr	r0, [r3, #0]
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	4619      	mov	r1, r3
 800580e:	f7fe ffcf 	bl	80047b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005812:	f7ff fa3b 	bl	8004c8c <xTaskResumeAll>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10a      	bne.n	8005832 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800581c:	4b09      	ldr	r3, [pc, #36]	; (8005844 <prvProcessTimerOrBlockTask+0x98>)
 800581e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	f3bf 8f6f 	isb	sy
}
 800582c:	e001      	b.n	8005832 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800582e:	f7ff fa2d 	bl	8004c8c <xTaskResumeAll>
}
 8005832:	bf00      	nop
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	20000c80 	.word	0x20000c80
 8005840:	20000c84 	.word	0x20000c84
 8005844:	e000ed04 	.word	0xe000ed04

08005848 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005850:	4b0e      	ldr	r3, [pc, #56]	; (800588c <prvGetNextExpireTime+0x44>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	bf0c      	ite	eq
 800585a:	2301      	moveq	r3, #1
 800585c:	2300      	movne	r3, #0
 800585e:	b2db      	uxtb	r3, r3
 8005860:	461a      	mov	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d105      	bne.n	800587a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800586e:	4b07      	ldr	r3, [pc, #28]	; (800588c <prvGetNextExpireTime+0x44>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	e001      	b.n	800587e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800587a:	2300      	movs	r3, #0
 800587c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800587e:	68fb      	ldr	r3, [r7, #12]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	bc80      	pop	{r7}
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	20000c7c 	.word	0x20000c7c

08005890 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005898:	f7ff fa94 	bl	8004dc4 <xTaskGetTickCount>
 800589c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800589e:	4b0b      	ldr	r3, [pc, #44]	; (80058cc <prvSampleTimeNow+0x3c>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d205      	bcs.n	80058b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80058a8:	f000 f904 	bl	8005ab4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	e002      	b.n	80058ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80058ba:	4a04      	ldr	r2, [pc, #16]	; (80058cc <prvSampleTimeNow+0x3c>)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80058c0:	68fb      	ldr	r3, [r7, #12]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	20000c8c 	.word	0x20000c8c

080058d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
 80058dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80058de:	2300      	movs	r3, #0
 80058e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d812      	bhi.n	800591c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	1ad2      	subs	r2, r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	429a      	cmp	r2, r3
 8005902:	d302      	bcc.n	800590a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005904:	2301      	movs	r3, #1
 8005906:	617b      	str	r3, [r7, #20]
 8005908:	e01b      	b.n	8005942 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800590a:	4b10      	ldr	r3, [pc, #64]	; (800594c <prvInsertTimerInActiveList+0x7c>)
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	3304      	adds	r3, #4
 8005912:	4619      	mov	r1, r3
 8005914:	4610      	mov	r0, r2
 8005916:	f7fe fa49 	bl	8003dac <vListInsert>
 800591a:	e012      	b.n	8005942 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	429a      	cmp	r2, r3
 8005922:	d206      	bcs.n	8005932 <prvInsertTimerInActiveList+0x62>
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	429a      	cmp	r2, r3
 800592a:	d302      	bcc.n	8005932 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800592c:	2301      	movs	r3, #1
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	e007      	b.n	8005942 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005932:	4b07      	ldr	r3, [pc, #28]	; (8005950 <prvInsertTimerInActiveList+0x80>)
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3304      	adds	r3, #4
 800593a:	4619      	mov	r1, r3
 800593c:	4610      	mov	r0, r2
 800593e:	f7fe fa35 	bl	8003dac <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005942:	697b      	ldr	r3, [r7, #20]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	20000c80 	.word	0x20000c80
 8005950:	20000c7c 	.word	0x20000c7c

08005954 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b08e      	sub	sp, #56	; 0x38
 8005958:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800595a:	e099      	b.n	8005a90 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	da17      	bge.n	8005992 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005962:	1d3b      	adds	r3, r7, #4
 8005964:	3304      	adds	r3, #4
 8005966:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596a:	2b00      	cmp	r3, #0
 800596c:	d109      	bne.n	8005982 <prvProcessReceivedCommands+0x2e>
 800596e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	61fb      	str	r3, [r7, #28]
 8005980:	e7fe      	b.n	8005980 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005988:	6850      	ldr	r0, [r2, #4]
 800598a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800598c:	6892      	ldr	r2, [r2, #8]
 800598e:	4611      	mov	r1, r2
 8005990:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	db7a      	blt.n	8005a8e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d004      	beq.n	80059ae <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a6:	3304      	adds	r3, #4
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fe fa37 	bl	8003e1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059ae:	463b      	mov	r3, r7
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff ff6d 	bl	8005890 <prvSampleTimeNow>
 80059b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b09      	cmp	r3, #9
 80059bc:	d868      	bhi.n	8005a90 <prvProcessReceivedCommands+0x13c>
 80059be:	a201      	add	r2, pc, #4	; (adr r2, 80059c4 <prvProcessReceivedCommands+0x70>)
 80059c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c4:	080059ed 	.word	0x080059ed
 80059c8:	080059ed 	.word	0x080059ed
 80059cc:	080059ed 	.word	0x080059ed
 80059d0:	08005a91 	.word	0x08005a91
 80059d4:	08005a47 	.word	0x08005a47
 80059d8:	08005a7d 	.word	0x08005a7d
 80059dc:	080059ed 	.word	0x080059ed
 80059e0:	080059ed 	.word	0x080059ed
 80059e4:	08005a91 	.word	0x08005a91
 80059e8:	08005a47 	.word	0x08005a47
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	18d1      	adds	r1, r2, r3
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059fa:	f7ff ff69 	bl	80058d0 <prvInsertTimerInActiveList>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d045      	beq.n	8005a90 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a0a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d13d      	bne.n	8005a90 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	441a      	add	r2, r3
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	2300      	movs	r3, #0
 8005a22:	2100      	movs	r1, #0
 8005a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a26:	f7ff fe23 	bl	8005670 <xTimerGenericCommand>
 8005a2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d12e      	bne.n	8005a90 <prvProcessReceivedCommands+0x13c>
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	61bb      	str	r3, [r7, #24]
 8005a44:	e7fe      	b.n	8005a44 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d109      	bne.n	8005a68 <prvProcessReceivedCommands+0x114>
 8005a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	617b      	str	r3, [r7, #20]
 8005a66:	e7fe      	b.n	8005a66 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6a:	699a      	ldr	r2, [r3, #24]
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	18d1      	adds	r1, r2, r3
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a76:	f7ff ff2b 	bl	80058d0 <prvInsertTimerInActiveList>
					break;
 8005a7a:	e009      	b.n	8005a90 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d104      	bne.n	8005a90 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8005a86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a88:	f000 fb56 	bl	8006138 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005a8c:	e000      	b.n	8005a90 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005a8e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a90:	4b07      	ldr	r3, [pc, #28]	; (8005ab0 <prvProcessReceivedCommands+0x15c>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	1d39      	adds	r1, r7, #4
 8005a96:	2200      	movs	r2, #0
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fe fc75 	bl	8004388 <xQueueReceive>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f47f af5b 	bne.w	800595c <prvProcessReceivedCommands+0x8>
	}
}
 8005aa6:	bf00      	nop
 8005aa8:	3730      	adds	r7, #48	; 0x30
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	20000c84 	.word	0x20000c84

08005ab4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b088      	sub	sp, #32
 8005ab8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005aba:	e044      	b.n	8005b46 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005abc:	4b2b      	ldr	r3, [pc, #172]	; (8005b6c <prvSwitchTimerLists+0xb8>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ac6:	4b29      	ldr	r3, [pc, #164]	; (8005b6c <prvSwitchTimerLists+0xb8>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	3304      	adds	r3, #4
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fe f9a1 	bl	8003e1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d12d      	bne.n	8005b46 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	4413      	add	r3, r2
 8005af2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d90e      	bls.n	8005b1a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b08:	4b18      	ldr	r3, [pc, #96]	; (8005b6c <prvSwitchTimerLists+0xb8>)
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3304      	adds	r3, #4
 8005b10:	4619      	mov	r1, r3
 8005b12:	4610      	mov	r0, r2
 8005b14:	f7fe f94a 	bl	8003dac <vListInsert>
 8005b18:	e015      	b.n	8005b46 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	2300      	movs	r3, #0
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	2100      	movs	r1, #0
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f7ff fda3 	bl	8005670 <xTimerGenericCommand>
 8005b2a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d109      	bne.n	8005b46 <prvSwitchTimerLists+0x92>
 8005b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	e7fe      	b.n	8005b44 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b46:	4b09      	ldr	r3, [pc, #36]	; (8005b6c <prvSwitchTimerLists+0xb8>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1b5      	bne.n	8005abc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005b50:	4b06      	ldr	r3, [pc, #24]	; (8005b6c <prvSwitchTimerLists+0xb8>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005b56:	4b06      	ldr	r3, [pc, #24]	; (8005b70 <prvSwitchTimerLists+0xbc>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a04      	ldr	r2, [pc, #16]	; (8005b6c <prvSwitchTimerLists+0xb8>)
 8005b5c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005b5e:	4a04      	ldr	r2, [pc, #16]	; (8005b70 <prvSwitchTimerLists+0xbc>)
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	6013      	str	r3, [r2, #0]
}
 8005b64:	bf00      	nop
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	20000c7c 	.word	0x20000c7c
 8005b70:	20000c80 	.word	0x20000c80

08005b74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005b7a:	f000 f925 	bl	8005dc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005b7e:	4b15      	ldr	r3, [pc, #84]	; (8005bd4 <prvCheckForValidListAndQueue+0x60>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d120      	bne.n	8005bc8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005b86:	4814      	ldr	r0, [pc, #80]	; (8005bd8 <prvCheckForValidListAndQueue+0x64>)
 8005b88:	f7fe f8c2 	bl	8003d10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005b8c:	4813      	ldr	r0, [pc, #76]	; (8005bdc <prvCheckForValidListAndQueue+0x68>)
 8005b8e:	f7fe f8bf 	bl	8003d10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005b92:	4b13      	ldr	r3, [pc, #76]	; (8005be0 <prvCheckForValidListAndQueue+0x6c>)
 8005b94:	4a10      	ldr	r2, [pc, #64]	; (8005bd8 <prvCheckForValidListAndQueue+0x64>)
 8005b96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005b98:	4b12      	ldr	r3, [pc, #72]	; (8005be4 <prvCheckForValidListAndQueue+0x70>)
 8005b9a:	4a10      	ldr	r2, [pc, #64]	; (8005bdc <prvCheckForValidListAndQueue+0x68>)
 8005b9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	4b11      	ldr	r3, [pc, #68]	; (8005be8 <prvCheckForValidListAndQueue+0x74>)
 8005ba4:	4a11      	ldr	r2, [pc, #68]	; (8005bec <prvCheckForValidListAndQueue+0x78>)
 8005ba6:	2110      	movs	r1, #16
 8005ba8:	200a      	movs	r0, #10
 8005baa:	f7fe f9c9 	bl	8003f40 <xQueueGenericCreateStatic>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	4b08      	ldr	r3, [pc, #32]	; (8005bd4 <prvCheckForValidListAndQueue+0x60>)
 8005bb2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005bb4:	4b07      	ldr	r3, [pc, #28]	; (8005bd4 <prvCheckForValidListAndQueue+0x60>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d005      	beq.n	8005bc8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005bbc:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <prvCheckForValidListAndQueue+0x60>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	490b      	ldr	r1, [pc, #44]	; (8005bf0 <prvCheckForValidListAndQueue+0x7c>)
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fe fdcc 	bl	8004760 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bc8:	f000 f92c 	bl	8005e24 <vPortExitCritical>
}
 8005bcc:	bf00      	nop
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20000c84 	.word	0x20000c84
 8005bd8:	20000c54 	.word	0x20000c54
 8005bdc:	20000c68 	.word	0x20000c68
 8005be0:	20000c7c 	.word	0x20000c7c
 8005be4:	20000c80 	.word	0x20000c80
 8005be8:	20000d30 	.word	0x20000d30
 8005bec:	20000c90 	.word	0x20000c90
 8005bf0:	080073c8 	.word	0x080073c8

08005bf4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	3b04      	subs	r3, #4
 8005c04:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3b04      	subs	r3, #4
 8005c12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f023 0201 	bic.w	r2, r3, #1
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	3b04      	subs	r3, #4
 8005c22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c24:	4a08      	ldr	r2, [pc, #32]	; (8005c48 <pxPortInitialiseStack+0x54>)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	3b14      	subs	r3, #20
 8005c2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3b20      	subs	r3, #32
 8005c3a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bc80      	pop	{r7}
 8005c46:	4770      	bx	lr
 8005c48:	08005c4d 	.word	0x08005c4d

08005c4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005c52:	2300      	movs	r3, #0
 8005c54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c56:	4b10      	ldr	r3, [pc, #64]	; (8005c98 <prvTaskExitError+0x4c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c5e:	d009      	beq.n	8005c74 <prvTaskExitError+0x28>
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	e7fe      	b.n	8005c72 <prvTaskExitError+0x26>
 8005c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c86:	bf00      	nop
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d0fc      	beq.n	8005c88 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c8e:	bf00      	nop
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bc80      	pop	{r7}
 8005c96:	4770      	bx	lr
 8005c98:	2000000c 	.word	0x2000000c
 8005c9c:	00000000 	.word	0x00000000

08005ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ca0:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <pxCurrentTCBConst2>)
 8005ca2:	6819      	ldr	r1, [r3, #0]
 8005ca4:	6808      	ldr	r0, [r1, #0]
 8005ca6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005caa:	f380 8809 	msr	PSP, r0
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f04f 0000 	mov.w	r0, #0
 8005cb6:	f380 8811 	msr	BASEPRI, r0
 8005cba:	f04e 0e0d 	orr.w	lr, lr, #13
 8005cbe:	4770      	bx	lr

08005cc0 <pxCurrentTCBConst2>:
 8005cc0:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005cc4:	bf00      	nop
 8005cc6:	bf00      	nop

08005cc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005cc8:	4806      	ldr	r0, [pc, #24]	; (8005ce4 <prvPortStartFirstTask+0x1c>)
 8005cca:	6800      	ldr	r0, [r0, #0]
 8005ccc:	6800      	ldr	r0, [r0, #0]
 8005cce:	f380 8808 	msr	MSP, r0
 8005cd2:	b662      	cpsie	i
 8005cd4:	b661      	cpsie	f
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	df00      	svc	0
 8005ce0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005ce2:	bf00      	nop
 8005ce4:	e000ed08 	.word	0xe000ed08

08005ce8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005cee:	4b31      	ldr	r3, [pc, #196]	; (8005db4 <xPortStartScheduler+0xcc>)
 8005cf0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	22ff      	movs	r2, #255	; 0xff
 8005cfe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	4b29      	ldr	r3, [pc, #164]	; (8005db8 <xPortStartScheduler+0xd0>)
 8005d14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d16:	4b29      	ldr	r3, [pc, #164]	; (8005dbc <xPortStartScheduler+0xd4>)
 8005d18:	2207      	movs	r2, #7
 8005d1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d1c:	e009      	b.n	8005d32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005d1e:	4b27      	ldr	r3, [pc, #156]	; (8005dbc <xPortStartScheduler+0xd4>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3b01      	subs	r3, #1
 8005d24:	4a25      	ldr	r2, [pc, #148]	; (8005dbc <xPortStartScheduler+0xd4>)
 8005d26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d28:	78fb      	ldrb	r3, [r7, #3]
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d32:	78fb      	ldrb	r3, [r7, #3]
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3a:	2b80      	cmp	r3, #128	; 0x80
 8005d3c:	d0ef      	beq.n	8005d1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d3e:	4b1f      	ldr	r3, [pc, #124]	; (8005dbc <xPortStartScheduler+0xd4>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f1c3 0307 	rsb	r3, r3, #7
 8005d46:	2b04      	cmp	r3, #4
 8005d48:	d009      	beq.n	8005d5e <xPortStartScheduler+0x76>
 8005d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	60bb      	str	r3, [r7, #8]
 8005d5c:	e7fe      	b.n	8005d5c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d5e:	4b17      	ldr	r3, [pc, #92]	; (8005dbc <xPortStartScheduler+0xd4>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	021b      	lsls	r3, r3, #8
 8005d64:	4a15      	ldr	r2, [pc, #84]	; (8005dbc <xPortStartScheduler+0xd4>)
 8005d66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d68:	4b14      	ldr	r3, [pc, #80]	; (8005dbc <xPortStartScheduler+0xd4>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d70:	4a12      	ldr	r2, [pc, #72]	; (8005dbc <xPortStartScheduler+0xd4>)
 8005d72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d7c:	4b10      	ldr	r3, [pc, #64]	; (8005dc0 <xPortStartScheduler+0xd8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a0f      	ldr	r2, [pc, #60]	; (8005dc0 <xPortStartScheduler+0xd8>)
 8005d82:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d88:	4b0d      	ldr	r3, [pc, #52]	; (8005dc0 <xPortStartScheduler+0xd8>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a0c      	ldr	r2, [pc, #48]	; (8005dc0 <xPortStartScheduler+0xd8>)
 8005d8e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d94:	f000 f8b0 	bl	8005ef8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d98:	4b0a      	ldr	r3, [pc, #40]	; (8005dc4 <xPortStartScheduler+0xdc>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d9e:	f7ff ff93 	bl	8005cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005da2:	f7ff f8db 	bl	8004f5c <vTaskSwitchContext>
	prvTaskExitError();
 8005da6:	f7ff ff51 	bl	8005c4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	e000e400 	.word	0xe000e400
 8005db8:	20000d80 	.word	0x20000d80
 8005dbc:	20000d84 	.word	0x20000d84
 8005dc0:	e000ed20 	.word	0xe000ed20
 8005dc4:	2000000c 	.word	0x2000000c

08005dc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005de0:	4b0e      	ldr	r3, [pc, #56]	; (8005e1c <vPortEnterCritical+0x54>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3301      	adds	r3, #1
 8005de6:	4a0d      	ldr	r2, [pc, #52]	; (8005e1c <vPortEnterCritical+0x54>)
 8005de8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005dea:	4b0c      	ldr	r3, [pc, #48]	; (8005e1c <vPortEnterCritical+0x54>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d10e      	bne.n	8005e10 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005df2:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <vPortEnterCritical+0x58>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d009      	beq.n	8005e10 <vPortEnterCritical+0x48>
 8005dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e00:	f383 8811 	msr	BASEPRI, r3
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	603b      	str	r3, [r7, #0]
 8005e0e:	e7fe      	b.n	8005e0e <vPortEnterCritical+0x46>
	}
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bc80      	pop	{r7}
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	2000000c 	.word	0x2000000c
 8005e20:	e000ed04 	.word	0xe000ed04

08005e24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e2a:	4b10      	ldr	r3, [pc, #64]	; (8005e6c <vPortExitCritical+0x48>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d109      	bne.n	8005e46 <vPortExitCritical+0x22>
 8005e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	607b      	str	r3, [r7, #4]
 8005e44:	e7fe      	b.n	8005e44 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005e46:	4b09      	ldr	r3, [pc, #36]	; (8005e6c <vPortExitCritical+0x48>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	4a07      	ldr	r2, [pc, #28]	; (8005e6c <vPortExitCritical+0x48>)
 8005e4e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e50:	4b06      	ldr	r3, [pc, #24]	; (8005e6c <vPortExitCritical+0x48>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d104      	bne.n	8005e62 <vPortExitCritical+0x3e>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e62:	bf00      	nop
 8005e64:	370c      	adds	r7, #12
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bc80      	pop	{r7}
 8005e6a:	4770      	bx	lr
 8005e6c:	2000000c 	.word	0x2000000c

08005e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e70:	f3ef 8009 	mrs	r0, PSP
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	4b0d      	ldr	r3, [pc, #52]	; (8005eb0 <pxCurrentTCBConst>)
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005e80:	6010      	str	r0, [r2, #0]
 8005e82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005e86:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e8a:	f380 8811 	msr	BASEPRI, r0
 8005e8e:	f7ff f865 	bl	8004f5c <vTaskSwitchContext>
 8005e92:	f04f 0000 	mov.w	r0, #0
 8005e96:	f380 8811 	msr	BASEPRI, r0
 8005e9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005e9e:	6819      	ldr	r1, [r3, #0]
 8005ea0:	6808      	ldr	r0, [r1, #0]
 8005ea2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005ea6:	f380 8809 	msr	PSP, r0
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	4770      	bx	lr

08005eb0 <pxCurrentTCBConst>:
 8005eb0:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop

08005eb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ed0:	f7fe ff86 	bl	8004de0 <xTaskIncrementTick>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005eda:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <SysTick_Handler+0x3c>)
 8005edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005eec:	bf00      	nop
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	e000ed04 	.word	0xe000ed04

08005ef8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005efc:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <vPortSetupTimerInterrupt+0x30>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f02:	4b0a      	ldr	r3, [pc, #40]	; (8005f2c <vPortSetupTimerInterrupt+0x34>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f08:	4b09      	ldr	r3, [pc, #36]	; (8005f30 <vPortSetupTimerInterrupt+0x38>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a09      	ldr	r2, [pc, #36]	; (8005f34 <vPortSetupTimerInterrupt+0x3c>)
 8005f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f12:	099b      	lsrs	r3, r3, #6
 8005f14:	4a08      	ldr	r2, [pc, #32]	; (8005f38 <vPortSetupTimerInterrupt+0x40>)
 8005f16:	3b01      	subs	r3, #1
 8005f18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f1a:	4b03      	ldr	r3, [pc, #12]	; (8005f28 <vPortSetupTimerInterrupt+0x30>)
 8005f1c:	2207      	movs	r2, #7
 8005f1e:	601a      	str	r2, [r3, #0]
}
 8005f20:	bf00      	nop
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bc80      	pop	{r7}
 8005f26:	4770      	bx	lr
 8005f28:	e000e010 	.word	0xe000e010
 8005f2c:	e000e018 	.word	0xe000e018
 8005f30:	20000000 	.word	0x20000000
 8005f34:	10624dd3 	.word	0x10624dd3
 8005f38:	e000e014 	.word	0xe000e014

08005f3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f42:	f3ef 8305 	mrs	r3, IPSR
 8005f46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2b0f      	cmp	r3, #15
 8005f4c:	d913      	bls.n	8005f76 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f4e:	4a15      	ldr	r2, [pc, #84]	; (8005fa4 <vPortValidateInterruptPriority+0x68>)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4413      	add	r3, r2
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f58:	4b13      	ldr	r3, [pc, #76]	; (8005fa8 <vPortValidateInterruptPriority+0x6c>)
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	7afa      	ldrb	r2, [r7, #11]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d209      	bcs.n	8005f76 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	607b      	str	r3, [r7, #4]
 8005f74:	e7fe      	b.n	8005f74 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f76:	4b0d      	ldr	r3, [pc, #52]	; (8005fac <vPortValidateInterruptPriority+0x70>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f7e:	4b0c      	ldr	r3, [pc, #48]	; (8005fb0 <vPortValidateInterruptPriority+0x74>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d909      	bls.n	8005f9a <vPortValidateInterruptPriority+0x5e>
 8005f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8a:	f383 8811 	msr	BASEPRI, r3
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f3bf 8f4f 	dsb	sy
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	e7fe      	b.n	8005f98 <vPortValidateInterruptPriority+0x5c>
	}
 8005f9a:	bf00      	nop
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bc80      	pop	{r7}
 8005fa2:	4770      	bx	lr
 8005fa4:	e000e3f0 	.word	0xe000e3f0
 8005fa8:	20000d80 	.word	0x20000d80
 8005fac:	e000ed0c 	.word	0xe000ed0c
 8005fb0:	20000d84 	.word	0x20000d84

08005fb4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08a      	sub	sp, #40	; 0x28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005fc0:	f7fe fe56 	bl	8004c70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fc4:	4b57      	ldr	r3, [pc, #348]	; (8006124 <pvPortMalloc+0x170>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fcc:	f000 f90c 	bl	80061e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fd0:	4b55      	ldr	r3, [pc, #340]	; (8006128 <pvPortMalloc+0x174>)
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f040 808c 	bne.w	80060f6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d01c      	beq.n	800601e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005fe4:	2208      	movs	r2, #8
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4413      	add	r3, r2
 8005fea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d013      	beq.n	800601e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f023 0307 	bic.w	r3, r3, #7
 8005ffc:	3308      	adds	r3, #8
 8005ffe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f003 0307 	and.w	r3, r3, #7
 8006006:	2b00      	cmp	r3, #0
 8006008:	d009      	beq.n	800601e <pvPortMalloc+0x6a>
 800600a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	617b      	str	r3, [r7, #20]
 800601c:	e7fe      	b.n	800601c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d068      	beq.n	80060f6 <pvPortMalloc+0x142>
 8006024:	4b41      	ldr	r3, [pc, #260]	; (800612c <pvPortMalloc+0x178>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	429a      	cmp	r2, r3
 800602c:	d863      	bhi.n	80060f6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800602e:	4b40      	ldr	r3, [pc, #256]	; (8006130 <pvPortMalloc+0x17c>)
 8006030:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006032:	4b3f      	ldr	r3, [pc, #252]	; (8006130 <pvPortMalloc+0x17c>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006038:	e004      	b.n	8006044 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	429a      	cmp	r2, r3
 800604c:	d903      	bls.n	8006056 <pvPortMalloc+0xa2>
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1f1      	bne.n	800603a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006056:	4b33      	ldr	r3, [pc, #204]	; (8006124 <pvPortMalloc+0x170>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800605c:	429a      	cmp	r2, r3
 800605e:	d04a      	beq.n	80060f6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2208      	movs	r2, #8
 8006066:	4413      	add	r3, r2
 8006068:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	6a3b      	ldr	r3, [r7, #32]
 8006070:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	1ad2      	subs	r2, r2, r3
 800607a:	2308      	movs	r3, #8
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	429a      	cmp	r2, r3
 8006080:	d91e      	bls.n	80060c0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4413      	add	r3, r2
 8006088:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	f003 0307 	and.w	r3, r3, #7
 8006090:	2b00      	cmp	r3, #0
 8006092:	d009      	beq.n	80060a8 <pvPortMalloc+0xf4>
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	613b      	str	r3, [r7, #16]
 80060a6:	e7fe      	b.n	80060a6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	1ad2      	subs	r2, r2, r3
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060ba:	69b8      	ldr	r0, [r7, #24]
 80060bc:	f000 f8f6 	bl	80062ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060c0:	4b1a      	ldr	r3, [pc, #104]	; (800612c <pvPortMalloc+0x178>)
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	4a18      	ldr	r2, [pc, #96]	; (800612c <pvPortMalloc+0x178>)
 80060cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060ce:	4b17      	ldr	r3, [pc, #92]	; (800612c <pvPortMalloc+0x178>)
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	4b18      	ldr	r3, [pc, #96]	; (8006134 <pvPortMalloc+0x180>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d203      	bcs.n	80060e2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060da:	4b14      	ldr	r3, [pc, #80]	; (800612c <pvPortMalloc+0x178>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a15      	ldr	r2, [pc, #84]	; (8006134 <pvPortMalloc+0x180>)
 80060e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	4b10      	ldr	r3, [pc, #64]	; (8006128 <pvPortMalloc+0x174>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	431a      	orrs	r2, r3
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	2200      	movs	r2, #0
 80060f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060f6:	f7fe fdc9 	bl	8004c8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	2b00      	cmp	r3, #0
 8006102:	d009      	beq.n	8006118 <pvPortMalloc+0x164>
 8006104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006108:	f383 8811 	msr	BASEPRI, r3
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	60fb      	str	r3, [r7, #12]
 8006116:	e7fe      	b.n	8006116 <pvPortMalloc+0x162>
	return pvReturn;
 8006118:	69fb      	ldr	r3, [r7, #28]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3728      	adds	r7, #40	; 0x28
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	20001990 	.word	0x20001990
 8006128:	2000199c 	.word	0x2000199c
 800612c:	20001994 	.word	0x20001994
 8006130:	20001988 	.word	0x20001988
 8006134:	20001998 	.word	0x20001998

08006138 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d046      	beq.n	80061d8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800614a:	2308      	movs	r3, #8
 800614c:	425b      	negs	r3, r3
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	4413      	add	r3, r2
 8006152:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	4b20      	ldr	r3, [pc, #128]	; (80061e0 <vPortFree+0xa8>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4013      	ands	r3, r2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d109      	bne.n	800617a <vPortFree+0x42>
 8006166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	e7fe      	b.n	8006178 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d009      	beq.n	8006196 <vPortFree+0x5e>
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	60bb      	str	r3, [r7, #8]
 8006194:	e7fe      	b.n	8006194 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	4b11      	ldr	r3, [pc, #68]	; (80061e0 <vPortFree+0xa8>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4013      	ands	r3, r2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d019      	beq.n	80061d8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d115      	bne.n	80061d8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	4b0b      	ldr	r3, [pc, #44]	; (80061e0 <vPortFree+0xa8>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	43db      	mvns	r3, r3
 80061b6:	401a      	ands	r2, r3
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061bc:	f7fe fd58 	bl	8004c70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	4b07      	ldr	r3, [pc, #28]	; (80061e4 <vPortFree+0xac>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4413      	add	r3, r2
 80061ca:	4a06      	ldr	r2, [pc, #24]	; (80061e4 <vPortFree+0xac>)
 80061cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061ce:	6938      	ldr	r0, [r7, #16]
 80061d0:	f000 f86c 	bl	80062ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80061d4:	f7fe fd5a 	bl	8004c8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061d8:	bf00      	nop
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	2000199c 	.word	0x2000199c
 80061e4:	20001994 	.word	0x20001994

080061e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80061f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061f4:	4b27      	ldr	r3, [pc, #156]	; (8006294 <prvHeapInit+0xac>)
 80061f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f003 0307 	and.w	r3, r3, #7
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00c      	beq.n	800621c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3307      	adds	r3, #7
 8006206:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 0307 	bic.w	r3, r3, #7
 800620e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	4a1f      	ldr	r2, [pc, #124]	; (8006294 <prvHeapInit+0xac>)
 8006218:	4413      	add	r3, r2
 800621a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006220:	4a1d      	ldr	r2, [pc, #116]	; (8006298 <prvHeapInit+0xb0>)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006226:	4b1c      	ldr	r3, [pc, #112]	; (8006298 <prvHeapInit+0xb0>)
 8006228:	2200      	movs	r2, #0
 800622a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	4413      	add	r3, r2
 8006232:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006234:	2208      	movs	r2, #8
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	1a9b      	subs	r3, r3, r2
 800623a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 0307 	bic.w	r3, r3, #7
 8006242:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	4a15      	ldr	r2, [pc, #84]	; (800629c <prvHeapInit+0xb4>)
 8006248:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800624a:	4b14      	ldr	r3, [pc, #80]	; (800629c <prvHeapInit+0xb4>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2200      	movs	r2, #0
 8006250:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006252:	4b12      	ldr	r3, [pc, #72]	; (800629c <prvHeapInit+0xb4>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2200      	movs	r2, #0
 8006258:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	1ad2      	subs	r2, r2, r3
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006268:	4b0c      	ldr	r3, [pc, #48]	; (800629c <prvHeapInit+0xb4>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	4a0a      	ldr	r2, [pc, #40]	; (80062a0 <prvHeapInit+0xb8>)
 8006276:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	4a09      	ldr	r2, [pc, #36]	; (80062a4 <prvHeapInit+0xbc>)
 800627e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006280:	4b09      	ldr	r3, [pc, #36]	; (80062a8 <prvHeapInit+0xc0>)
 8006282:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006286:	601a      	str	r2, [r3, #0]
}
 8006288:	bf00      	nop
 800628a:	3714      	adds	r7, #20
 800628c:	46bd      	mov	sp, r7
 800628e:	bc80      	pop	{r7}
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	20000d88 	.word	0x20000d88
 8006298:	20001988 	.word	0x20001988
 800629c:	20001990 	.word	0x20001990
 80062a0:	20001998 	.word	0x20001998
 80062a4:	20001994 	.word	0x20001994
 80062a8:	2000199c 	.word	0x2000199c

080062ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062b4:	4b27      	ldr	r3, [pc, #156]	; (8006354 <prvInsertBlockIntoFreeList+0xa8>)
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	e002      	b.n	80062c0 <prvInsertBlockIntoFreeList+0x14>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d8f7      	bhi.n	80062ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	4413      	add	r3, r2
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d108      	bne.n	80062ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	441a      	add	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	441a      	add	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d118      	bne.n	8006334 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	4b14      	ldr	r3, [pc, #80]	; (8006358 <prvInsertBlockIntoFreeList+0xac>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d00d      	beq.n	800632a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	441a      	add	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	e008      	b.n	800633c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800632a:	4b0b      	ldr	r3, [pc, #44]	; (8006358 <prvInsertBlockIntoFreeList+0xac>)
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	e003      	b.n	800633c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	429a      	cmp	r2, r3
 8006342:	d002      	beq.n	800634a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800634a:	bf00      	nop
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	bc80      	pop	{r7}
 8006352:	4770      	bx	lr
 8006354:	20001988 	.word	0x20001988
 8006358:	20001990 	.word	0x20001990

0800635c <__errno>:
 800635c:	4b01      	ldr	r3, [pc, #4]	; (8006364 <__errno+0x8>)
 800635e:	6818      	ldr	r0, [r3, #0]
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	20000010 	.word	0x20000010

08006368 <__libc_init_array>:
 8006368:	b570      	push	{r4, r5, r6, lr}
 800636a:	2500      	movs	r5, #0
 800636c:	4e0c      	ldr	r6, [pc, #48]	; (80063a0 <__libc_init_array+0x38>)
 800636e:	4c0d      	ldr	r4, [pc, #52]	; (80063a4 <__libc_init_array+0x3c>)
 8006370:	1ba4      	subs	r4, r4, r6
 8006372:	10a4      	asrs	r4, r4, #2
 8006374:	42a5      	cmp	r5, r4
 8006376:	d109      	bne.n	800638c <__libc_init_array+0x24>
 8006378:	f000 ffca 	bl	8007310 <_init>
 800637c:	2500      	movs	r5, #0
 800637e:	4e0a      	ldr	r6, [pc, #40]	; (80063a8 <__libc_init_array+0x40>)
 8006380:	4c0a      	ldr	r4, [pc, #40]	; (80063ac <__libc_init_array+0x44>)
 8006382:	1ba4      	subs	r4, r4, r6
 8006384:	10a4      	asrs	r4, r4, #2
 8006386:	42a5      	cmp	r5, r4
 8006388:	d105      	bne.n	8006396 <__libc_init_array+0x2e>
 800638a:	bd70      	pop	{r4, r5, r6, pc}
 800638c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006390:	4798      	blx	r3
 8006392:	3501      	adds	r5, #1
 8006394:	e7ee      	b.n	8006374 <__libc_init_array+0xc>
 8006396:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800639a:	4798      	blx	r3
 800639c:	3501      	adds	r5, #1
 800639e:	e7f2      	b.n	8006386 <__libc_init_array+0x1e>
 80063a0:	080074ec 	.word	0x080074ec
 80063a4:	080074ec 	.word	0x080074ec
 80063a8:	080074ec 	.word	0x080074ec
 80063ac:	080074f0 	.word	0x080074f0

080063b0 <memcpy>:
 80063b0:	b510      	push	{r4, lr}
 80063b2:	1e43      	subs	r3, r0, #1
 80063b4:	440a      	add	r2, r1
 80063b6:	4291      	cmp	r1, r2
 80063b8:	d100      	bne.n	80063bc <memcpy+0xc>
 80063ba:	bd10      	pop	{r4, pc}
 80063bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063c4:	e7f7      	b.n	80063b6 <memcpy+0x6>

080063c6 <memset>:
 80063c6:	4603      	mov	r3, r0
 80063c8:	4402      	add	r2, r0
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d100      	bne.n	80063d0 <memset+0xa>
 80063ce:	4770      	bx	lr
 80063d0:	f803 1b01 	strb.w	r1, [r3], #1
 80063d4:	e7f9      	b.n	80063ca <memset+0x4>
	...

080063d8 <iprintf>:
 80063d8:	b40f      	push	{r0, r1, r2, r3}
 80063da:	4b0a      	ldr	r3, [pc, #40]	; (8006404 <iprintf+0x2c>)
 80063dc:	b513      	push	{r0, r1, r4, lr}
 80063de:	681c      	ldr	r4, [r3, #0]
 80063e0:	b124      	cbz	r4, 80063ec <iprintf+0x14>
 80063e2:	69a3      	ldr	r3, [r4, #24]
 80063e4:	b913      	cbnz	r3, 80063ec <iprintf+0x14>
 80063e6:	4620      	mov	r0, r4
 80063e8:	f000 fa36 	bl	8006858 <__sinit>
 80063ec:	ab05      	add	r3, sp, #20
 80063ee:	9a04      	ldr	r2, [sp, #16]
 80063f0:	68a1      	ldr	r1, [r4, #8]
 80063f2:	4620      	mov	r0, r4
 80063f4:	9301      	str	r3, [sp, #4]
 80063f6:	f000 fbeb 	bl	8006bd0 <_vfiprintf_r>
 80063fa:	b002      	add	sp, #8
 80063fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006400:	b004      	add	sp, #16
 8006402:	4770      	bx	lr
 8006404:	20000010 	.word	0x20000010

08006408 <putchar>:
 8006408:	b538      	push	{r3, r4, r5, lr}
 800640a:	4b08      	ldr	r3, [pc, #32]	; (800642c <putchar+0x24>)
 800640c:	4605      	mov	r5, r0
 800640e:	681c      	ldr	r4, [r3, #0]
 8006410:	b124      	cbz	r4, 800641c <putchar+0x14>
 8006412:	69a3      	ldr	r3, [r4, #24]
 8006414:	b913      	cbnz	r3, 800641c <putchar+0x14>
 8006416:	4620      	mov	r0, r4
 8006418:	f000 fa1e 	bl	8006858 <__sinit>
 800641c:	68a2      	ldr	r2, [r4, #8]
 800641e:	4629      	mov	r1, r5
 8006420:	4620      	mov	r0, r4
 8006422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006426:	f000 be71 	b.w	800710c <_putc_r>
 800642a:	bf00      	nop
 800642c:	20000010 	.word	0x20000010

08006430 <_puts_r>:
 8006430:	b570      	push	{r4, r5, r6, lr}
 8006432:	460e      	mov	r6, r1
 8006434:	4605      	mov	r5, r0
 8006436:	b118      	cbz	r0, 8006440 <_puts_r+0x10>
 8006438:	6983      	ldr	r3, [r0, #24]
 800643a:	b90b      	cbnz	r3, 8006440 <_puts_r+0x10>
 800643c:	f000 fa0c 	bl	8006858 <__sinit>
 8006440:	69ab      	ldr	r3, [r5, #24]
 8006442:	68ac      	ldr	r4, [r5, #8]
 8006444:	b913      	cbnz	r3, 800644c <_puts_r+0x1c>
 8006446:	4628      	mov	r0, r5
 8006448:	f000 fa06 	bl	8006858 <__sinit>
 800644c:	4b23      	ldr	r3, [pc, #140]	; (80064dc <_puts_r+0xac>)
 800644e:	429c      	cmp	r4, r3
 8006450:	d117      	bne.n	8006482 <_puts_r+0x52>
 8006452:	686c      	ldr	r4, [r5, #4]
 8006454:	89a3      	ldrh	r3, [r4, #12]
 8006456:	071b      	lsls	r3, r3, #28
 8006458:	d51d      	bpl.n	8006496 <_puts_r+0x66>
 800645a:	6923      	ldr	r3, [r4, #16]
 800645c:	b1db      	cbz	r3, 8006496 <_puts_r+0x66>
 800645e:	3e01      	subs	r6, #1
 8006460:	68a3      	ldr	r3, [r4, #8]
 8006462:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006466:	3b01      	subs	r3, #1
 8006468:	60a3      	str	r3, [r4, #8]
 800646a:	b9e9      	cbnz	r1, 80064a8 <_puts_r+0x78>
 800646c:	2b00      	cmp	r3, #0
 800646e:	da2e      	bge.n	80064ce <_puts_r+0x9e>
 8006470:	4622      	mov	r2, r4
 8006472:	210a      	movs	r1, #10
 8006474:	4628      	mov	r0, r5
 8006476:	f000 f83f 	bl	80064f8 <__swbuf_r>
 800647a:	3001      	adds	r0, #1
 800647c:	d011      	beq.n	80064a2 <_puts_r+0x72>
 800647e:	200a      	movs	r0, #10
 8006480:	e011      	b.n	80064a6 <_puts_r+0x76>
 8006482:	4b17      	ldr	r3, [pc, #92]	; (80064e0 <_puts_r+0xb0>)
 8006484:	429c      	cmp	r4, r3
 8006486:	d101      	bne.n	800648c <_puts_r+0x5c>
 8006488:	68ac      	ldr	r4, [r5, #8]
 800648a:	e7e3      	b.n	8006454 <_puts_r+0x24>
 800648c:	4b15      	ldr	r3, [pc, #84]	; (80064e4 <_puts_r+0xb4>)
 800648e:	429c      	cmp	r4, r3
 8006490:	bf08      	it	eq
 8006492:	68ec      	ldreq	r4, [r5, #12]
 8006494:	e7de      	b.n	8006454 <_puts_r+0x24>
 8006496:	4621      	mov	r1, r4
 8006498:	4628      	mov	r0, r5
 800649a:	f000 f87f 	bl	800659c <__swsetup_r>
 800649e:	2800      	cmp	r0, #0
 80064a0:	d0dd      	beq.n	800645e <_puts_r+0x2e>
 80064a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064a6:	bd70      	pop	{r4, r5, r6, pc}
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	da04      	bge.n	80064b6 <_puts_r+0x86>
 80064ac:	69a2      	ldr	r2, [r4, #24]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	dc06      	bgt.n	80064c0 <_puts_r+0x90>
 80064b2:	290a      	cmp	r1, #10
 80064b4:	d004      	beq.n	80064c0 <_puts_r+0x90>
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	1c5a      	adds	r2, r3, #1
 80064ba:	6022      	str	r2, [r4, #0]
 80064bc:	7019      	strb	r1, [r3, #0]
 80064be:	e7cf      	b.n	8006460 <_puts_r+0x30>
 80064c0:	4622      	mov	r2, r4
 80064c2:	4628      	mov	r0, r5
 80064c4:	f000 f818 	bl	80064f8 <__swbuf_r>
 80064c8:	3001      	adds	r0, #1
 80064ca:	d1c9      	bne.n	8006460 <_puts_r+0x30>
 80064cc:	e7e9      	b.n	80064a2 <_puts_r+0x72>
 80064ce:	200a      	movs	r0, #10
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	6022      	str	r2, [r4, #0]
 80064d6:	7018      	strb	r0, [r3, #0]
 80064d8:	e7e5      	b.n	80064a6 <_puts_r+0x76>
 80064da:	bf00      	nop
 80064dc:	08007478 	.word	0x08007478
 80064e0:	08007498 	.word	0x08007498
 80064e4:	08007458 	.word	0x08007458

080064e8 <puts>:
 80064e8:	4b02      	ldr	r3, [pc, #8]	; (80064f4 <puts+0xc>)
 80064ea:	4601      	mov	r1, r0
 80064ec:	6818      	ldr	r0, [r3, #0]
 80064ee:	f7ff bf9f 	b.w	8006430 <_puts_r>
 80064f2:	bf00      	nop
 80064f4:	20000010 	.word	0x20000010

080064f8 <__swbuf_r>:
 80064f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fa:	460e      	mov	r6, r1
 80064fc:	4614      	mov	r4, r2
 80064fe:	4605      	mov	r5, r0
 8006500:	b118      	cbz	r0, 800650a <__swbuf_r+0x12>
 8006502:	6983      	ldr	r3, [r0, #24]
 8006504:	b90b      	cbnz	r3, 800650a <__swbuf_r+0x12>
 8006506:	f000 f9a7 	bl	8006858 <__sinit>
 800650a:	4b21      	ldr	r3, [pc, #132]	; (8006590 <__swbuf_r+0x98>)
 800650c:	429c      	cmp	r4, r3
 800650e:	d12a      	bne.n	8006566 <__swbuf_r+0x6e>
 8006510:	686c      	ldr	r4, [r5, #4]
 8006512:	69a3      	ldr	r3, [r4, #24]
 8006514:	60a3      	str	r3, [r4, #8]
 8006516:	89a3      	ldrh	r3, [r4, #12]
 8006518:	071a      	lsls	r2, r3, #28
 800651a:	d52e      	bpl.n	800657a <__swbuf_r+0x82>
 800651c:	6923      	ldr	r3, [r4, #16]
 800651e:	b363      	cbz	r3, 800657a <__swbuf_r+0x82>
 8006520:	6923      	ldr	r3, [r4, #16]
 8006522:	6820      	ldr	r0, [r4, #0]
 8006524:	b2f6      	uxtb	r6, r6
 8006526:	1ac0      	subs	r0, r0, r3
 8006528:	6963      	ldr	r3, [r4, #20]
 800652a:	4637      	mov	r7, r6
 800652c:	4283      	cmp	r3, r0
 800652e:	dc04      	bgt.n	800653a <__swbuf_r+0x42>
 8006530:	4621      	mov	r1, r4
 8006532:	4628      	mov	r0, r5
 8006534:	f000 f926 	bl	8006784 <_fflush_r>
 8006538:	bb28      	cbnz	r0, 8006586 <__swbuf_r+0x8e>
 800653a:	68a3      	ldr	r3, [r4, #8]
 800653c:	3001      	adds	r0, #1
 800653e:	3b01      	subs	r3, #1
 8006540:	60a3      	str	r3, [r4, #8]
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	6022      	str	r2, [r4, #0]
 8006548:	701e      	strb	r6, [r3, #0]
 800654a:	6963      	ldr	r3, [r4, #20]
 800654c:	4283      	cmp	r3, r0
 800654e:	d004      	beq.n	800655a <__swbuf_r+0x62>
 8006550:	89a3      	ldrh	r3, [r4, #12]
 8006552:	07db      	lsls	r3, r3, #31
 8006554:	d519      	bpl.n	800658a <__swbuf_r+0x92>
 8006556:	2e0a      	cmp	r6, #10
 8006558:	d117      	bne.n	800658a <__swbuf_r+0x92>
 800655a:	4621      	mov	r1, r4
 800655c:	4628      	mov	r0, r5
 800655e:	f000 f911 	bl	8006784 <_fflush_r>
 8006562:	b190      	cbz	r0, 800658a <__swbuf_r+0x92>
 8006564:	e00f      	b.n	8006586 <__swbuf_r+0x8e>
 8006566:	4b0b      	ldr	r3, [pc, #44]	; (8006594 <__swbuf_r+0x9c>)
 8006568:	429c      	cmp	r4, r3
 800656a:	d101      	bne.n	8006570 <__swbuf_r+0x78>
 800656c:	68ac      	ldr	r4, [r5, #8]
 800656e:	e7d0      	b.n	8006512 <__swbuf_r+0x1a>
 8006570:	4b09      	ldr	r3, [pc, #36]	; (8006598 <__swbuf_r+0xa0>)
 8006572:	429c      	cmp	r4, r3
 8006574:	bf08      	it	eq
 8006576:	68ec      	ldreq	r4, [r5, #12]
 8006578:	e7cb      	b.n	8006512 <__swbuf_r+0x1a>
 800657a:	4621      	mov	r1, r4
 800657c:	4628      	mov	r0, r5
 800657e:	f000 f80d 	bl	800659c <__swsetup_r>
 8006582:	2800      	cmp	r0, #0
 8006584:	d0cc      	beq.n	8006520 <__swbuf_r+0x28>
 8006586:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800658a:	4638      	mov	r0, r7
 800658c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800658e:	bf00      	nop
 8006590:	08007478 	.word	0x08007478
 8006594:	08007498 	.word	0x08007498
 8006598:	08007458 	.word	0x08007458

0800659c <__swsetup_r>:
 800659c:	4b32      	ldr	r3, [pc, #200]	; (8006668 <__swsetup_r+0xcc>)
 800659e:	b570      	push	{r4, r5, r6, lr}
 80065a0:	681d      	ldr	r5, [r3, #0]
 80065a2:	4606      	mov	r6, r0
 80065a4:	460c      	mov	r4, r1
 80065a6:	b125      	cbz	r5, 80065b2 <__swsetup_r+0x16>
 80065a8:	69ab      	ldr	r3, [r5, #24]
 80065aa:	b913      	cbnz	r3, 80065b2 <__swsetup_r+0x16>
 80065ac:	4628      	mov	r0, r5
 80065ae:	f000 f953 	bl	8006858 <__sinit>
 80065b2:	4b2e      	ldr	r3, [pc, #184]	; (800666c <__swsetup_r+0xd0>)
 80065b4:	429c      	cmp	r4, r3
 80065b6:	d10f      	bne.n	80065d8 <__swsetup_r+0x3c>
 80065b8:	686c      	ldr	r4, [r5, #4]
 80065ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065be:	b29a      	uxth	r2, r3
 80065c0:	0715      	lsls	r5, r2, #28
 80065c2:	d42c      	bmi.n	800661e <__swsetup_r+0x82>
 80065c4:	06d0      	lsls	r0, r2, #27
 80065c6:	d411      	bmi.n	80065ec <__swsetup_r+0x50>
 80065c8:	2209      	movs	r2, #9
 80065ca:	6032      	str	r2, [r6, #0]
 80065cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065d0:	81a3      	strh	r3, [r4, #12]
 80065d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065d6:	e03e      	b.n	8006656 <__swsetup_r+0xba>
 80065d8:	4b25      	ldr	r3, [pc, #148]	; (8006670 <__swsetup_r+0xd4>)
 80065da:	429c      	cmp	r4, r3
 80065dc:	d101      	bne.n	80065e2 <__swsetup_r+0x46>
 80065de:	68ac      	ldr	r4, [r5, #8]
 80065e0:	e7eb      	b.n	80065ba <__swsetup_r+0x1e>
 80065e2:	4b24      	ldr	r3, [pc, #144]	; (8006674 <__swsetup_r+0xd8>)
 80065e4:	429c      	cmp	r4, r3
 80065e6:	bf08      	it	eq
 80065e8:	68ec      	ldreq	r4, [r5, #12]
 80065ea:	e7e6      	b.n	80065ba <__swsetup_r+0x1e>
 80065ec:	0751      	lsls	r1, r2, #29
 80065ee:	d512      	bpl.n	8006616 <__swsetup_r+0x7a>
 80065f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065f2:	b141      	cbz	r1, 8006606 <__swsetup_r+0x6a>
 80065f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065f8:	4299      	cmp	r1, r3
 80065fa:	d002      	beq.n	8006602 <__swsetup_r+0x66>
 80065fc:	4630      	mov	r0, r6
 80065fe:	f000 fa19 	bl	8006a34 <_free_r>
 8006602:	2300      	movs	r3, #0
 8006604:	6363      	str	r3, [r4, #52]	; 0x34
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800660c:	81a3      	strh	r3, [r4, #12]
 800660e:	2300      	movs	r3, #0
 8006610:	6063      	str	r3, [r4, #4]
 8006612:	6923      	ldr	r3, [r4, #16]
 8006614:	6023      	str	r3, [r4, #0]
 8006616:	89a3      	ldrh	r3, [r4, #12]
 8006618:	f043 0308 	orr.w	r3, r3, #8
 800661c:	81a3      	strh	r3, [r4, #12]
 800661e:	6923      	ldr	r3, [r4, #16]
 8006620:	b94b      	cbnz	r3, 8006636 <__swsetup_r+0x9a>
 8006622:	89a3      	ldrh	r3, [r4, #12]
 8006624:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800662c:	d003      	beq.n	8006636 <__swsetup_r+0x9a>
 800662e:	4621      	mov	r1, r4
 8006630:	4630      	mov	r0, r6
 8006632:	f000 f9bf 	bl	80069b4 <__smakebuf_r>
 8006636:	89a2      	ldrh	r2, [r4, #12]
 8006638:	f012 0301 	ands.w	r3, r2, #1
 800663c:	d00c      	beq.n	8006658 <__swsetup_r+0xbc>
 800663e:	2300      	movs	r3, #0
 8006640:	60a3      	str	r3, [r4, #8]
 8006642:	6963      	ldr	r3, [r4, #20]
 8006644:	425b      	negs	r3, r3
 8006646:	61a3      	str	r3, [r4, #24]
 8006648:	6923      	ldr	r3, [r4, #16]
 800664a:	b953      	cbnz	r3, 8006662 <__swsetup_r+0xc6>
 800664c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006650:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006654:	d1ba      	bne.n	80065cc <__swsetup_r+0x30>
 8006656:	bd70      	pop	{r4, r5, r6, pc}
 8006658:	0792      	lsls	r2, r2, #30
 800665a:	bf58      	it	pl
 800665c:	6963      	ldrpl	r3, [r4, #20]
 800665e:	60a3      	str	r3, [r4, #8]
 8006660:	e7f2      	b.n	8006648 <__swsetup_r+0xac>
 8006662:	2000      	movs	r0, #0
 8006664:	e7f7      	b.n	8006656 <__swsetup_r+0xba>
 8006666:	bf00      	nop
 8006668:	20000010 	.word	0x20000010
 800666c:	08007478 	.word	0x08007478
 8006670:	08007498 	.word	0x08007498
 8006674:	08007458 	.word	0x08007458

08006678 <__sflush_r>:
 8006678:	898a      	ldrh	r2, [r1, #12]
 800667a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800667e:	4605      	mov	r5, r0
 8006680:	0710      	lsls	r0, r2, #28
 8006682:	460c      	mov	r4, r1
 8006684:	d458      	bmi.n	8006738 <__sflush_r+0xc0>
 8006686:	684b      	ldr	r3, [r1, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	dc05      	bgt.n	8006698 <__sflush_r+0x20>
 800668c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800668e:	2b00      	cmp	r3, #0
 8006690:	dc02      	bgt.n	8006698 <__sflush_r+0x20>
 8006692:	2000      	movs	r0, #0
 8006694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006698:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800669a:	2e00      	cmp	r6, #0
 800669c:	d0f9      	beq.n	8006692 <__sflush_r+0x1a>
 800669e:	2300      	movs	r3, #0
 80066a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066a4:	682f      	ldr	r7, [r5, #0]
 80066a6:	6a21      	ldr	r1, [r4, #32]
 80066a8:	602b      	str	r3, [r5, #0]
 80066aa:	d032      	beq.n	8006712 <__sflush_r+0x9a>
 80066ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066ae:	89a3      	ldrh	r3, [r4, #12]
 80066b0:	075a      	lsls	r2, r3, #29
 80066b2:	d505      	bpl.n	80066c0 <__sflush_r+0x48>
 80066b4:	6863      	ldr	r3, [r4, #4]
 80066b6:	1ac0      	subs	r0, r0, r3
 80066b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066ba:	b10b      	cbz	r3, 80066c0 <__sflush_r+0x48>
 80066bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066be:	1ac0      	subs	r0, r0, r3
 80066c0:	2300      	movs	r3, #0
 80066c2:	4602      	mov	r2, r0
 80066c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066c6:	6a21      	ldr	r1, [r4, #32]
 80066c8:	4628      	mov	r0, r5
 80066ca:	47b0      	blx	r6
 80066cc:	1c43      	adds	r3, r0, #1
 80066ce:	89a3      	ldrh	r3, [r4, #12]
 80066d0:	d106      	bne.n	80066e0 <__sflush_r+0x68>
 80066d2:	6829      	ldr	r1, [r5, #0]
 80066d4:	291d      	cmp	r1, #29
 80066d6:	d848      	bhi.n	800676a <__sflush_r+0xf2>
 80066d8:	4a29      	ldr	r2, [pc, #164]	; (8006780 <__sflush_r+0x108>)
 80066da:	40ca      	lsrs	r2, r1
 80066dc:	07d6      	lsls	r6, r2, #31
 80066de:	d544      	bpl.n	800676a <__sflush_r+0xf2>
 80066e0:	2200      	movs	r2, #0
 80066e2:	6062      	str	r2, [r4, #4]
 80066e4:	6922      	ldr	r2, [r4, #16]
 80066e6:	04d9      	lsls	r1, r3, #19
 80066e8:	6022      	str	r2, [r4, #0]
 80066ea:	d504      	bpl.n	80066f6 <__sflush_r+0x7e>
 80066ec:	1c42      	adds	r2, r0, #1
 80066ee:	d101      	bne.n	80066f4 <__sflush_r+0x7c>
 80066f0:	682b      	ldr	r3, [r5, #0]
 80066f2:	b903      	cbnz	r3, 80066f6 <__sflush_r+0x7e>
 80066f4:	6560      	str	r0, [r4, #84]	; 0x54
 80066f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066f8:	602f      	str	r7, [r5, #0]
 80066fa:	2900      	cmp	r1, #0
 80066fc:	d0c9      	beq.n	8006692 <__sflush_r+0x1a>
 80066fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006702:	4299      	cmp	r1, r3
 8006704:	d002      	beq.n	800670c <__sflush_r+0x94>
 8006706:	4628      	mov	r0, r5
 8006708:	f000 f994 	bl	8006a34 <_free_r>
 800670c:	2000      	movs	r0, #0
 800670e:	6360      	str	r0, [r4, #52]	; 0x34
 8006710:	e7c0      	b.n	8006694 <__sflush_r+0x1c>
 8006712:	2301      	movs	r3, #1
 8006714:	4628      	mov	r0, r5
 8006716:	47b0      	blx	r6
 8006718:	1c41      	adds	r1, r0, #1
 800671a:	d1c8      	bne.n	80066ae <__sflush_r+0x36>
 800671c:	682b      	ldr	r3, [r5, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d0c5      	beq.n	80066ae <__sflush_r+0x36>
 8006722:	2b1d      	cmp	r3, #29
 8006724:	d001      	beq.n	800672a <__sflush_r+0xb2>
 8006726:	2b16      	cmp	r3, #22
 8006728:	d101      	bne.n	800672e <__sflush_r+0xb6>
 800672a:	602f      	str	r7, [r5, #0]
 800672c:	e7b1      	b.n	8006692 <__sflush_r+0x1a>
 800672e:	89a3      	ldrh	r3, [r4, #12]
 8006730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006734:	81a3      	strh	r3, [r4, #12]
 8006736:	e7ad      	b.n	8006694 <__sflush_r+0x1c>
 8006738:	690f      	ldr	r7, [r1, #16]
 800673a:	2f00      	cmp	r7, #0
 800673c:	d0a9      	beq.n	8006692 <__sflush_r+0x1a>
 800673e:	0793      	lsls	r3, r2, #30
 8006740:	bf18      	it	ne
 8006742:	2300      	movne	r3, #0
 8006744:	680e      	ldr	r6, [r1, #0]
 8006746:	bf08      	it	eq
 8006748:	694b      	ldreq	r3, [r1, #20]
 800674a:	eba6 0807 	sub.w	r8, r6, r7
 800674e:	600f      	str	r7, [r1, #0]
 8006750:	608b      	str	r3, [r1, #8]
 8006752:	f1b8 0f00 	cmp.w	r8, #0
 8006756:	dd9c      	ble.n	8006692 <__sflush_r+0x1a>
 8006758:	4643      	mov	r3, r8
 800675a:	463a      	mov	r2, r7
 800675c:	6a21      	ldr	r1, [r4, #32]
 800675e:	4628      	mov	r0, r5
 8006760:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006762:	47b0      	blx	r6
 8006764:	2800      	cmp	r0, #0
 8006766:	dc06      	bgt.n	8006776 <__sflush_r+0xfe>
 8006768:	89a3      	ldrh	r3, [r4, #12]
 800676a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800676e:	81a3      	strh	r3, [r4, #12]
 8006770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006774:	e78e      	b.n	8006694 <__sflush_r+0x1c>
 8006776:	4407      	add	r7, r0
 8006778:	eba8 0800 	sub.w	r8, r8, r0
 800677c:	e7e9      	b.n	8006752 <__sflush_r+0xda>
 800677e:	bf00      	nop
 8006780:	20400001 	.word	0x20400001

08006784 <_fflush_r>:
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	690b      	ldr	r3, [r1, #16]
 8006788:	4605      	mov	r5, r0
 800678a:	460c      	mov	r4, r1
 800678c:	b1db      	cbz	r3, 80067c6 <_fflush_r+0x42>
 800678e:	b118      	cbz	r0, 8006798 <_fflush_r+0x14>
 8006790:	6983      	ldr	r3, [r0, #24]
 8006792:	b90b      	cbnz	r3, 8006798 <_fflush_r+0x14>
 8006794:	f000 f860 	bl	8006858 <__sinit>
 8006798:	4b0c      	ldr	r3, [pc, #48]	; (80067cc <_fflush_r+0x48>)
 800679a:	429c      	cmp	r4, r3
 800679c:	d109      	bne.n	80067b2 <_fflush_r+0x2e>
 800679e:	686c      	ldr	r4, [r5, #4]
 80067a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067a4:	b17b      	cbz	r3, 80067c6 <_fflush_r+0x42>
 80067a6:	4621      	mov	r1, r4
 80067a8:	4628      	mov	r0, r5
 80067aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067ae:	f7ff bf63 	b.w	8006678 <__sflush_r>
 80067b2:	4b07      	ldr	r3, [pc, #28]	; (80067d0 <_fflush_r+0x4c>)
 80067b4:	429c      	cmp	r4, r3
 80067b6:	d101      	bne.n	80067bc <_fflush_r+0x38>
 80067b8:	68ac      	ldr	r4, [r5, #8]
 80067ba:	e7f1      	b.n	80067a0 <_fflush_r+0x1c>
 80067bc:	4b05      	ldr	r3, [pc, #20]	; (80067d4 <_fflush_r+0x50>)
 80067be:	429c      	cmp	r4, r3
 80067c0:	bf08      	it	eq
 80067c2:	68ec      	ldreq	r4, [r5, #12]
 80067c4:	e7ec      	b.n	80067a0 <_fflush_r+0x1c>
 80067c6:	2000      	movs	r0, #0
 80067c8:	bd38      	pop	{r3, r4, r5, pc}
 80067ca:	bf00      	nop
 80067cc:	08007478 	.word	0x08007478
 80067d0:	08007498 	.word	0x08007498
 80067d4:	08007458 	.word	0x08007458

080067d8 <std>:
 80067d8:	2300      	movs	r3, #0
 80067da:	b510      	push	{r4, lr}
 80067dc:	4604      	mov	r4, r0
 80067de:	e9c0 3300 	strd	r3, r3, [r0]
 80067e2:	6083      	str	r3, [r0, #8]
 80067e4:	8181      	strh	r1, [r0, #12]
 80067e6:	6643      	str	r3, [r0, #100]	; 0x64
 80067e8:	81c2      	strh	r2, [r0, #14]
 80067ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067ee:	6183      	str	r3, [r0, #24]
 80067f0:	4619      	mov	r1, r3
 80067f2:	2208      	movs	r2, #8
 80067f4:	305c      	adds	r0, #92	; 0x5c
 80067f6:	f7ff fde6 	bl	80063c6 <memset>
 80067fa:	4b05      	ldr	r3, [pc, #20]	; (8006810 <std+0x38>)
 80067fc:	6224      	str	r4, [r4, #32]
 80067fe:	6263      	str	r3, [r4, #36]	; 0x24
 8006800:	4b04      	ldr	r3, [pc, #16]	; (8006814 <std+0x3c>)
 8006802:	62a3      	str	r3, [r4, #40]	; 0x28
 8006804:	4b04      	ldr	r3, [pc, #16]	; (8006818 <std+0x40>)
 8006806:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006808:	4b04      	ldr	r3, [pc, #16]	; (800681c <std+0x44>)
 800680a:	6323      	str	r3, [r4, #48]	; 0x30
 800680c:	bd10      	pop	{r4, pc}
 800680e:	bf00      	nop
 8006810:	08007199 	.word	0x08007199
 8006814:	080071bb 	.word	0x080071bb
 8006818:	080071f3 	.word	0x080071f3
 800681c:	08007217 	.word	0x08007217

08006820 <_cleanup_r>:
 8006820:	4901      	ldr	r1, [pc, #4]	; (8006828 <_cleanup_r+0x8>)
 8006822:	f000 b885 	b.w	8006930 <_fwalk_reent>
 8006826:	bf00      	nop
 8006828:	08006785 	.word	0x08006785

0800682c <__sfmoreglue>:
 800682c:	b570      	push	{r4, r5, r6, lr}
 800682e:	2568      	movs	r5, #104	; 0x68
 8006830:	1e4a      	subs	r2, r1, #1
 8006832:	4355      	muls	r5, r2
 8006834:	460e      	mov	r6, r1
 8006836:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800683a:	f000 f947 	bl	8006acc <_malloc_r>
 800683e:	4604      	mov	r4, r0
 8006840:	b140      	cbz	r0, 8006854 <__sfmoreglue+0x28>
 8006842:	2100      	movs	r1, #0
 8006844:	e9c0 1600 	strd	r1, r6, [r0]
 8006848:	300c      	adds	r0, #12
 800684a:	60a0      	str	r0, [r4, #8]
 800684c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006850:	f7ff fdb9 	bl	80063c6 <memset>
 8006854:	4620      	mov	r0, r4
 8006856:	bd70      	pop	{r4, r5, r6, pc}

08006858 <__sinit>:
 8006858:	6983      	ldr	r3, [r0, #24]
 800685a:	b510      	push	{r4, lr}
 800685c:	4604      	mov	r4, r0
 800685e:	bb33      	cbnz	r3, 80068ae <__sinit+0x56>
 8006860:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006864:	6503      	str	r3, [r0, #80]	; 0x50
 8006866:	4b12      	ldr	r3, [pc, #72]	; (80068b0 <__sinit+0x58>)
 8006868:	4a12      	ldr	r2, [pc, #72]	; (80068b4 <__sinit+0x5c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6282      	str	r2, [r0, #40]	; 0x28
 800686e:	4298      	cmp	r0, r3
 8006870:	bf04      	itt	eq
 8006872:	2301      	moveq	r3, #1
 8006874:	6183      	streq	r3, [r0, #24]
 8006876:	f000 f81f 	bl	80068b8 <__sfp>
 800687a:	6060      	str	r0, [r4, #4]
 800687c:	4620      	mov	r0, r4
 800687e:	f000 f81b 	bl	80068b8 <__sfp>
 8006882:	60a0      	str	r0, [r4, #8]
 8006884:	4620      	mov	r0, r4
 8006886:	f000 f817 	bl	80068b8 <__sfp>
 800688a:	2200      	movs	r2, #0
 800688c:	60e0      	str	r0, [r4, #12]
 800688e:	2104      	movs	r1, #4
 8006890:	6860      	ldr	r0, [r4, #4]
 8006892:	f7ff ffa1 	bl	80067d8 <std>
 8006896:	2201      	movs	r2, #1
 8006898:	2109      	movs	r1, #9
 800689a:	68a0      	ldr	r0, [r4, #8]
 800689c:	f7ff ff9c 	bl	80067d8 <std>
 80068a0:	2202      	movs	r2, #2
 80068a2:	2112      	movs	r1, #18
 80068a4:	68e0      	ldr	r0, [r4, #12]
 80068a6:	f7ff ff97 	bl	80067d8 <std>
 80068aa:	2301      	movs	r3, #1
 80068ac:	61a3      	str	r3, [r4, #24]
 80068ae:	bd10      	pop	{r4, pc}
 80068b0:	08007454 	.word	0x08007454
 80068b4:	08006821 	.word	0x08006821

080068b8 <__sfp>:
 80068b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ba:	4b1b      	ldr	r3, [pc, #108]	; (8006928 <__sfp+0x70>)
 80068bc:	4607      	mov	r7, r0
 80068be:	681e      	ldr	r6, [r3, #0]
 80068c0:	69b3      	ldr	r3, [r6, #24]
 80068c2:	b913      	cbnz	r3, 80068ca <__sfp+0x12>
 80068c4:	4630      	mov	r0, r6
 80068c6:	f7ff ffc7 	bl	8006858 <__sinit>
 80068ca:	3648      	adds	r6, #72	; 0x48
 80068cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80068d0:	3b01      	subs	r3, #1
 80068d2:	d503      	bpl.n	80068dc <__sfp+0x24>
 80068d4:	6833      	ldr	r3, [r6, #0]
 80068d6:	b133      	cbz	r3, 80068e6 <__sfp+0x2e>
 80068d8:	6836      	ldr	r6, [r6, #0]
 80068da:	e7f7      	b.n	80068cc <__sfp+0x14>
 80068dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80068e0:	b16d      	cbz	r5, 80068fe <__sfp+0x46>
 80068e2:	3468      	adds	r4, #104	; 0x68
 80068e4:	e7f4      	b.n	80068d0 <__sfp+0x18>
 80068e6:	2104      	movs	r1, #4
 80068e8:	4638      	mov	r0, r7
 80068ea:	f7ff ff9f 	bl	800682c <__sfmoreglue>
 80068ee:	6030      	str	r0, [r6, #0]
 80068f0:	2800      	cmp	r0, #0
 80068f2:	d1f1      	bne.n	80068d8 <__sfp+0x20>
 80068f4:	230c      	movs	r3, #12
 80068f6:	4604      	mov	r4, r0
 80068f8:	603b      	str	r3, [r7, #0]
 80068fa:	4620      	mov	r0, r4
 80068fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068fe:	4b0b      	ldr	r3, [pc, #44]	; (800692c <__sfp+0x74>)
 8006900:	6665      	str	r5, [r4, #100]	; 0x64
 8006902:	e9c4 5500 	strd	r5, r5, [r4]
 8006906:	60a5      	str	r5, [r4, #8]
 8006908:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800690c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006910:	2208      	movs	r2, #8
 8006912:	4629      	mov	r1, r5
 8006914:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006918:	f7ff fd55 	bl	80063c6 <memset>
 800691c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006920:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006924:	e7e9      	b.n	80068fa <__sfp+0x42>
 8006926:	bf00      	nop
 8006928:	08007454 	.word	0x08007454
 800692c:	ffff0001 	.word	0xffff0001

08006930 <_fwalk_reent>:
 8006930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006934:	4680      	mov	r8, r0
 8006936:	4689      	mov	r9, r1
 8006938:	2600      	movs	r6, #0
 800693a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800693e:	b914      	cbnz	r4, 8006946 <_fwalk_reent+0x16>
 8006940:	4630      	mov	r0, r6
 8006942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006946:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800694a:	3f01      	subs	r7, #1
 800694c:	d501      	bpl.n	8006952 <_fwalk_reent+0x22>
 800694e:	6824      	ldr	r4, [r4, #0]
 8006950:	e7f5      	b.n	800693e <_fwalk_reent+0xe>
 8006952:	89ab      	ldrh	r3, [r5, #12]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d907      	bls.n	8006968 <_fwalk_reent+0x38>
 8006958:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800695c:	3301      	adds	r3, #1
 800695e:	d003      	beq.n	8006968 <_fwalk_reent+0x38>
 8006960:	4629      	mov	r1, r5
 8006962:	4640      	mov	r0, r8
 8006964:	47c8      	blx	r9
 8006966:	4306      	orrs	r6, r0
 8006968:	3568      	adds	r5, #104	; 0x68
 800696a:	e7ee      	b.n	800694a <_fwalk_reent+0x1a>

0800696c <__swhatbuf_r>:
 800696c:	b570      	push	{r4, r5, r6, lr}
 800696e:	460e      	mov	r6, r1
 8006970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006974:	b096      	sub	sp, #88	; 0x58
 8006976:	2900      	cmp	r1, #0
 8006978:	4614      	mov	r4, r2
 800697a:	461d      	mov	r5, r3
 800697c:	da07      	bge.n	800698e <__swhatbuf_r+0x22>
 800697e:	2300      	movs	r3, #0
 8006980:	602b      	str	r3, [r5, #0]
 8006982:	89b3      	ldrh	r3, [r6, #12]
 8006984:	061a      	lsls	r2, r3, #24
 8006986:	d410      	bmi.n	80069aa <__swhatbuf_r+0x3e>
 8006988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800698c:	e00e      	b.n	80069ac <__swhatbuf_r+0x40>
 800698e:	466a      	mov	r2, sp
 8006990:	f000 fc68 	bl	8007264 <_fstat_r>
 8006994:	2800      	cmp	r0, #0
 8006996:	dbf2      	blt.n	800697e <__swhatbuf_r+0x12>
 8006998:	9a01      	ldr	r2, [sp, #4]
 800699a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800699e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80069a2:	425a      	negs	r2, r3
 80069a4:	415a      	adcs	r2, r3
 80069a6:	602a      	str	r2, [r5, #0]
 80069a8:	e7ee      	b.n	8006988 <__swhatbuf_r+0x1c>
 80069aa:	2340      	movs	r3, #64	; 0x40
 80069ac:	2000      	movs	r0, #0
 80069ae:	6023      	str	r3, [r4, #0]
 80069b0:	b016      	add	sp, #88	; 0x58
 80069b2:	bd70      	pop	{r4, r5, r6, pc}

080069b4 <__smakebuf_r>:
 80069b4:	898b      	ldrh	r3, [r1, #12]
 80069b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069b8:	079d      	lsls	r5, r3, #30
 80069ba:	4606      	mov	r6, r0
 80069bc:	460c      	mov	r4, r1
 80069be:	d507      	bpl.n	80069d0 <__smakebuf_r+0x1c>
 80069c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80069c4:	6023      	str	r3, [r4, #0]
 80069c6:	6123      	str	r3, [r4, #16]
 80069c8:	2301      	movs	r3, #1
 80069ca:	6163      	str	r3, [r4, #20]
 80069cc:	b002      	add	sp, #8
 80069ce:	bd70      	pop	{r4, r5, r6, pc}
 80069d0:	ab01      	add	r3, sp, #4
 80069d2:	466a      	mov	r2, sp
 80069d4:	f7ff ffca 	bl	800696c <__swhatbuf_r>
 80069d8:	9900      	ldr	r1, [sp, #0]
 80069da:	4605      	mov	r5, r0
 80069dc:	4630      	mov	r0, r6
 80069de:	f000 f875 	bl	8006acc <_malloc_r>
 80069e2:	b948      	cbnz	r0, 80069f8 <__smakebuf_r+0x44>
 80069e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069e8:	059a      	lsls	r2, r3, #22
 80069ea:	d4ef      	bmi.n	80069cc <__smakebuf_r+0x18>
 80069ec:	f023 0303 	bic.w	r3, r3, #3
 80069f0:	f043 0302 	orr.w	r3, r3, #2
 80069f4:	81a3      	strh	r3, [r4, #12]
 80069f6:	e7e3      	b.n	80069c0 <__smakebuf_r+0xc>
 80069f8:	4b0d      	ldr	r3, [pc, #52]	; (8006a30 <__smakebuf_r+0x7c>)
 80069fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80069fc:	89a3      	ldrh	r3, [r4, #12]
 80069fe:	6020      	str	r0, [r4, #0]
 8006a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a04:	81a3      	strh	r3, [r4, #12]
 8006a06:	9b00      	ldr	r3, [sp, #0]
 8006a08:	6120      	str	r0, [r4, #16]
 8006a0a:	6163      	str	r3, [r4, #20]
 8006a0c:	9b01      	ldr	r3, [sp, #4]
 8006a0e:	b15b      	cbz	r3, 8006a28 <__smakebuf_r+0x74>
 8006a10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a14:	4630      	mov	r0, r6
 8006a16:	f000 fc37 	bl	8007288 <_isatty_r>
 8006a1a:	b128      	cbz	r0, 8006a28 <__smakebuf_r+0x74>
 8006a1c:	89a3      	ldrh	r3, [r4, #12]
 8006a1e:	f023 0303 	bic.w	r3, r3, #3
 8006a22:	f043 0301 	orr.w	r3, r3, #1
 8006a26:	81a3      	strh	r3, [r4, #12]
 8006a28:	89a3      	ldrh	r3, [r4, #12]
 8006a2a:	431d      	orrs	r5, r3
 8006a2c:	81a5      	strh	r5, [r4, #12]
 8006a2e:	e7cd      	b.n	80069cc <__smakebuf_r+0x18>
 8006a30:	08006821 	.word	0x08006821

08006a34 <_free_r>:
 8006a34:	b538      	push	{r3, r4, r5, lr}
 8006a36:	4605      	mov	r5, r0
 8006a38:	2900      	cmp	r1, #0
 8006a3a:	d043      	beq.n	8006ac4 <_free_r+0x90>
 8006a3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a40:	1f0c      	subs	r4, r1, #4
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	bfb8      	it	lt
 8006a46:	18e4      	addlt	r4, r4, r3
 8006a48:	f000 fc4e 	bl	80072e8 <__malloc_lock>
 8006a4c:	4a1e      	ldr	r2, [pc, #120]	; (8006ac8 <_free_r+0x94>)
 8006a4e:	6813      	ldr	r3, [r2, #0]
 8006a50:	4610      	mov	r0, r2
 8006a52:	b933      	cbnz	r3, 8006a62 <_free_r+0x2e>
 8006a54:	6063      	str	r3, [r4, #4]
 8006a56:	6014      	str	r4, [r2, #0]
 8006a58:	4628      	mov	r0, r5
 8006a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a5e:	f000 bc44 	b.w	80072ea <__malloc_unlock>
 8006a62:	42a3      	cmp	r3, r4
 8006a64:	d90b      	bls.n	8006a7e <_free_r+0x4a>
 8006a66:	6821      	ldr	r1, [r4, #0]
 8006a68:	1862      	adds	r2, r4, r1
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	bf01      	itttt	eq
 8006a6e:	681a      	ldreq	r2, [r3, #0]
 8006a70:	685b      	ldreq	r3, [r3, #4]
 8006a72:	1852      	addeq	r2, r2, r1
 8006a74:	6022      	streq	r2, [r4, #0]
 8006a76:	6063      	str	r3, [r4, #4]
 8006a78:	6004      	str	r4, [r0, #0]
 8006a7a:	e7ed      	b.n	8006a58 <_free_r+0x24>
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	b10a      	cbz	r2, 8006a86 <_free_r+0x52>
 8006a82:	42a2      	cmp	r2, r4
 8006a84:	d9fa      	bls.n	8006a7c <_free_r+0x48>
 8006a86:	6819      	ldr	r1, [r3, #0]
 8006a88:	1858      	adds	r0, r3, r1
 8006a8a:	42a0      	cmp	r0, r4
 8006a8c:	d10b      	bne.n	8006aa6 <_free_r+0x72>
 8006a8e:	6820      	ldr	r0, [r4, #0]
 8006a90:	4401      	add	r1, r0
 8006a92:	1858      	adds	r0, r3, r1
 8006a94:	4282      	cmp	r2, r0
 8006a96:	6019      	str	r1, [r3, #0]
 8006a98:	d1de      	bne.n	8006a58 <_free_r+0x24>
 8006a9a:	6810      	ldr	r0, [r2, #0]
 8006a9c:	6852      	ldr	r2, [r2, #4]
 8006a9e:	4401      	add	r1, r0
 8006aa0:	6019      	str	r1, [r3, #0]
 8006aa2:	605a      	str	r2, [r3, #4]
 8006aa4:	e7d8      	b.n	8006a58 <_free_r+0x24>
 8006aa6:	d902      	bls.n	8006aae <_free_r+0x7a>
 8006aa8:	230c      	movs	r3, #12
 8006aaa:	602b      	str	r3, [r5, #0]
 8006aac:	e7d4      	b.n	8006a58 <_free_r+0x24>
 8006aae:	6820      	ldr	r0, [r4, #0]
 8006ab0:	1821      	adds	r1, r4, r0
 8006ab2:	428a      	cmp	r2, r1
 8006ab4:	bf01      	itttt	eq
 8006ab6:	6811      	ldreq	r1, [r2, #0]
 8006ab8:	6852      	ldreq	r2, [r2, #4]
 8006aba:	1809      	addeq	r1, r1, r0
 8006abc:	6021      	streq	r1, [r4, #0]
 8006abe:	6062      	str	r2, [r4, #4]
 8006ac0:	605c      	str	r4, [r3, #4]
 8006ac2:	e7c9      	b.n	8006a58 <_free_r+0x24>
 8006ac4:	bd38      	pop	{r3, r4, r5, pc}
 8006ac6:	bf00      	nop
 8006ac8:	200019a0 	.word	0x200019a0

08006acc <_malloc_r>:
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	1ccd      	adds	r5, r1, #3
 8006ad0:	f025 0503 	bic.w	r5, r5, #3
 8006ad4:	3508      	adds	r5, #8
 8006ad6:	2d0c      	cmp	r5, #12
 8006ad8:	bf38      	it	cc
 8006ada:	250c      	movcc	r5, #12
 8006adc:	2d00      	cmp	r5, #0
 8006ade:	4606      	mov	r6, r0
 8006ae0:	db01      	blt.n	8006ae6 <_malloc_r+0x1a>
 8006ae2:	42a9      	cmp	r1, r5
 8006ae4:	d903      	bls.n	8006aee <_malloc_r+0x22>
 8006ae6:	230c      	movs	r3, #12
 8006ae8:	6033      	str	r3, [r6, #0]
 8006aea:	2000      	movs	r0, #0
 8006aec:	bd70      	pop	{r4, r5, r6, pc}
 8006aee:	f000 fbfb 	bl	80072e8 <__malloc_lock>
 8006af2:	4a21      	ldr	r2, [pc, #132]	; (8006b78 <_malloc_r+0xac>)
 8006af4:	6814      	ldr	r4, [r2, #0]
 8006af6:	4621      	mov	r1, r4
 8006af8:	b991      	cbnz	r1, 8006b20 <_malloc_r+0x54>
 8006afa:	4c20      	ldr	r4, [pc, #128]	; (8006b7c <_malloc_r+0xb0>)
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	b91b      	cbnz	r3, 8006b08 <_malloc_r+0x3c>
 8006b00:	4630      	mov	r0, r6
 8006b02:	f000 fb39 	bl	8007178 <_sbrk_r>
 8006b06:	6020      	str	r0, [r4, #0]
 8006b08:	4629      	mov	r1, r5
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	f000 fb34 	bl	8007178 <_sbrk_r>
 8006b10:	1c43      	adds	r3, r0, #1
 8006b12:	d124      	bne.n	8006b5e <_malloc_r+0x92>
 8006b14:	230c      	movs	r3, #12
 8006b16:	4630      	mov	r0, r6
 8006b18:	6033      	str	r3, [r6, #0]
 8006b1a:	f000 fbe6 	bl	80072ea <__malloc_unlock>
 8006b1e:	e7e4      	b.n	8006aea <_malloc_r+0x1e>
 8006b20:	680b      	ldr	r3, [r1, #0]
 8006b22:	1b5b      	subs	r3, r3, r5
 8006b24:	d418      	bmi.n	8006b58 <_malloc_r+0x8c>
 8006b26:	2b0b      	cmp	r3, #11
 8006b28:	d90f      	bls.n	8006b4a <_malloc_r+0x7e>
 8006b2a:	600b      	str	r3, [r1, #0]
 8006b2c:	18cc      	adds	r4, r1, r3
 8006b2e:	50cd      	str	r5, [r1, r3]
 8006b30:	4630      	mov	r0, r6
 8006b32:	f000 fbda 	bl	80072ea <__malloc_unlock>
 8006b36:	f104 000b 	add.w	r0, r4, #11
 8006b3a:	1d23      	adds	r3, r4, #4
 8006b3c:	f020 0007 	bic.w	r0, r0, #7
 8006b40:	1ac3      	subs	r3, r0, r3
 8006b42:	d0d3      	beq.n	8006aec <_malloc_r+0x20>
 8006b44:	425a      	negs	r2, r3
 8006b46:	50e2      	str	r2, [r4, r3]
 8006b48:	e7d0      	b.n	8006aec <_malloc_r+0x20>
 8006b4a:	684b      	ldr	r3, [r1, #4]
 8006b4c:	428c      	cmp	r4, r1
 8006b4e:	bf16      	itet	ne
 8006b50:	6063      	strne	r3, [r4, #4]
 8006b52:	6013      	streq	r3, [r2, #0]
 8006b54:	460c      	movne	r4, r1
 8006b56:	e7eb      	b.n	8006b30 <_malloc_r+0x64>
 8006b58:	460c      	mov	r4, r1
 8006b5a:	6849      	ldr	r1, [r1, #4]
 8006b5c:	e7cc      	b.n	8006af8 <_malloc_r+0x2c>
 8006b5e:	1cc4      	adds	r4, r0, #3
 8006b60:	f024 0403 	bic.w	r4, r4, #3
 8006b64:	42a0      	cmp	r0, r4
 8006b66:	d005      	beq.n	8006b74 <_malloc_r+0xa8>
 8006b68:	1a21      	subs	r1, r4, r0
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	f000 fb04 	bl	8007178 <_sbrk_r>
 8006b70:	3001      	adds	r0, #1
 8006b72:	d0cf      	beq.n	8006b14 <_malloc_r+0x48>
 8006b74:	6025      	str	r5, [r4, #0]
 8006b76:	e7db      	b.n	8006b30 <_malloc_r+0x64>
 8006b78:	200019a0 	.word	0x200019a0
 8006b7c:	200019a4 	.word	0x200019a4

08006b80 <__sfputc_r>:
 8006b80:	6893      	ldr	r3, [r2, #8]
 8006b82:	b410      	push	{r4}
 8006b84:	3b01      	subs	r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	6093      	str	r3, [r2, #8]
 8006b8a:	da07      	bge.n	8006b9c <__sfputc_r+0x1c>
 8006b8c:	6994      	ldr	r4, [r2, #24]
 8006b8e:	42a3      	cmp	r3, r4
 8006b90:	db01      	blt.n	8006b96 <__sfputc_r+0x16>
 8006b92:	290a      	cmp	r1, #10
 8006b94:	d102      	bne.n	8006b9c <__sfputc_r+0x1c>
 8006b96:	bc10      	pop	{r4}
 8006b98:	f7ff bcae 	b.w	80064f8 <__swbuf_r>
 8006b9c:	6813      	ldr	r3, [r2, #0]
 8006b9e:	1c58      	adds	r0, r3, #1
 8006ba0:	6010      	str	r0, [r2, #0]
 8006ba2:	7019      	strb	r1, [r3, #0]
 8006ba4:	4608      	mov	r0, r1
 8006ba6:	bc10      	pop	{r4}
 8006ba8:	4770      	bx	lr

08006baa <__sfputs_r>:
 8006baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bac:	4606      	mov	r6, r0
 8006bae:	460f      	mov	r7, r1
 8006bb0:	4614      	mov	r4, r2
 8006bb2:	18d5      	adds	r5, r2, r3
 8006bb4:	42ac      	cmp	r4, r5
 8006bb6:	d101      	bne.n	8006bbc <__sfputs_r+0x12>
 8006bb8:	2000      	movs	r0, #0
 8006bba:	e007      	b.n	8006bcc <__sfputs_r+0x22>
 8006bbc:	463a      	mov	r2, r7
 8006bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	f7ff ffdc 	bl	8006b80 <__sfputc_r>
 8006bc8:	1c43      	adds	r3, r0, #1
 8006bca:	d1f3      	bne.n	8006bb4 <__sfputs_r+0xa>
 8006bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006bd0 <_vfiprintf_r>:
 8006bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd4:	460c      	mov	r4, r1
 8006bd6:	b09d      	sub	sp, #116	; 0x74
 8006bd8:	4617      	mov	r7, r2
 8006bda:	461d      	mov	r5, r3
 8006bdc:	4606      	mov	r6, r0
 8006bde:	b118      	cbz	r0, 8006be8 <_vfiprintf_r+0x18>
 8006be0:	6983      	ldr	r3, [r0, #24]
 8006be2:	b90b      	cbnz	r3, 8006be8 <_vfiprintf_r+0x18>
 8006be4:	f7ff fe38 	bl	8006858 <__sinit>
 8006be8:	4b7c      	ldr	r3, [pc, #496]	; (8006ddc <_vfiprintf_r+0x20c>)
 8006bea:	429c      	cmp	r4, r3
 8006bec:	d158      	bne.n	8006ca0 <_vfiprintf_r+0xd0>
 8006bee:	6874      	ldr	r4, [r6, #4]
 8006bf0:	89a3      	ldrh	r3, [r4, #12]
 8006bf2:	0718      	lsls	r0, r3, #28
 8006bf4:	d55e      	bpl.n	8006cb4 <_vfiprintf_r+0xe4>
 8006bf6:	6923      	ldr	r3, [r4, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d05b      	beq.n	8006cb4 <_vfiprintf_r+0xe4>
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8006c00:	2320      	movs	r3, #32
 8006c02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c06:	2330      	movs	r3, #48	; 0x30
 8006c08:	f04f 0b01 	mov.w	fp, #1
 8006c0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c10:	9503      	str	r5, [sp, #12]
 8006c12:	46b8      	mov	r8, r7
 8006c14:	4645      	mov	r5, r8
 8006c16:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006c1a:	b10b      	cbz	r3, 8006c20 <_vfiprintf_r+0x50>
 8006c1c:	2b25      	cmp	r3, #37	; 0x25
 8006c1e:	d154      	bne.n	8006cca <_vfiprintf_r+0xfa>
 8006c20:	ebb8 0a07 	subs.w	sl, r8, r7
 8006c24:	d00b      	beq.n	8006c3e <_vfiprintf_r+0x6e>
 8006c26:	4653      	mov	r3, sl
 8006c28:	463a      	mov	r2, r7
 8006c2a:	4621      	mov	r1, r4
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	f7ff ffbc 	bl	8006baa <__sfputs_r>
 8006c32:	3001      	adds	r0, #1
 8006c34:	f000 80c2 	beq.w	8006dbc <_vfiprintf_r+0x1ec>
 8006c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c3a:	4453      	add	r3, sl
 8006c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c3e:	f898 3000 	ldrb.w	r3, [r8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 80ba 	beq.w	8006dbc <_vfiprintf_r+0x1ec>
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c52:	9304      	str	r3, [sp, #16]
 8006c54:	9307      	str	r3, [sp, #28]
 8006c56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c5a:	931a      	str	r3, [sp, #104]	; 0x68
 8006c5c:	46a8      	mov	r8, r5
 8006c5e:	2205      	movs	r2, #5
 8006c60:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006c64:	485e      	ldr	r0, [pc, #376]	; (8006de0 <_vfiprintf_r+0x210>)
 8006c66:	f000 fb31 	bl	80072cc <memchr>
 8006c6a:	9b04      	ldr	r3, [sp, #16]
 8006c6c:	bb78      	cbnz	r0, 8006cce <_vfiprintf_r+0xfe>
 8006c6e:	06d9      	lsls	r1, r3, #27
 8006c70:	bf44      	itt	mi
 8006c72:	2220      	movmi	r2, #32
 8006c74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c78:	071a      	lsls	r2, r3, #28
 8006c7a:	bf44      	itt	mi
 8006c7c:	222b      	movmi	r2, #43	; 0x2b
 8006c7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c82:	782a      	ldrb	r2, [r5, #0]
 8006c84:	2a2a      	cmp	r2, #42	; 0x2a
 8006c86:	d02a      	beq.n	8006cde <_vfiprintf_r+0x10e>
 8006c88:	46a8      	mov	r8, r5
 8006c8a:	2000      	movs	r0, #0
 8006c8c:	250a      	movs	r5, #10
 8006c8e:	9a07      	ldr	r2, [sp, #28]
 8006c90:	4641      	mov	r1, r8
 8006c92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c96:	3b30      	subs	r3, #48	; 0x30
 8006c98:	2b09      	cmp	r3, #9
 8006c9a:	d969      	bls.n	8006d70 <_vfiprintf_r+0x1a0>
 8006c9c:	b360      	cbz	r0, 8006cf8 <_vfiprintf_r+0x128>
 8006c9e:	e024      	b.n	8006cea <_vfiprintf_r+0x11a>
 8006ca0:	4b50      	ldr	r3, [pc, #320]	; (8006de4 <_vfiprintf_r+0x214>)
 8006ca2:	429c      	cmp	r4, r3
 8006ca4:	d101      	bne.n	8006caa <_vfiprintf_r+0xda>
 8006ca6:	68b4      	ldr	r4, [r6, #8]
 8006ca8:	e7a2      	b.n	8006bf0 <_vfiprintf_r+0x20>
 8006caa:	4b4f      	ldr	r3, [pc, #316]	; (8006de8 <_vfiprintf_r+0x218>)
 8006cac:	429c      	cmp	r4, r3
 8006cae:	bf08      	it	eq
 8006cb0:	68f4      	ldreq	r4, [r6, #12]
 8006cb2:	e79d      	b.n	8006bf0 <_vfiprintf_r+0x20>
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	f7ff fc70 	bl	800659c <__swsetup_r>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	d09d      	beq.n	8006bfc <_vfiprintf_r+0x2c>
 8006cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cc4:	b01d      	add	sp, #116	; 0x74
 8006cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cca:	46a8      	mov	r8, r5
 8006ccc:	e7a2      	b.n	8006c14 <_vfiprintf_r+0x44>
 8006cce:	4a44      	ldr	r2, [pc, #272]	; (8006de0 <_vfiprintf_r+0x210>)
 8006cd0:	4645      	mov	r5, r8
 8006cd2:	1a80      	subs	r0, r0, r2
 8006cd4:	fa0b f000 	lsl.w	r0, fp, r0
 8006cd8:	4318      	orrs	r0, r3
 8006cda:	9004      	str	r0, [sp, #16]
 8006cdc:	e7be      	b.n	8006c5c <_vfiprintf_r+0x8c>
 8006cde:	9a03      	ldr	r2, [sp, #12]
 8006ce0:	1d11      	adds	r1, r2, #4
 8006ce2:	6812      	ldr	r2, [r2, #0]
 8006ce4:	9103      	str	r1, [sp, #12]
 8006ce6:	2a00      	cmp	r2, #0
 8006ce8:	db01      	blt.n	8006cee <_vfiprintf_r+0x11e>
 8006cea:	9207      	str	r2, [sp, #28]
 8006cec:	e004      	b.n	8006cf8 <_vfiprintf_r+0x128>
 8006cee:	4252      	negs	r2, r2
 8006cf0:	f043 0302 	orr.w	r3, r3, #2
 8006cf4:	9207      	str	r2, [sp, #28]
 8006cf6:	9304      	str	r3, [sp, #16]
 8006cf8:	f898 3000 	ldrb.w	r3, [r8]
 8006cfc:	2b2e      	cmp	r3, #46	; 0x2e
 8006cfe:	d10e      	bne.n	8006d1e <_vfiprintf_r+0x14e>
 8006d00:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006d04:	2b2a      	cmp	r3, #42	; 0x2a
 8006d06:	d138      	bne.n	8006d7a <_vfiprintf_r+0x1aa>
 8006d08:	9b03      	ldr	r3, [sp, #12]
 8006d0a:	f108 0802 	add.w	r8, r8, #2
 8006d0e:	1d1a      	adds	r2, r3, #4
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	9203      	str	r2, [sp, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	bfb8      	it	lt
 8006d18:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006d1c:	9305      	str	r3, [sp, #20]
 8006d1e:	4d33      	ldr	r5, [pc, #204]	; (8006dec <_vfiprintf_r+0x21c>)
 8006d20:	2203      	movs	r2, #3
 8006d22:	f898 1000 	ldrb.w	r1, [r8]
 8006d26:	4628      	mov	r0, r5
 8006d28:	f000 fad0 	bl	80072cc <memchr>
 8006d2c:	b140      	cbz	r0, 8006d40 <_vfiprintf_r+0x170>
 8006d2e:	2340      	movs	r3, #64	; 0x40
 8006d30:	1b40      	subs	r0, r0, r5
 8006d32:	fa03 f000 	lsl.w	r0, r3, r0
 8006d36:	9b04      	ldr	r3, [sp, #16]
 8006d38:	f108 0801 	add.w	r8, r8, #1
 8006d3c:	4303      	orrs	r3, r0
 8006d3e:	9304      	str	r3, [sp, #16]
 8006d40:	f898 1000 	ldrb.w	r1, [r8]
 8006d44:	2206      	movs	r2, #6
 8006d46:	482a      	ldr	r0, [pc, #168]	; (8006df0 <_vfiprintf_r+0x220>)
 8006d48:	f108 0701 	add.w	r7, r8, #1
 8006d4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d50:	f000 fabc 	bl	80072cc <memchr>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d037      	beq.n	8006dc8 <_vfiprintf_r+0x1f8>
 8006d58:	4b26      	ldr	r3, [pc, #152]	; (8006df4 <_vfiprintf_r+0x224>)
 8006d5a:	bb1b      	cbnz	r3, 8006da4 <_vfiprintf_r+0x1d4>
 8006d5c:	9b03      	ldr	r3, [sp, #12]
 8006d5e:	3307      	adds	r3, #7
 8006d60:	f023 0307 	bic.w	r3, r3, #7
 8006d64:	3308      	adds	r3, #8
 8006d66:	9303      	str	r3, [sp, #12]
 8006d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d6a:	444b      	add	r3, r9
 8006d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d6e:	e750      	b.n	8006c12 <_vfiprintf_r+0x42>
 8006d70:	fb05 3202 	mla	r2, r5, r2, r3
 8006d74:	2001      	movs	r0, #1
 8006d76:	4688      	mov	r8, r1
 8006d78:	e78a      	b.n	8006c90 <_vfiprintf_r+0xc0>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	250a      	movs	r5, #10
 8006d7e:	4619      	mov	r1, r3
 8006d80:	f108 0801 	add.w	r8, r8, #1
 8006d84:	9305      	str	r3, [sp, #20]
 8006d86:	4640      	mov	r0, r8
 8006d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d8c:	3a30      	subs	r2, #48	; 0x30
 8006d8e:	2a09      	cmp	r2, #9
 8006d90:	d903      	bls.n	8006d9a <_vfiprintf_r+0x1ca>
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d0c3      	beq.n	8006d1e <_vfiprintf_r+0x14e>
 8006d96:	9105      	str	r1, [sp, #20]
 8006d98:	e7c1      	b.n	8006d1e <_vfiprintf_r+0x14e>
 8006d9a:	fb05 2101 	mla	r1, r5, r1, r2
 8006d9e:	2301      	movs	r3, #1
 8006da0:	4680      	mov	r8, r0
 8006da2:	e7f0      	b.n	8006d86 <_vfiprintf_r+0x1b6>
 8006da4:	ab03      	add	r3, sp, #12
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	4622      	mov	r2, r4
 8006daa:	4b13      	ldr	r3, [pc, #76]	; (8006df8 <_vfiprintf_r+0x228>)
 8006dac:	a904      	add	r1, sp, #16
 8006dae:	4630      	mov	r0, r6
 8006db0:	f3af 8000 	nop.w
 8006db4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006db8:	4681      	mov	r9, r0
 8006dba:	d1d5      	bne.n	8006d68 <_vfiprintf_r+0x198>
 8006dbc:	89a3      	ldrh	r3, [r4, #12]
 8006dbe:	065b      	lsls	r3, r3, #25
 8006dc0:	f53f af7e 	bmi.w	8006cc0 <_vfiprintf_r+0xf0>
 8006dc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dc6:	e77d      	b.n	8006cc4 <_vfiprintf_r+0xf4>
 8006dc8:	ab03      	add	r3, sp, #12
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	4622      	mov	r2, r4
 8006dce:	4b0a      	ldr	r3, [pc, #40]	; (8006df8 <_vfiprintf_r+0x228>)
 8006dd0:	a904      	add	r1, sp, #16
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f000 f888 	bl	8006ee8 <_printf_i>
 8006dd8:	e7ec      	b.n	8006db4 <_vfiprintf_r+0x1e4>
 8006dda:	bf00      	nop
 8006ddc:	08007478 	.word	0x08007478
 8006de0:	080074b8 	.word	0x080074b8
 8006de4:	08007498 	.word	0x08007498
 8006de8:	08007458 	.word	0x08007458
 8006dec:	080074be 	.word	0x080074be
 8006df0:	080074c2 	.word	0x080074c2
 8006df4:	00000000 	.word	0x00000000
 8006df8:	08006bab 	.word	0x08006bab

08006dfc <_printf_common>:
 8006dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e00:	4691      	mov	r9, r2
 8006e02:	461f      	mov	r7, r3
 8006e04:	688a      	ldr	r2, [r1, #8]
 8006e06:	690b      	ldr	r3, [r1, #16]
 8006e08:	4606      	mov	r6, r0
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	bfb8      	it	lt
 8006e0e:	4613      	movlt	r3, r2
 8006e10:	f8c9 3000 	str.w	r3, [r9]
 8006e14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e18:	460c      	mov	r4, r1
 8006e1a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e1e:	b112      	cbz	r2, 8006e26 <_printf_common+0x2a>
 8006e20:	3301      	adds	r3, #1
 8006e22:	f8c9 3000 	str.w	r3, [r9]
 8006e26:	6823      	ldr	r3, [r4, #0]
 8006e28:	0699      	lsls	r1, r3, #26
 8006e2a:	bf42      	ittt	mi
 8006e2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006e30:	3302      	addmi	r3, #2
 8006e32:	f8c9 3000 	strmi.w	r3, [r9]
 8006e36:	6825      	ldr	r5, [r4, #0]
 8006e38:	f015 0506 	ands.w	r5, r5, #6
 8006e3c:	d107      	bne.n	8006e4e <_printf_common+0x52>
 8006e3e:	f104 0a19 	add.w	sl, r4, #25
 8006e42:	68e3      	ldr	r3, [r4, #12]
 8006e44:	f8d9 2000 	ldr.w	r2, [r9]
 8006e48:	1a9b      	subs	r3, r3, r2
 8006e4a:	42ab      	cmp	r3, r5
 8006e4c:	dc29      	bgt.n	8006ea2 <_printf_common+0xa6>
 8006e4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006e52:	6822      	ldr	r2, [r4, #0]
 8006e54:	3300      	adds	r3, #0
 8006e56:	bf18      	it	ne
 8006e58:	2301      	movne	r3, #1
 8006e5a:	0692      	lsls	r2, r2, #26
 8006e5c:	d42e      	bmi.n	8006ebc <_printf_common+0xc0>
 8006e5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e62:	4639      	mov	r1, r7
 8006e64:	4630      	mov	r0, r6
 8006e66:	47c0      	blx	r8
 8006e68:	3001      	adds	r0, #1
 8006e6a:	d021      	beq.n	8006eb0 <_printf_common+0xb4>
 8006e6c:	6823      	ldr	r3, [r4, #0]
 8006e6e:	68e5      	ldr	r5, [r4, #12]
 8006e70:	f003 0306 	and.w	r3, r3, #6
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	bf18      	it	ne
 8006e78:	2500      	movne	r5, #0
 8006e7a:	f8d9 2000 	ldr.w	r2, [r9]
 8006e7e:	f04f 0900 	mov.w	r9, #0
 8006e82:	bf08      	it	eq
 8006e84:	1aad      	subeq	r5, r5, r2
 8006e86:	68a3      	ldr	r3, [r4, #8]
 8006e88:	6922      	ldr	r2, [r4, #16]
 8006e8a:	bf08      	it	eq
 8006e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e90:	4293      	cmp	r3, r2
 8006e92:	bfc4      	itt	gt
 8006e94:	1a9b      	subgt	r3, r3, r2
 8006e96:	18ed      	addgt	r5, r5, r3
 8006e98:	341a      	adds	r4, #26
 8006e9a:	454d      	cmp	r5, r9
 8006e9c:	d11a      	bne.n	8006ed4 <_printf_common+0xd8>
 8006e9e:	2000      	movs	r0, #0
 8006ea0:	e008      	b.n	8006eb4 <_printf_common+0xb8>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	4652      	mov	r2, sl
 8006ea6:	4639      	mov	r1, r7
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	47c0      	blx	r8
 8006eac:	3001      	adds	r0, #1
 8006eae:	d103      	bne.n	8006eb8 <_printf_common+0xbc>
 8006eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eb8:	3501      	adds	r5, #1
 8006eba:	e7c2      	b.n	8006e42 <_printf_common+0x46>
 8006ebc:	2030      	movs	r0, #48	; 0x30
 8006ebe:	18e1      	adds	r1, r4, r3
 8006ec0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006eca:	4422      	add	r2, r4
 8006ecc:	3302      	adds	r3, #2
 8006ece:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ed2:	e7c4      	b.n	8006e5e <_printf_common+0x62>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	4622      	mov	r2, r4
 8006ed8:	4639      	mov	r1, r7
 8006eda:	4630      	mov	r0, r6
 8006edc:	47c0      	blx	r8
 8006ede:	3001      	adds	r0, #1
 8006ee0:	d0e6      	beq.n	8006eb0 <_printf_common+0xb4>
 8006ee2:	f109 0901 	add.w	r9, r9, #1
 8006ee6:	e7d8      	b.n	8006e9a <_printf_common+0x9e>

08006ee8 <_printf_i>:
 8006ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006eec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006ef0:	460c      	mov	r4, r1
 8006ef2:	7e09      	ldrb	r1, [r1, #24]
 8006ef4:	b085      	sub	sp, #20
 8006ef6:	296e      	cmp	r1, #110	; 0x6e
 8006ef8:	4617      	mov	r7, r2
 8006efa:	4606      	mov	r6, r0
 8006efc:	4698      	mov	r8, r3
 8006efe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f00:	f000 80b3 	beq.w	800706a <_printf_i+0x182>
 8006f04:	d822      	bhi.n	8006f4c <_printf_i+0x64>
 8006f06:	2963      	cmp	r1, #99	; 0x63
 8006f08:	d036      	beq.n	8006f78 <_printf_i+0x90>
 8006f0a:	d80a      	bhi.n	8006f22 <_printf_i+0x3a>
 8006f0c:	2900      	cmp	r1, #0
 8006f0e:	f000 80b9 	beq.w	8007084 <_printf_i+0x19c>
 8006f12:	2958      	cmp	r1, #88	; 0x58
 8006f14:	f000 8083 	beq.w	800701e <_printf_i+0x136>
 8006f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f1c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006f20:	e032      	b.n	8006f88 <_printf_i+0xa0>
 8006f22:	2964      	cmp	r1, #100	; 0x64
 8006f24:	d001      	beq.n	8006f2a <_printf_i+0x42>
 8006f26:	2969      	cmp	r1, #105	; 0x69
 8006f28:	d1f6      	bne.n	8006f18 <_printf_i+0x30>
 8006f2a:	6820      	ldr	r0, [r4, #0]
 8006f2c:	6813      	ldr	r3, [r2, #0]
 8006f2e:	0605      	lsls	r5, r0, #24
 8006f30:	f103 0104 	add.w	r1, r3, #4
 8006f34:	d52a      	bpl.n	8006f8c <_printf_i+0xa4>
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6011      	str	r1, [r2, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	da03      	bge.n	8006f46 <_printf_i+0x5e>
 8006f3e:	222d      	movs	r2, #45	; 0x2d
 8006f40:	425b      	negs	r3, r3
 8006f42:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006f46:	486f      	ldr	r0, [pc, #444]	; (8007104 <_printf_i+0x21c>)
 8006f48:	220a      	movs	r2, #10
 8006f4a:	e039      	b.n	8006fc0 <_printf_i+0xd8>
 8006f4c:	2973      	cmp	r1, #115	; 0x73
 8006f4e:	f000 809d 	beq.w	800708c <_printf_i+0x1a4>
 8006f52:	d808      	bhi.n	8006f66 <_printf_i+0x7e>
 8006f54:	296f      	cmp	r1, #111	; 0x6f
 8006f56:	d020      	beq.n	8006f9a <_printf_i+0xb2>
 8006f58:	2970      	cmp	r1, #112	; 0x70
 8006f5a:	d1dd      	bne.n	8006f18 <_printf_i+0x30>
 8006f5c:	6823      	ldr	r3, [r4, #0]
 8006f5e:	f043 0320 	orr.w	r3, r3, #32
 8006f62:	6023      	str	r3, [r4, #0]
 8006f64:	e003      	b.n	8006f6e <_printf_i+0x86>
 8006f66:	2975      	cmp	r1, #117	; 0x75
 8006f68:	d017      	beq.n	8006f9a <_printf_i+0xb2>
 8006f6a:	2978      	cmp	r1, #120	; 0x78
 8006f6c:	d1d4      	bne.n	8006f18 <_printf_i+0x30>
 8006f6e:	2378      	movs	r3, #120	; 0x78
 8006f70:	4865      	ldr	r0, [pc, #404]	; (8007108 <_printf_i+0x220>)
 8006f72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f76:	e055      	b.n	8007024 <_printf_i+0x13c>
 8006f78:	6813      	ldr	r3, [r2, #0]
 8006f7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f7e:	1d19      	adds	r1, r3, #4
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6011      	str	r1, [r2, #0]
 8006f84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e08c      	b.n	80070a6 <_printf_i+0x1be>
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f92:	6011      	str	r1, [r2, #0]
 8006f94:	bf18      	it	ne
 8006f96:	b21b      	sxthne	r3, r3
 8006f98:	e7cf      	b.n	8006f3a <_printf_i+0x52>
 8006f9a:	6813      	ldr	r3, [r2, #0]
 8006f9c:	6825      	ldr	r5, [r4, #0]
 8006f9e:	1d18      	adds	r0, r3, #4
 8006fa0:	6010      	str	r0, [r2, #0]
 8006fa2:	0628      	lsls	r0, r5, #24
 8006fa4:	d501      	bpl.n	8006faa <_printf_i+0xc2>
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	e002      	b.n	8006fb0 <_printf_i+0xc8>
 8006faa:	0668      	lsls	r0, r5, #25
 8006fac:	d5fb      	bpl.n	8006fa6 <_printf_i+0xbe>
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	296f      	cmp	r1, #111	; 0x6f
 8006fb2:	bf14      	ite	ne
 8006fb4:	220a      	movne	r2, #10
 8006fb6:	2208      	moveq	r2, #8
 8006fb8:	4852      	ldr	r0, [pc, #328]	; (8007104 <_printf_i+0x21c>)
 8006fba:	2100      	movs	r1, #0
 8006fbc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fc0:	6865      	ldr	r5, [r4, #4]
 8006fc2:	2d00      	cmp	r5, #0
 8006fc4:	60a5      	str	r5, [r4, #8]
 8006fc6:	f2c0 8095 	blt.w	80070f4 <_printf_i+0x20c>
 8006fca:	6821      	ldr	r1, [r4, #0]
 8006fcc:	f021 0104 	bic.w	r1, r1, #4
 8006fd0:	6021      	str	r1, [r4, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d13d      	bne.n	8007052 <_printf_i+0x16a>
 8006fd6:	2d00      	cmp	r5, #0
 8006fd8:	f040 808e 	bne.w	80070f8 <_printf_i+0x210>
 8006fdc:	4665      	mov	r5, ip
 8006fde:	2a08      	cmp	r2, #8
 8006fe0:	d10b      	bne.n	8006ffa <_printf_i+0x112>
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	07db      	lsls	r3, r3, #31
 8006fe6:	d508      	bpl.n	8006ffa <_printf_i+0x112>
 8006fe8:	6923      	ldr	r3, [r4, #16]
 8006fea:	6862      	ldr	r2, [r4, #4]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	bfde      	ittt	le
 8006ff0:	2330      	movle	r3, #48	; 0x30
 8006ff2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ff6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006ffa:	ebac 0305 	sub.w	r3, ip, r5
 8006ffe:	6123      	str	r3, [r4, #16]
 8007000:	f8cd 8000 	str.w	r8, [sp]
 8007004:	463b      	mov	r3, r7
 8007006:	aa03      	add	r2, sp, #12
 8007008:	4621      	mov	r1, r4
 800700a:	4630      	mov	r0, r6
 800700c:	f7ff fef6 	bl	8006dfc <_printf_common>
 8007010:	3001      	adds	r0, #1
 8007012:	d14d      	bne.n	80070b0 <_printf_i+0x1c8>
 8007014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007018:	b005      	add	sp, #20
 800701a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800701e:	4839      	ldr	r0, [pc, #228]	; (8007104 <_printf_i+0x21c>)
 8007020:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007024:	6813      	ldr	r3, [r2, #0]
 8007026:	6821      	ldr	r1, [r4, #0]
 8007028:	1d1d      	adds	r5, r3, #4
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6015      	str	r5, [r2, #0]
 800702e:	060a      	lsls	r2, r1, #24
 8007030:	d50b      	bpl.n	800704a <_printf_i+0x162>
 8007032:	07ca      	lsls	r2, r1, #31
 8007034:	bf44      	itt	mi
 8007036:	f041 0120 	orrmi.w	r1, r1, #32
 800703a:	6021      	strmi	r1, [r4, #0]
 800703c:	b91b      	cbnz	r3, 8007046 <_printf_i+0x15e>
 800703e:	6822      	ldr	r2, [r4, #0]
 8007040:	f022 0220 	bic.w	r2, r2, #32
 8007044:	6022      	str	r2, [r4, #0]
 8007046:	2210      	movs	r2, #16
 8007048:	e7b7      	b.n	8006fba <_printf_i+0xd2>
 800704a:	064d      	lsls	r5, r1, #25
 800704c:	bf48      	it	mi
 800704e:	b29b      	uxthmi	r3, r3
 8007050:	e7ef      	b.n	8007032 <_printf_i+0x14a>
 8007052:	4665      	mov	r5, ip
 8007054:	fbb3 f1f2 	udiv	r1, r3, r2
 8007058:	fb02 3311 	mls	r3, r2, r1, r3
 800705c:	5cc3      	ldrb	r3, [r0, r3]
 800705e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007062:	460b      	mov	r3, r1
 8007064:	2900      	cmp	r1, #0
 8007066:	d1f5      	bne.n	8007054 <_printf_i+0x16c>
 8007068:	e7b9      	b.n	8006fde <_printf_i+0xf6>
 800706a:	6813      	ldr	r3, [r2, #0]
 800706c:	6825      	ldr	r5, [r4, #0]
 800706e:	1d18      	adds	r0, r3, #4
 8007070:	6961      	ldr	r1, [r4, #20]
 8007072:	6010      	str	r0, [r2, #0]
 8007074:	0628      	lsls	r0, r5, #24
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	d501      	bpl.n	800707e <_printf_i+0x196>
 800707a:	6019      	str	r1, [r3, #0]
 800707c:	e002      	b.n	8007084 <_printf_i+0x19c>
 800707e:	066a      	lsls	r2, r5, #25
 8007080:	d5fb      	bpl.n	800707a <_printf_i+0x192>
 8007082:	8019      	strh	r1, [r3, #0]
 8007084:	2300      	movs	r3, #0
 8007086:	4665      	mov	r5, ip
 8007088:	6123      	str	r3, [r4, #16]
 800708a:	e7b9      	b.n	8007000 <_printf_i+0x118>
 800708c:	6813      	ldr	r3, [r2, #0]
 800708e:	1d19      	adds	r1, r3, #4
 8007090:	6011      	str	r1, [r2, #0]
 8007092:	681d      	ldr	r5, [r3, #0]
 8007094:	6862      	ldr	r2, [r4, #4]
 8007096:	2100      	movs	r1, #0
 8007098:	4628      	mov	r0, r5
 800709a:	f000 f917 	bl	80072cc <memchr>
 800709e:	b108      	cbz	r0, 80070a4 <_printf_i+0x1bc>
 80070a0:	1b40      	subs	r0, r0, r5
 80070a2:	6060      	str	r0, [r4, #4]
 80070a4:	6863      	ldr	r3, [r4, #4]
 80070a6:	6123      	str	r3, [r4, #16]
 80070a8:	2300      	movs	r3, #0
 80070aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070ae:	e7a7      	b.n	8007000 <_printf_i+0x118>
 80070b0:	6923      	ldr	r3, [r4, #16]
 80070b2:	462a      	mov	r2, r5
 80070b4:	4639      	mov	r1, r7
 80070b6:	4630      	mov	r0, r6
 80070b8:	47c0      	blx	r8
 80070ba:	3001      	adds	r0, #1
 80070bc:	d0aa      	beq.n	8007014 <_printf_i+0x12c>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	079b      	lsls	r3, r3, #30
 80070c2:	d413      	bmi.n	80070ec <_printf_i+0x204>
 80070c4:	68e0      	ldr	r0, [r4, #12]
 80070c6:	9b03      	ldr	r3, [sp, #12]
 80070c8:	4298      	cmp	r0, r3
 80070ca:	bfb8      	it	lt
 80070cc:	4618      	movlt	r0, r3
 80070ce:	e7a3      	b.n	8007018 <_printf_i+0x130>
 80070d0:	2301      	movs	r3, #1
 80070d2:	464a      	mov	r2, r9
 80070d4:	4639      	mov	r1, r7
 80070d6:	4630      	mov	r0, r6
 80070d8:	47c0      	blx	r8
 80070da:	3001      	adds	r0, #1
 80070dc:	d09a      	beq.n	8007014 <_printf_i+0x12c>
 80070de:	3501      	adds	r5, #1
 80070e0:	68e3      	ldr	r3, [r4, #12]
 80070e2:	9a03      	ldr	r2, [sp, #12]
 80070e4:	1a9b      	subs	r3, r3, r2
 80070e6:	42ab      	cmp	r3, r5
 80070e8:	dcf2      	bgt.n	80070d0 <_printf_i+0x1e8>
 80070ea:	e7eb      	b.n	80070c4 <_printf_i+0x1dc>
 80070ec:	2500      	movs	r5, #0
 80070ee:	f104 0919 	add.w	r9, r4, #25
 80070f2:	e7f5      	b.n	80070e0 <_printf_i+0x1f8>
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1ac      	bne.n	8007052 <_printf_i+0x16a>
 80070f8:	7803      	ldrb	r3, [r0, #0]
 80070fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007102:	e76c      	b.n	8006fde <_printf_i+0xf6>
 8007104:	080074c9 	.word	0x080074c9
 8007108:	080074da 	.word	0x080074da

0800710c <_putc_r>:
 800710c:	b570      	push	{r4, r5, r6, lr}
 800710e:	460d      	mov	r5, r1
 8007110:	4614      	mov	r4, r2
 8007112:	4606      	mov	r6, r0
 8007114:	b118      	cbz	r0, 800711e <_putc_r+0x12>
 8007116:	6983      	ldr	r3, [r0, #24]
 8007118:	b90b      	cbnz	r3, 800711e <_putc_r+0x12>
 800711a:	f7ff fb9d 	bl	8006858 <__sinit>
 800711e:	4b13      	ldr	r3, [pc, #76]	; (800716c <_putc_r+0x60>)
 8007120:	429c      	cmp	r4, r3
 8007122:	d112      	bne.n	800714a <_putc_r+0x3e>
 8007124:	6874      	ldr	r4, [r6, #4]
 8007126:	68a3      	ldr	r3, [r4, #8]
 8007128:	3b01      	subs	r3, #1
 800712a:	2b00      	cmp	r3, #0
 800712c:	60a3      	str	r3, [r4, #8]
 800712e:	da16      	bge.n	800715e <_putc_r+0x52>
 8007130:	69a2      	ldr	r2, [r4, #24]
 8007132:	4293      	cmp	r3, r2
 8007134:	db02      	blt.n	800713c <_putc_r+0x30>
 8007136:	b2eb      	uxtb	r3, r5
 8007138:	2b0a      	cmp	r3, #10
 800713a:	d110      	bne.n	800715e <_putc_r+0x52>
 800713c:	4622      	mov	r2, r4
 800713e:	4629      	mov	r1, r5
 8007140:	4630      	mov	r0, r6
 8007142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007146:	f7ff b9d7 	b.w	80064f8 <__swbuf_r>
 800714a:	4b09      	ldr	r3, [pc, #36]	; (8007170 <_putc_r+0x64>)
 800714c:	429c      	cmp	r4, r3
 800714e:	d101      	bne.n	8007154 <_putc_r+0x48>
 8007150:	68b4      	ldr	r4, [r6, #8]
 8007152:	e7e8      	b.n	8007126 <_putc_r+0x1a>
 8007154:	4b07      	ldr	r3, [pc, #28]	; (8007174 <_putc_r+0x68>)
 8007156:	429c      	cmp	r4, r3
 8007158:	bf08      	it	eq
 800715a:	68f4      	ldreq	r4, [r6, #12]
 800715c:	e7e3      	b.n	8007126 <_putc_r+0x1a>
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	b2e8      	uxtb	r0, r5
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	6022      	str	r2, [r4, #0]
 8007166:	701d      	strb	r5, [r3, #0]
 8007168:	bd70      	pop	{r4, r5, r6, pc}
 800716a:	bf00      	nop
 800716c:	08007478 	.word	0x08007478
 8007170:	08007498 	.word	0x08007498
 8007174:	08007458 	.word	0x08007458

08007178 <_sbrk_r>:
 8007178:	b538      	push	{r3, r4, r5, lr}
 800717a:	2300      	movs	r3, #0
 800717c:	4c05      	ldr	r4, [pc, #20]	; (8007194 <_sbrk_r+0x1c>)
 800717e:	4605      	mov	r5, r0
 8007180:	4608      	mov	r0, r1
 8007182:	6023      	str	r3, [r4, #0]
 8007184:	f7fa f872 	bl	800126c <_sbrk>
 8007188:	1c43      	adds	r3, r0, #1
 800718a:	d102      	bne.n	8007192 <_sbrk_r+0x1a>
 800718c:	6823      	ldr	r3, [r4, #0]
 800718e:	b103      	cbz	r3, 8007192 <_sbrk_r+0x1a>
 8007190:	602b      	str	r3, [r5, #0]
 8007192:	bd38      	pop	{r3, r4, r5, pc}
 8007194:	20001c5c 	.word	0x20001c5c

08007198 <__sread>:
 8007198:	b510      	push	{r4, lr}
 800719a:	460c      	mov	r4, r1
 800719c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071a0:	f000 f8a4 	bl	80072ec <_read_r>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	bfab      	itete	ge
 80071a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071aa:	89a3      	ldrhlt	r3, [r4, #12]
 80071ac:	181b      	addge	r3, r3, r0
 80071ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071b2:	bfac      	ite	ge
 80071b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80071b6:	81a3      	strhlt	r3, [r4, #12]
 80071b8:	bd10      	pop	{r4, pc}

080071ba <__swrite>:
 80071ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071be:	461f      	mov	r7, r3
 80071c0:	898b      	ldrh	r3, [r1, #12]
 80071c2:	4605      	mov	r5, r0
 80071c4:	05db      	lsls	r3, r3, #23
 80071c6:	460c      	mov	r4, r1
 80071c8:	4616      	mov	r6, r2
 80071ca:	d505      	bpl.n	80071d8 <__swrite+0x1e>
 80071cc:	2302      	movs	r3, #2
 80071ce:	2200      	movs	r2, #0
 80071d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071d4:	f000 f868 	bl	80072a8 <_lseek_r>
 80071d8:	89a3      	ldrh	r3, [r4, #12]
 80071da:	4632      	mov	r2, r6
 80071dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071e0:	81a3      	strh	r3, [r4, #12]
 80071e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071e6:	463b      	mov	r3, r7
 80071e8:	4628      	mov	r0, r5
 80071ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071ee:	f000 b817 	b.w	8007220 <_write_r>

080071f2 <__sseek>:
 80071f2:	b510      	push	{r4, lr}
 80071f4:	460c      	mov	r4, r1
 80071f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071fa:	f000 f855 	bl	80072a8 <_lseek_r>
 80071fe:	1c43      	adds	r3, r0, #1
 8007200:	89a3      	ldrh	r3, [r4, #12]
 8007202:	bf15      	itete	ne
 8007204:	6560      	strne	r0, [r4, #84]	; 0x54
 8007206:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800720a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800720e:	81a3      	strheq	r3, [r4, #12]
 8007210:	bf18      	it	ne
 8007212:	81a3      	strhne	r3, [r4, #12]
 8007214:	bd10      	pop	{r4, pc}

08007216 <__sclose>:
 8007216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800721a:	f000 b813 	b.w	8007244 <_close_r>
	...

08007220 <_write_r>:
 8007220:	b538      	push	{r3, r4, r5, lr}
 8007222:	4605      	mov	r5, r0
 8007224:	4608      	mov	r0, r1
 8007226:	4611      	mov	r1, r2
 8007228:	2200      	movs	r2, #0
 800722a:	4c05      	ldr	r4, [pc, #20]	; (8007240 <_write_r+0x20>)
 800722c:	6022      	str	r2, [r4, #0]
 800722e:	461a      	mov	r2, r3
 8007230:	f7f8 ffb4 	bl	800019c <_write>
 8007234:	1c43      	adds	r3, r0, #1
 8007236:	d102      	bne.n	800723e <_write_r+0x1e>
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	b103      	cbz	r3, 800723e <_write_r+0x1e>
 800723c:	602b      	str	r3, [r5, #0]
 800723e:	bd38      	pop	{r3, r4, r5, pc}
 8007240:	20001c5c 	.word	0x20001c5c

08007244 <_close_r>:
 8007244:	b538      	push	{r3, r4, r5, lr}
 8007246:	2300      	movs	r3, #0
 8007248:	4c05      	ldr	r4, [pc, #20]	; (8007260 <_close_r+0x1c>)
 800724a:	4605      	mov	r5, r0
 800724c:	4608      	mov	r0, r1
 800724e:	6023      	str	r3, [r4, #0]
 8007250:	f7f9 ffdb 	bl	800120a <_close>
 8007254:	1c43      	adds	r3, r0, #1
 8007256:	d102      	bne.n	800725e <_close_r+0x1a>
 8007258:	6823      	ldr	r3, [r4, #0]
 800725a:	b103      	cbz	r3, 800725e <_close_r+0x1a>
 800725c:	602b      	str	r3, [r5, #0]
 800725e:	bd38      	pop	{r3, r4, r5, pc}
 8007260:	20001c5c 	.word	0x20001c5c

08007264 <_fstat_r>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	2300      	movs	r3, #0
 8007268:	4c06      	ldr	r4, [pc, #24]	; (8007284 <_fstat_r+0x20>)
 800726a:	4605      	mov	r5, r0
 800726c:	4608      	mov	r0, r1
 800726e:	4611      	mov	r1, r2
 8007270:	6023      	str	r3, [r4, #0]
 8007272:	f7f9 ffd5 	bl	8001220 <_fstat>
 8007276:	1c43      	adds	r3, r0, #1
 8007278:	d102      	bne.n	8007280 <_fstat_r+0x1c>
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	b103      	cbz	r3, 8007280 <_fstat_r+0x1c>
 800727e:	602b      	str	r3, [r5, #0]
 8007280:	bd38      	pop	{r3, r4, r5, pc}
 8007282:	bf00      	nop
 8007284:	20001c5c 	.word	0x20001c5c

08007288 <_isatty_r>:
 8007288:	b538      	push	{r3, r4, r5, lr}
 800728a:	2300      	movs	r3, #0
 800728c:	4c05      	ldr	r4, [pc, #20]	; (80072a4 <_isatty_r+0x1c>)
 800728e:	4605      	mov	r5, r0
 8007290:	4608      	mov	r0, r1
 8007292:	6023      	str	r3, [r4, #0]
 8007294:	f7f9 ffd3 	bl	800123e <_isatty>
 8007298:	1c43      	adds	r3, r0, #1
 800729a:	d102      	bne.n	80072a2 <_isatty_r+0x1a>
 800729c:	6823      	ldr	r3, [r4, #0]
 800729e:	b103      	cbz	r3, 80072a2 <_isatty_r+0x1a>
 80072a0:	602b      	str	r3, [r5, #0]
 80072a2:	bd38      	pop	{r3, r4, r5, pc}
 80072a4:	20001c5c 	.word	0x20001c5c

080072a8 <_lseek_r>:
 80072a8:	b538      	push	{r3, r4, r5, lr}
 80072aa:	4605      	mov	r5, r0
 80072ac:	4608      	mov	r0, r1
 80072ae:	4611      	mov	r1, r2
 80072b0:	2200      	movs	r2, #0
 80072b2:	4c05      	ldr	r4, [pc, #20]	; (80072c8 <_lseek_r+0x20>)
 80072b4:	6022      	str	r2, [r4, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	f7f9 ffcb 	bl	8001252 <_lseek>
 80072bc:	1c43      	adds	r3, r0, #1
 80072be:	d102      	bne.n	80072c6 <_lseek_r+0x1e>
 80072c0:	6823      	ldr	r3, [r4, #0]
 80072c2:	b103      	cbz	r3, 80072c6 <_lseek_r+0x1e>
 80072c4:	602b      	str	r3, [r5, #0]
 80072c6:	bd38      	pop	{r3, r4, r5, pc}
 80072c8:	20001c5c 	.word	0x20001c5c

080072cc <memchr>:
 80072cc:	b510      	push	{r4, lr}
 80072ce:	b2c9      	uxtb	r1, r1
 80072d0:	4402      	add	r2, r0
 80072d2:	4290      	cmp	r0, r2
 80072d4:	4603      	mov	r3, r0
 80072d6:	d101      	bne.n	80072dc <memchr+0x10>
 80072d8:	2300      	movs	r3, #0
 80072da:	e003      	b.n	80072e4 <memchr+0x18>
 80072dc:	781c      	ldrb	r4, [r3, #0]
 80072de:	3001      	adds	r0, #1
 80072e0:	428c      	cmp	r4, r1
 80072e2:	d1f6      	bne.n	80072d2 <memchr+0x6>
 80072e4:	4618      	mov	r0, r3
 80072e6:	bd10      	pop	{r4, pc}

080072e8 <__malloc_lock>:
 80072e8:	4770      	bx	lr

080072ea <__malloc_unlock>:
 80072ea:	4770      	bx	lr

080072ec <_read_r>:
 80072ec:	b538      	push	{r3, r4, r5, lr}
 80072ee:	4605      	mov	r5, r0
 80072f0:	4608      	mov	r0, r1
 80072f2:	4611      	mov	r1, r2
 80072f4:	2200      	movs	r2, #0
 80072f6:	4c05      	ldr	r4, [pc, #20]	; (800730c <_read_r+0x20>)
 80072f8:	6022      	str	r2, [r4, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	f7f9 ff68 	bl	80011d0 <_read>
 8007300:	1c43      	adds	r3, r0, #1
 8007302:	d102      	bne.n	800730a <_read_r+0x1e>
 8007304:	6823      	ldr	r3, [r4, #0]
 8007306:	b103      	cbz	r3, 800730a <_read_r+0x1e>
 8007308:	602b      	str	r3, [r5, #0]
 800730a:	bd38      	pop	{r3, r4, r5, pc}
 800730c:	20001c5c 	.word	0x20001c5c

08007310 <_init>:
 8007310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007312:	bf00      	nop
 8007314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007316:	bc08      	pop	{r3}
 8007318:	469e      	mov	lr, r3
 800731a:	4770      	bx	lr

0800731c <_fini>:
 800731c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731e:	bf00      	nop
 8007320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007322:	bc08      	pop	{r3}
 8007324:	469e      	mov	lr, r3
 8007326:	4770      	bx	lr
